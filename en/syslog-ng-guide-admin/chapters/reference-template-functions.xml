<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="reference-template-functions" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Template functions of &abbrev;</title>
    <para>The following template functions are available in &abbrev;.</para>
    <simplesect xml:id="template-function-echo">
        <title>echo</title>
            <indexterm type="parameter">
                <primary>echo</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu>
            <synopsis>$(echo argument)</synopsis></para>
        <para><guimenu>Description:</guimenu> Returns the value of its argument. Using <parameter>$(echo ${HOST})</parameter> is equivalent to <parameter>${HOST}</parameter>.</para>
    </simplesect>
    <simplesect xml:id="template-function-env">
        <title>env</title>
            <indexterm type="parameter">
                <primary>env</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu>
            <synopsis>$(env &lt;environment-variable&gt;)</synopsis></para>
        <para><guimenu>Description:</guimenu> Returns the value of the specified environment variable. Available in &abbrev; <phrase condition="ose">3.5</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-format-json" condition="ose">
        <title>format-json</title>
            <indexterm type="parameter">
                <primary>format-json</primary>
            </indexterm>
        <indexterm>
            <primary>JSON</primary>
        </indexterm>
        <indexterm>
            <primary>JavaScript Object Notation</primary>
        </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(format-json parameters)</synopsis></para>
        <para><guimenu>Description:</guimenu> The <parameter>format-json</parameter> template function receives value-pairs as parameters and converts them into JavaScript Object Notation (JSON) format. Including the template function in a message template allows you to store selected information about a log message (that is, its content, macros, or other metadata) in JSON format.</para>
        <para>For details on selecting value-pairs in &abbrev; and for possibilities to specify which information to convert to JSON format, see <xref linkend="concepts-value-pairs"/>. Note that the syntax of <parameter>format-json</parameter> is different from the syntax of <parameter>value-pairs()</parameter>: <parameter>format-json</parameter> uses a syntax similar to command lines.</para>

        <xi:include href="../../common/wnt/note-typehinting.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <example>
            <title>Using the format-json template function</title>
            <para>The following example selects every available information about the log message, except for the date-related macros (<parameter>R_*</parameter> and <parameter>S_*</parameter>), selects the <parameter>.SDATA.meta.sequenceId</parameter> macro, and defines a new value-pair called <parameter>MSGHDR</parameter> that contains the program name and PID of the application that sent the log message.</para>
            <synopsis>$(format-json --scope syslog,all_macros,selected_macros \
  --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
  --pair MSGHDR="$PROGRAM[$PID]: ")</synopsis>
                    <para>The following example shows how to use this template function to store log messages in JSON format:</para>
                    <synopsis>destination d_json {
  file("/var/log/messages.json" template("$(format_json --scope selected_macros --scope nv_pairs)\n"));
};</synopsis>
        </example>
        <note>
            <para>In case of syslog-ng macros starting with a dot (for example "<parameter>.SDATA.meta.sequenceID</parameter>") an empty key name is added at the top level of the JSON structure. You can work around this by adding <parameter>--shift 1</parameter> as a parameter to the template function. For example in case of "<parameter>.SDATA.meta.sequenceID</parameter>", an empty key name is added at the top level of the JSON structure:</para>
            <synopsis>{"":
    {"SDATA" :
        {"meta" :
            {"sequenceID": "123"}
        }
    }
}</synopsis>
        </note>
    </simplesect>
    <simplesect xml:id="template-function-geoip" condition="ose">
        <title>geoip</title>
            <indexterm type="parameter">
                <primary>geoip</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(geoip &lt;IP-address&gt;)</synopsis></para>
        <para><guimenu>Description:</guimenu> This template function returns the 2-letter country code of any IPv4 address or host. Currently only the 2-letter codes are supported, and only from the default database. For example, <parameter>$(geoip $HOST)</parameter></para>
        <note condition="ose">
            <para>This template function is available only if &abbrev; has been compiled with the <parameter>--enable-geoip</parameter> compiling option.</para>
        </note>
    </simplesect>
    <simplesect xml:id="template-function-grep">
        <title>grep</title>
            <indexterm type="parameter">
                <primary>grep</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu>
            <synopsis>$(grep condition value-to-select)</synopsis><!-- FIXME pontositani --></para>
        <para><guimenu>Description:</guimenu> The <parameter>grep</parameter> template function is useful when using a pattern database to correlate related log messages. The <parameter>grep</parameter> template function can be used to filter the messages of the same context when the index of the particular message is not known.</para>
        <example>
            <title>Using the grep template function</title>
            <para>The following example selects the message of the context that has a <parameter>username</parameter> name-value pair with the <parameter>root</parameter> value, and returns the value of the <parameter>auth_method</parameter> name-value pair.</para>
            <synopsis>$(grep ("${username}" == "root") ${auth_method})</synopsis>
        </example>
        <para>It is possible to specify multiple name-value pairs as parameters, separated with commas. If multiple messages match the condition of <parameter>grep</parameter>, these will be returned also separated by commas. This can be used for example to collect the e-mail recipients from postfix messages.</para>
        <!-- FIXME konkret peldat! -->
    </simplesect>
    <simplesect xml:id="template-function-if">
        <title>if</title>
            <indexterm type="parameter">
                <primary>if</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu>
            <synopsis>$(if (&lt;condition&gt;) &lt;true template&gt; &lt;false template&gt;)</synopsis></para>
        <para><guimenu>Description:</guimenu> Returns the value of the <parameter>&lt;true template&gt;</parameter> parameter if the <parameter>&lt;condition&gt;</parameter> is true. If the <parameter>&lt;condition&gt;</parameter> is false, the value of <parameter>&lt;false template&gt;</parameter> is returned.</para>
        <example>
            <title>Using pattern databases and the if template function</title>
            <para>The following example returns <parameter>violation</parameter> if the <parameter>username</parameter> name-value pair of a message processed with pattern database is <parameter>root</parameter>, and <parameter>system</parameter> otherwise.</para>
            <synopsis>$(if ("${username}" == "root") "violation" "system")</synopsis>
            <para>This can be used to set the class of a message in pattern database rules based on the condition.</para>
            <synopsis>&lt;value name="username"&gt;$(if ("${username}" == "root") "violation" "system")&lt;/value&gt;</synopsis>
            <indexterm>
                <primary>template functions</primary>
                <secondary>embedding</secondary>
            </indexterm>
            <para>Since template functions can be embedded into each other, it is possible to use another template function as the template of the first one. For example, the following expression returns <parameter>root</parameter> if the username is <parameter>root</parameter>, <parameter>admin</parameter> if the username is <parameter>joe</parameter>, and <parameter>normal user</parameter> otherwise.</para>
            <synopsis>&lt;value name="username"&gt;
        $(if ("${username}" == "root")
            "root"
            $(if ("${username}" == "joe") "admin" "normal user")
            "normal user")&lt;/value&gt;</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-indent-multi-line">
        <title>indent-multi-line</title>
            <indexterm type="parameter">
                <primary>indent-multi-line</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu>
            <synopsis>$(indent-multi-line parameter)</synopsis></para>
        <para><guimenu>Description:</guimenu> This template function makes it possible to write multi-line log messages into a file. The first line is written like a regular message, subsequent lines are indented with a tab, in compliance with RFC822.</para>
        <example>
            <title>Using the indent-multi-line template function</title>
            <para>The following example writes multi-line messages into a text file.</para>
            <synopsis>destination d_file {
        file ("/var/log/messages"
                template("${ISODATE} ${HOST} $(indent-multi-line ${MESSAGE})\n") );
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-ipv4-to-int">
        <title>ipv4-to-int</title>
            <indexterm type="parameter">
                <primary>ipv4-to-int</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu>
            <synopsis>$(ipv4-to-int parameter)</synopsis></para>
        <para><guimenu>Description:</guimenu> Converts the specified IPv4 address to its numeric representation. The numerical value of an IPv4 address is calculated by treating the IP address as a 4-byte hexadecimal value. For example, the 192.168.1.1 address equals to: 192=C0, 168=A8, 1=01, 1=01, or C0A80101, which is 3232235777 in decimal representation.</para>
        <note>
            <para>This template function is available only if the <filename>convertfuncs</filename> module has been loaded. By default, &abbrev; loads every available module.</para>
            <!-- FIXME link a modulokrol szolo leirasra-->
        </note>
    </simplesect>
    <simplesect xml:id="template-function-length" condition="ose">
        <title>length</title>
            <indexterm type="parameter">
                <primary>length</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(length "&lt;macro&gt;")</synopsis></para>
        <para><guimenu>Description:</guimenu> Returns the length of the macro in characters, for example, the length of the message. For example, the following filter selects messages that are shorter than 16 characters:</para>
        <synopsis>f_short {
    match ('-', value ("$(if ($(length "${MSG}") &lt;= 16) "-" "+")"));
};</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-lowercase" condition="ose">
        <title>lowercase</title>
            <indexterm type="parameter">
                <primary>lowercase</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(lowercase "&lt;macro&gt;")</synopsis></para>
        <para><guimenu>Description:</guimenu> Returns the lowercase version of the specified string or macro. For example, the following example uses the lowercase version of the hostname in a directory name:</para>
        <synopsis>destination d_file {
file ("/var/log/${MONTH}/${DAY}/$(lowercase "${HOST}")/messages");
};</synopsis>
        <para>Available in &abbrev; <phrase condition="ose">3.5</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-numerical" condition="ose">
        <title>Numerical operations</title>
            <indexterm type="parameter">
                <primary>numerical operations</primary>
            </indexterm>
            <indexterm type="parameter">
                <primary>addition</primary>
            </indexterm>
            <indexterm type="parameter">
                <primary>substraction</primary>
            </indexterm>
            <indexterm type="parameter">
                <primary>multiplication</primary>
            </indexterm>
            <indexterm type="parameter">
                <primary>division</primary>
            </indexterm>
            <indexterm type="parameter">
                <primary>modulus</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(&lt;operation&gt; "&lt;value1&gt;" "&lt;value2&gt;")</synopsis></para>
        <para><guimenu>Description:</guimenu> These template functions allow you to manipulate numbers, that is, to perform addition (+), substraction (-), multiplication (*), division (/), and modulus (%). All of them require two numeric arguments. The result is <parameter>NaN</parameter> (Not-a-Number) if the parameters are not numbers, cannot be parsed, or if a division by zero would occur. For example, to add the value of two macros, use the following template function:</para>
        <synopsis>$(+ "${&lt;MACRO1&gt;}" "${&lt;MACRO2&gt;}");</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-replace-delimiter" condition="ose">
        <title>replace-delimiter</title>
            <indexterm type="parameter">
                <primary>replace-delimiter</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(replace-delimiter "&lt;old-delimiters&gt;" "&lt;new-delimiter&gt;" "&lt;macro&gt;")</synopsis></para>
        <para><guimenu>Description:</guimenu> Replaces the delimiter character with a new one. For example, the following example replaces the tabulators (<parameter>/t</parameter>) in the message with semicolons (<parameter>;</parameter>):</para>
        <synopsis>$(replace-delimiter "\t" ";" "${MESSAGE}")</synopsis>
        <para>Available in &abbrev; <phrase condition="ose">3.5</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-sanitize" condition="ose">
        <title>sanitize</title>
            <indexterm type="parameter">
                <primary>sanitize</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(sanitize &lt;options&gt; "&lt;macro1&gt;" "&lt;macro2&gt; ...")</synopsis></para>
        <para><guimenu>Description:</guimenu> This file replaces the special characters in macro values, for example, it can replace the slash (/) characters in a filename with the underscore (_) character. If you specify multiple arguments, they will be concatenated using the <parameter>/</parameter> character, so they can be used as separate directory levels when used in filenames.</para>
        <para>The function has the following options:</para>
        <variablelist>
            <varlistentry>
                <term>
                    <parameter>--ctrl-chars or -c</parameter>
                </term>
                <listitem>
                    <para>Filter control characters (characters that have an ASCII code of 32 or lower). This option is used by default.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <parameter>--invalid-chars &lt;characterlist&gt; or -i &lt;characterlist&gt;</parameter>
                </term>
                <listitem>
                    <para>The list of characters to be replaced with underscores (_). The default list contains the <parameter>/</parameter> character. The following example replaces the \ and @ characters, so for example, fo\o@bar becomes foobar:</para>
                    <synopsis>$(sanitize -i \@ $PROGRAM)</synopsis>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <parameter>--no-ctrl-chars or -C</parameter>
                </term>
                <listitem>
                    <para>Do not filter the control characters (characters that have an ASCII code of 32 or lower).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <parameter>--replacement &lt;replacement-character&gt; or -r &lt;replacement-character&gt;</parameter>
                </term>
                <listitem>
                    <para>The character used to replace invalid characters. By default, this is the underscore (_). The following example replaces invalid characters with colons instead of underscores, so for example, foo/bar becomes foo;bar:</para>
                    <synopsis>$(sanitize -r ; $PROGRAM)</synopsis>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Using the sanitize template function</title>
            <para>The following example uses the sanitize function on two macros, and the results are used as directory names in a file destination.</para>
            <synopsis>file("/var/log/$(sanitize $HOST $PROGRAM)/messages");</synopsis>
            <para>This is equivalent to <parameter>file("/var/log/$HOST/$PROGRAM/messages");</parameter>, but any slashes in the values of the $HOST and $PROGRAM macros are replaced with underscores.</para>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-strip" condition="ose">
        <title>strip</title>
            <indexterm type="parameter">
                <primary>strip</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(strip "&lt;macro&gt;")</synopsis></para>
        <para><guimenu>Description:</guimenu> Deletes whitespaces from the beginning and the end of a macro. You can specify multiple macros separated with whitespace in a single template function, for example:</para>
        <synopsis>$(strip "${MSG}" "${PROGRAM}");
};</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-substr" condition="ose">
        <title>substr</title>
        <indexterm type="parameter">
            <primary>substr</primary>
        </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(substr "&lt;argument&gt;" "&lt;offset&gt;" "&lt;length&gt;")</synopsis></para>
        <para><guimenu>Description:</guimenu> This function extracts a substring of a string.</para>
        <variablelist>
            <varlistentry>
                <term>
                    <command>argument</command>
                </term>
                <listitem>
                    <para>The string to extract the substring from, for example, <parameter>"${MSG}"</parameter></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>offset</command>
                </term>
                <listitem>
                    <para>Specifies where the substring begins (in characters). <parameter>0</parameter> means to start from the beginning of the string, <parameter>5</parameter> means to skip the first 5 characters of the string, and so on. Use negative numbers to specify where to start from the end of the string, for example, <parameter>-1</parameter> means the last character, <parameter>-5</parameter> means to start five characters before the end of the string.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>length</command>
                </term>
                <listitem>
                    <para><emphasis>Optional parameter</emphasis>: The number of characters to extract. If not specified, the substring will be extracted from the offset to the end of the string. Use negative numbers to stop the substring before the end of the string, for example, <parameter>-5</parameter> means the substring ends five characters before the end of the string.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Using the substr template function</title>
            <para>Skip the first 15 characters of the message, and select the rest:</para>
            <synopsis>$(substr "${MSG}" "15");</synopsis>
            <para>Select characters 16-30 of the message:</para>
            <synopsis>$(substr "${MSG}" "15" "30");</synopsis>
            <para>Select the last 15 characters of the message:</para>
            <synopsis>$(substr "${MSG}" "-15");</synopsis>
            <para>A template that converst the message to RFC3164 (BSD-syslog) format and truncates the messages to 1023 characters:</para>
            <synopsis>template t_truncate_messages {
      template("$(substr \"&lt;$PRI&gt;$DATE $HOST $MSGHDR$MSG\" \"0\" \"1023\")\n");
      template_escape(no);
  };</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-hash" condition="ose">
        <title>tfhash</title>
        <indexterm type="parameter">
            <primary>tfhash</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>$(hash)</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>$(md5), $(md4)</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>$(sha1), $(sha256), $(sha512)</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>tfhash</primary>
        </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(&lt;method&gt; [opts] $arg1 $arg2 $arg3...)</synopsis></para>
        <para><guimenu>Options:</guimenu> <synopsis>--length N, -l N</synopsis> Truncate the hash to the first N characters.</para>
        <para><guimenu>Description:</guimenu> <parameter>&lt;method&gt;</parameter> can be one of md5, md4, sha1, sha256, sha512 and "hash", which is equivalent to md5. Macros are expected as arguments, and they are concatenated without the use of additional characters.</para>
        <para>This template function can be used for anonymizing sensitive parts of the log message (for example username) that were parsed out using PatternDB before storing or forwarding the message. This way, the ability of correlating messages along this value is retained.</para>
        <para>Also, using this template, quasi-unique IDs can be generated for data, using the <parameter>--length</parameter> option. This way, IDs will be shorter than a regular hash, but there is a very small possibility of them not being as unique as a non-truncated hash.</para>
        <note>
            <para>These template functions are available only if <phrase condition="ose">&abbrev; has been compiled with the <parameter>--enable-ssl</parameter> compile option and </phrase>the <filename>tfhash</filename> module has been loaded. By default, &abbrev; loads every available module.</para>
            <!-- FIXME link a modulokrol szolo leirasra-->
        </note>
        <example xml:id="template-function-hash-example">
            <title>Using the $(hash) template function</title>
            <para>The following example calculates the SHA1 hash of the hostname of the message:</para>
            <synopsis>$(sha1 $HOST)</synopsis>
            <para>To use shorter hashes, set the <parameter>--length</parameter>:</para>
            <synopsis>$(sha1 --length 6 $HOST)</synopsis>
            <para>To replace the hostname with its hash, use a rewrite rule:</para>
            <synopsis>rewrite r_rewrite_hoistname{set("$(sha1 $HOST)", value("HOST"));};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-uppercase" condition="ose">
        <title>uppercase</title>
            <indexterm type="parameter">
                <primary>uppercase</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(uppercase "&lt;macro&gt;")</synopsis></para>
        <para><guimenu>Description:</guimenu> Returns the uppercase version of the specified string or macro. For example, the following example uses the uppercase version of the hostname in a directory name:</para>
        <synopsis>destination d_file {
file ("/var/log/${MONTH}/${DAY}/$(uppercase "${HOST}")/messages");
};</synopsis>
        <para>Available in &abbrev; <phrase condition="ose">3.5</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-uuid" condition="ose">
        <title>uuid</title>
            <indexterm type="parameter">
                <primary>uuid</primary>
            </indexterm>
        <para><guimenu>Syntax:</guimenu> <synopsis>$(uuid)</synopsis></para>
        <para><guimenu>Description:</guimenu> Generates a Universally Unique IDentifier (UUID) that complies with <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://www.ietf.org/rfc/rfc4122.txt">RFC4122</link>. That way, an UUID can be added to the message soon after it is received, so messages stored in multiple destinations can be identified. For example, when storing messages in a database and also in files, the UUID can be used to find a particular message both in the database and the files.</para>
        <para>To generate a UUID, you can use a rewrite rule to create a new value-pair for the message.</para>
        <example>
            <title>Using Universally Unique Identifiers</title>
            <para>The following example adds a value-pair called <parameter>MESSAGE_UUID</parameter> to the message using a rewrite rule and a template.</para>
        </example>
        <synopsis>rewrite r_add_uuid { set("$(uuid)" value("MESSAGE_UUID")); };
destination d_file {
    file ("/var/log/messages"
          template("$MESSAGE_UUID $ISODATE $HOST $MSG\n")
          template_escape(no)
         );
};

log { source(s_network);
      rewrite(r_add_uuid);
      destination(d_file);
};</synopsis>
        <note>
            <para>This template function is available only if the <filename>tfuuid</filename> module has been loaded. By default, &abbrev; loads every available module.</para>
            <!-- FIXME link a modulokrol szolo leirasra-->
        </note>
    </simplesect>
</section>
