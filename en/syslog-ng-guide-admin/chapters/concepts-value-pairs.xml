<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % entities SYSTEM "../syslog-ng-entities.ent">
  %entities;]>
<section xml:id="concepts-value-pairs" condition="ose" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Structuring macros, metadata, and other value-pairs</title>
    <para><emphasis role="bold">Available in &abbrev; <phrase condition="ose">3.3</phrase><phrase condition="pe">4.2</phrase> and later.</emphasis></para>
    <para>The &abbrev; application allows you to select and construct name-value pairs from any information already available about the log message, or extracted from the message itself. This structured information can be used directly in a MongoDB database (see the <parameter>value-pairs()</parameter> option of the <parameter>mongodb()</parameter> destination in <xref linkend="configuring_destinations_mongodb"/>), or in other destinations using the <parameter>format-json()</parameter> template function (see <xref linkend="template-function-format-json"/> for details).</para>
    <para>When using <parameter>value-pairs</parameter>, there are three ways to specify which information (that is, macros or other name-value pairs) to include in the selection.</para>
    <itemizedlist>
        <listitem>
            <para>Select groups of macros using the <parameter>scope()</parameter> parameter, and optionally remove certain macros from the group using the <parameter>exclude()</parameter> parameter.</para>
        </listitem>
        <listitem>
            <para>List specific macros to include using the <parameter>key()</parameter> parameter.</para>
        </listitem>
        <listitem>
            <para>Define new name-value pairs to include using the <parameter>pair()</parameter> parameter.</para>
        </listitem>
    </itemizedlist>
    <para>These parameters are detailed in <xref linkend="options-value-pairs"/>.</para>
    <simplesect xml:id="options-value-pairs">
        <title>value-pairs()</title>
        <indexterm type="parameter">
            <primary>value-pairs()</primary>
        </indexterm>
        <informaltable frame="topbot" colsep="0" rowsep="0">
            <tgroup cols="2">
            <colspec colnum="1" colwidth="40pt"/>
                <tbody>
                    <row>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>parameter list of the <parameter>value-pairs()</parameter> option</entry>
                    </row>
                    <row>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry><synopsis>empty string</synopsis></entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <para><guilabel>Description:</guilabel> The <parameter>value-pairs()</parameter> option allows you to select specific information about a message easily using predefined macro groups. The selected information is represented as name-value pairs and can be used formatted to JSON format, or directly used in a <parameter>mongodb()</parameter> destination.</para>
        <example>
            <title>Using the <parameter>value-pairs()</parameter> option</title>
            <indexterm type="parameter">
                <primary>value-pairs()</primary>
            </indexterm>
            <para>The following example selects every available information about the log message, except for the date-related macros (<parameter>R_*</parameter> and <parameter>S_*</parameter>), selects the <parameter>.SDATA.meta.sequenceId</parameter> macro, and defines a new value-pair called <parameter>MSGHDR</parameter> that contains the program name and PID of the application that sent the log message.</para>
            <synopsis>value-pairs(
    scope(nv_pairs core syslog all_macros selected_macros everything)
    exclude("R_*")
    exclude("S_*")
    key(".SDATA.meta.sequenceId")
    pair("MSGHDR" "$PROGRAM[$PID]: ")
)</synopsis>
                    <para>The following example selects the same information as the previous example, but converts it into JSON format.</para>
                    <synopsis>$(format-json --scope nv_pairs,core,syslog,all_macros,selected_macros,everything \
  --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
  --pair MSGHDR="$PROGRAM[$PID]: ")</synopsis>
        </example>
        <note>
            <para>Every macro is included in the selection only once, but redundant information may appear if multiple macros include the same information (for example, including several date-related macros in the selection).</para>
        </note>
        <para>The <parameter>value-pairs()</parameter> option has the following parameters. The parameters are evaluated in the following order:</para>
        <orderedlist>
            <listitem>
                <para><parameter>scope()</parameter></para>
            </listitem>
            <listitem>
                <para><parameter>exclude()</parameter></para>
            </listitem>
            <listitem>
                <para><parameter>key()</parameter></para>
            </listitem>
            <listitem>
                <para><parameter>pair()</parameter></para>
            </listitem>
        </orderedlist>
        <informaltable frame="topbot" colsep="0" rowsep="0">
            <tgroup cols="3">
                <colspec colnum="1" colname="c1"/>
                <colspec colnum="2" colname="c2" colwidth="40pt"/>
                <colspec colnum="3" colname="c3"/>
                <tbody>
                    <row>
                        <entry>
                            <indexterm type="parameter">
                                <primary>exclude()</primary>
                            </indexterm>
                            <guimenu>exclude()</guimenu>
                        </entry>
                        <entry/>
                        <entry/>
                    </row>
                    <row>
                        <entry/>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>Space-separated list of macros to remove from the selection created using the <parameter>scope()</parameter> option.</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry namest="c2" nameend="c3"><para><guimenu>Description:</guimenu> This option removes the specified macros from the selection. Use it to remove unneeded macros selected using the <parameter>scope()</parameter> parameter.</para>
                        <para>For example, the following example removes the SDATA macros from the selection.</para>
                        <synopsis>value-pairs(
        scope(rfc5424 selected_macros)
        exclude(".SDATA*")
    )</synopsis>
                        <para>The name of the macro to remove can include glob expressions and wildcards <parameter>(*, ?, [ab], {foo,bar})</parameter>, as described in <xref linkend="reference_regexp_glob"/>. Regular expressions are not supported.</para>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <informaltable frame="topbot" colsep="0" rowsep="0">
            <tgroup cols="3">
                <colspec colnum="1" colname="c1"/>
                <colspec colnum="2" colname="c2" colwidth="40pt"/>
                <colspec colnum="3" colname="c3"/>
                <tbody>
                    <row>
                        <entry>
                            <guimenu>key()</guimenu>
                            <indexterm type="parameter">
                                <primary>key()</primary>
                            </indexterm>
                        </entry>
                        <entry/>
                        <entry/>
                    </row>
                    <row>
                        <entry/>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>A glob expression specifying the macros to be included in selection</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry namest="c2" nameend="c3"><para><guimenu>Description:</guimenu> This option selects the specified macros. The The selected macros will be included as <parameter>MACRONAME = MACROVALUE</parameter>, that is using <parameter>key("HOST")</parameter> will result in <parameter>HOST = $HOST</parameter>. Multiple macros can be selected using glob expressions. For details on globs, see <xref linkend="reference_regexp_glob"/>. For example:</para>
                        <synopsis>value-pairs(
        scope(rfc3164)
        key("HOST"))</synopsis>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <informaltable frame="topbot" colsep="0" rowsep="0">
            <tgroup cols="3">
                <colspec colnum="1" colname="c1"/>
                <colspec colnum="2" colname="c2" colwidth="40pt"/>
                <colspec colnum="3" colname="c3"/>
                <tbody>
                    <row>
                        <entry><guimenu>pair()</guimenu>
                            <indexterm type="parameter">
                                <primary>pair()</primary>
                            </indexterm>
                        </entry>
                        <entry/>
                        <entry/>
                    </row>
                    <row>
                        <entry/>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>name value pairs in <parameter>"&lt;NAME&gt;" "&lt;VALUE&gt;"</parameter></entry>
                    </row>
                    <row>
                        <entry/>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry namest="c2" nameend="c3"><para><guimenu>Description:</guimenu> This option defines a new name-value pair to be included in the message. The value part can include macros, templates, and template functions as well. For example:</para>
                        <synopsis>value-pairs(
        scope(rfc3164)
        pair("TIME" "$HOUR:$MIN")
        pair("MSGHDR" "$PROGRAM[$PID]: "))</synopsis>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <informaltable frame="topbot" colsep="0" rowsep="0">
            <tgroup cols="3">
                <colspec colnum="1" colname="c1"/>
                <colspec colnum="2" colname="c2" colwidth="40pt"/>
                <colspec colnum="3" colname="c3"/>
                <tbody>
                    <row>
                        <entry><guimenu>rekey()</guimenu>
                            <indexterm type="parameter">
                                <primary>rekey()</primary>
                            </indexterm>
                        </entry>
                        <entry/>
                        <entry/>
                    </row>
                    <row>
                        <entry/>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>&lt;pattern-to-select-names&gt;, &lt;list of transformations&gt;</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry namest="c2" nameend="c3"><para><guimenu>Description:</guimenu> This option allows you to manipulate and modify the name of the value-pairs. You can define transformations, which are are applied to the selected name-value pairs. The first parameter of the <parameter>rekey()</parameter> option is a glob pattern that selects the name-value pairs to modify. If you omit the pattern, the transformations are applied to every key of the scope. For details on globs, see <xref linkend="reference_regexp_glob"/>.</para>
                            <itemizedlist>
                                <listitem>
                                    <para>If <parameter>rekey()</parameter> is used within a <parameter>key()</parameter> option, the name-value pairs specified in the glob of the <parameter>key()</parameter> option are transformed.</para>
                                </listitem>
                                <listitem>
                                    <para>If <parameter>rekey()</parameter> is used outside the <parameter>key()</parameter> option, every name-value pair of the <parameter>scope()</parameter> is transformed.</para>
                                </listitem>
                            </itemizedlist>
                            <para>The following transformations are available:</para>
                            <variablelist>
                                <varlistentry>
                                    <term>
                                        <command>add-prefix("&lt;my-prefix&gt;")</command>
                                        <indexterm type="parameter">
                                            <primary>add-prefix()</primary>
                                        </indexterm>
                                    </term>
                                    <listitem>
                                        <para>Adds the specified prefix to every name. For example, <parameter>rekey( add-prefix("my-prefix."))</parameter></para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>
                                        <command>replace("&lt;prefix-to-replace&gt;", "&lt;new-prefix&gt;")</command>
                                        <indexterm type="parameter">
                                            <primary>replace()</primary>
                                        </indexterm>
                                    </term>
                                    <listitem>
                                        <para>Replaces a substring at the beginning of the key with another string. Only prefixes can be replaced. For example, <parameter>replace(".class", ",patterndb")</parameter> changes the beginning tag <parameter>.class</parameter> to <parameter>.patterndb</parameter></para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>
                                        <command>shift("&lt;number&gt;")</command>
                                        <indexterm type="parameter">
                                            <primary>shift()</primary>
                                        </indexterm>
                                    </term>
                                    <listitem>
                                        <para>Cuts the specified number of characters from the beginning of the name.</para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                            <example xml:id="example-value-pairs-rekey">
                                <title>Using the rekey() option</title>
                                <para>The following sample selects every value-pair that begins with <parameter>.cee.</parameter>, deletes this prefix by cutting 4 characters from the names, and adds a new prefix (<parameter>events.</parameter>).</para>
                                <synopsis>value-pairs(
    key(".cee.*"
        rekey(
            shift(4)
            add-prefix("events.")
        )
    )
)</synopsis>
                                <para>The <parameter>rekey()</parameter> option can be used with the <parameter>format-json</parameter> template-function as well, using the following syntax:</para>
                                <synopsis>$(format-json --key .cee.* --rekey --shift 4 --add-prefix events.)</synopsis>
                            </example>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <informaltable frame="topbot" colsep="0" rowsep="0">
            <tgroup cols="3">
                <colspec colnum="1" colname="c1"/>
                <colspec colnum="2" colname="c2" colwidth="40pt"/>
                <colspec colnum="3" colname="c3"/>
                <tbody>
                    <row>
                        <entry><guimenu>scope()</guimenu>
                            <indexterm type="parameter">
                                <primary>scope()</primary>
                            </indexterm>
                        </entry>
                        <entry/>
                        <entry/>
                    </row>
                    <row>
                        <entry/>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>space-separated list of macro groups to include in selection</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry/>
                        <entry namest="c2" nameend="c3"><para><guimenu>Description:</guimenu> This option selects predefined groups of macros. The following groups are available:</para>
                        <itemizedlist>
                            <listitem>
                                <para><emphasis>soft-macros</emphasis>: Every soft macro associated with the message, except the ones that start with a dot (.) character. Macros starting with a dot character are generated within &abbrev; and are not originally part of the message, therefore are not included in this group. The <parameter>soft-macros</parameter> group also has the following alias: <parameter>nv-pairs</parameter>.</para>
                            </listitem>
                            <listitem>
                                <para><emphasis>dot-soft-macros</emphasis>: Every soft macro associated with the message which starts with a dot (.) character. For example, <parameter>.classifier.rule_id</parameter> and <parameter>.sdata.*</parameter>. Macros starting with a dot character are generated within &abbrev; and are not originally part of the message. The <parameter>dot-soft-macros</parameter> group also has the following alias: <parameter>dot-nv-pairs</parameter>.</para>
                            </listitem>
                            <listitem>
                                <para><emphasis>all-soft-macros</emphasis>: Include every soft macro (equivalent to using both <parameter>soft-macros</parameter> and <parameter>dot-soft-macros</parameter>). The <parameter>all-soft-macros</parameter> group also has the following alias: <parameter>all-nv-pairs</parameter>.</para>
                            </listitem>
                            <listitem>
                                <para><emphasis>rfc3164</emphasis>: The macros that correspond to the RFC3164 (legacy or BSD-syslog) message format: <parameter>$FACILITY</parameter>, <parameter>$PRIORITY</parameter>, <parameter>$HOST</parameter>, <parameter>$PROGRAM</parameter>, <parameter>$PID</parameter>, <parameter>$MESSAGE</parameter>, and <parameter>$R_DATE</parameter>. The <parameter>rfc3164</parameter> group also has the following aliases: <parameter>core</parameter>, <parameter>base</parameter>. Note that the value of <parameter>$R_DATE</parameter> will be listed under the <parameter>DATE</parameter> key.</para>
                            </listitem>
                            <listitem>
                                <para><emphasis>rfc5424</emphasis>: The macros that correspond to the RFC5424 (IETF-syslog) message format: <parameter>$FACILITY</parameter>, <parameter>$PRIORITY</parameter>, <parameter>$HOST</parameter>, <parameter>$PROGRAM</parameter>, <parameter>$PID</parameter>, <parameter>$MESSAGE</parameter>, <parameter>$MSGID</parameter>, and <parameter>$R_DATE</parameter>. The <parameter>rfc5424</parameter> group also has the following alias: <parameter>syslog-proto</parameter>. Note that the value of <parameter>$R_DATE</parameter> will be listed under the <parameter>DATE</parameter> key.</para>
                                <para>The <parameter>rfc5424</parameter> group does not contain any metadata about the message, only information that was present in the original message. To include the most commonly used metadata (for example, the <parameter>$SOURCEIP</parameter> macro), use the <parameter>selected-macros</parameter> group instead.</para>
                            </listitem>
                            <listitem>
                                <para><emphasis>all-hard-macros</emphasis>: Include every hard macro. This group is mainly useful for debugging, as it contains redundant information (for example, the date-related macros include the date-related information several times in various formats).</para>
                            </listitem>
                            <listitem>
                                <para><emphasis>selected-macros</emphasis>: Include the macros of the <parameter>rfc5424</parameter> group and the most commonly used metadata about the log message: the <parameter>$TAGS</parameter>, <parameter>$SOURCEIP</parameter>, and <parameter>$SEQNUM</parameter> macros.</para>
                            </listitem>
                            <listitem>
                                <para><emphasis>sdata</emphasis>: The metadata from the structured-data (SDATA) part of RFC5424-formatted messages, that is, every macro that starts with <parameter>.SDATA.</parameter></para>
                            </listitem>
                            <listitem>
                                <para><emphasis>everything</emphasis>: Include every hard and soft macros. This group is mainly useful for debugging, as it contains redundant information (for example, the date-related macros include the date-related information several times in various formats).</para>
                            </listitem>
                        </itemizedlist>
                        <para>For example:</para>
                        <synopsis>value-pairs(
        scope(rfc3164 selected_macros))</synopsis>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </simplesect>
</section>
