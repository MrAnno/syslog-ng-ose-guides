<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<chapter xml:id="chapter-destinations" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Sending and storing log messages &mdash; destinations and destination drivers</title>
    <indexterm significance="preferred">
        <primary>destinations</primary>
    </indexterm>
    <indexterm significance="preferred">
        <primary>destination drivers</primary>
    </indexterm>
    <para>A destination is where a log message is sent if the filtering rules match. Similarly to sources, destinations consist of one or more drivers, each defining where and how messages are sent.</para>
    <tip>
        <para>If no drivers are defined for a destination, all messages sent to the destination are discarded. This is equivalent to omitting the destination from the log statement.</para>
    </tip>
    <para>To define a destination, add a destination statement to the syslog-ng configuration file using the following syntax:<indexterm>
        <primary>destinations</primary>
        <secondary>defining</secondary>
    </indexterm><synopsis>destination &lt;identifier&gt; {
            destination-driver(params); destination-driver(params); ... };</synopsis></para>
    <example>
        <title>A simple destination statement</title>
        <para>The following destination statement sends messages to the TCP port <userinput>1999</userinput> of the <userinput>10.1.2.3</userinput> host.</para>
        <synopsis>destination d_demo_tcp { network("10.1.2.3" port(1999)); };</synopsis>
        <para>If name resolution is configured, you can use the hostname of the target server as well.</para>
        <synopsis>destination d_tcp { network("target_host" port(1999)); };</synopsis>
    </example>
    <warning>
        <itemizedlist>
            <listitem>
                <para>Do not define the same drivers with the same parameters more than once, because it will cause problems. For example, do not open the same file in multiple destinations.</para>
            </listitem>
            <listitem>
                <para>Do not use the same destination in different log paths, because it can cause problems with most destination types. Instead, use filters and log paths to avoid such situations.</para>
            </listitem>
            <listitem>
                <xi:include href="../../common/chunk/para-initializing-sources-destinations.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </listitem>
        </itemizedlist>
    </warning>
    <para>The following table lists the destination drivers available in &abbrev;.<phrase condition="ose"> If these destinations do not satisfy your needs, you can extend &abbrev; and write your own destination, for example, in C, Java, or Python. For details, see <xref linkend="reference-destination-custom"/>.</phrase></para>
    <xi:include href="../../common/chunk/table-destination-drivers.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-amqp.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-elasticsearch.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-elasticsearch2.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <section xml:id="configuring-destinations-file">
        <title>Storing messages in plain-text files</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>file()</parameter> driver</secondary>
        </indexterm>
        <para>The file driver is one of the most important destination drivers in syslog-ng. It allows to output messages to the specified text file, or to a set of files.</para>
        <para>The destination filename may include macros which get expanded when the message is written, thus a simple <parameter>file()</parameter> driver may create several files: for example, &abbrev; can store the messages of client hosts in a separate file for each host. For more information on available macros see <xref linkend="reference-macros"/>.</para>
        <para>If the expanded filename refers to a directory which does not exist, it will be created depending on the <parameter>create-dirs()</parameter> setting (both global and a per destination option).</para>
        <para>The <parameter>file()</parameter> has a single required parameter that specifies the filename that stores the log messages. For the list of available optional parameters, see <xref linkend="reference-destination-file"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>file(filename options());</synopsis>
        <example xml:id="example-destination-file">
            <title>Using the file() driver</title>
            <synopsis>destination d_file { file("/var/log/messages"); };</synopsis>
        </example>
        <example xml:id="example-destination-file-macro">
            <title>Using the file() driver with macros in the file name and a template for the message</title>
            <synopsis>destination d_file {
        file("/var/log/${YEAR}.${MONTH}.${DAY}/messages"
             template("${HOUR}:${MIN}:${SEC} ${TZ} ${HOST} [${LEVEL}] ${MESSAGE}\n")
             template-escape(no));
};</synopsis>
        </example>
        <xi:include href="../../common/wnt/note-logrotate.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <warning>
            <para>Since the state of each created file must be tracked by syslog-ng, it consumes some memory for each file. If no new messages are written to a file within 60 seconds (controlled by the <parameter>time-reap()</parameter> global option), it is closed, and its state is freed.</para>
            <para>Exploiting this, a DoS attack can be mounted against the system. If the number of possible destination files and its needed memory is more than the amount available on the syslog-ng server.</para>
            <para>The most suspicious macro is <parameter>${PROGRAM}</parameter>, where the number of possible variations is rather high. Do not use the <parameter>${PROGRAM}</parameter> macro in insecure environments.</para>
        </warning>
        <section xml:id="reference-destination-file">
            <title>file() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>file()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>file()</parameter> driver outputs messages to the specified text file, or to a set of files. The <parameter>file()</parameter> destination has the following options:</para>
            <xi:include href="../../common/wnt/warning-fd-ulimit.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
<!-- FIXME required parameters?? -->
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-create-dirs.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-dir-group.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-dir-owner.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-dir-perm.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-diskbuffer.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flags.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                <itemizedlist>
                    <listitem>
                        <indexterm type="parameter">
                            <primary>threaded</primary>
                        </indexterm>
                        <para><emphasis>threaded</emphasis>: The <parameter>threaded</parameter> flag enables multithreading for the destination. For details on multithreading, see <xref linkend="chapter-multithreading"/>.</para>
                        <note>
                            <para>The <parameter>file</parameter> destination uses multiple threads only if the destination filename contains macros.</para>
                        </note>
                    </listitem>
                </itemizedlist>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-fsync.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-group.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-local-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect condition="pe">
                <xi:include href="../../common/chunk/option-destination-mark-freq.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-mark-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <title>overwrite-if-older()</title>
                <indexterm type="parameter">
                    <primary>overwrite-if-older()</primary>
                </indexterm>
                <indexterm>
                    <primary>overwrite_if_older()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>number</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>0</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> If set to a value higher than 0, &abbrev; checks when the file was last modified before starting to write into the file. If the file is older than the specified amount of time (in seconds), then syslog-ng removes the existing file and opens a new file with the same name. In combination with for example the <parameter>${WEEKDAY}</parameter> macro, this can be used for simple log rotation, in case not all history has to be kept. (Note that in this weekly log rotation example if its Monday 00:01, then the file from last Monday is not seven days old, because it was probably last modified shortly before 23:59 last Monday, so it is actually not even six days old. So in this case, set the <parameter>overwrite-if-older()</parameter> parameter to a-bit-less-than-six-days, for example, to <userinput>518000</userinput> seconds.</para>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-owner.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-pad-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-perm.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-suppress.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template-escape.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-ts-format.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <xi:include href="destination-graphite.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-hdfs.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-http.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-http-nonjava.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-kafka.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-loggly.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-logmatic.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-mongodb.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-network.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section xml:id="configuring-destinations-pipe">
        <title>Sending messages to named pipes</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>pipe()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>pipe()</parameter> driver sends messages to a named pipe like <filename>/dev/xconsole</filename>.</para>
        <para>The pipe driver has a single required parameter, specifying the filename of the pipe to open. The filename can include macros. For the list of available optional parameters, see <xref linkend="reference-destination-pipe"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>pipe(filename);</synopsis>
        <warning>
            <para>Starting with &abbrev; 3.0.2, pipes are created automatically. In earlier versions, you had to create the pipe using the <command>mkfifo(1)</command> command.</para>
        </warning>
        <example xml:id="example-destination-pipe">
            <title>Using the pipe() driver</title>
            <synopsis>destination d_pipe { pipe("/dev/xconsole"); };</synopsis>
        </example>
        <section xml:id="reference-destination-pipe">
            <title>pipe() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>pipe()</parameter> driver</secondary>
            </indexterm>
            <para>This driver sends messages to a named pipe like <filename>/dev/xconsole</filename>.</para>
            <para>The <parameter>pipe()</parameter> destination has the following options:</para>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flags.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-group.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect condition="pe">
                <xi:include href="../../common/chunk/option-destination-mark-freq.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-mark-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-owner.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-pad-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <title>perm()</title>
                <indexterm type="parameter">
                    <primary>perm()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>number (octal notation)</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>0600</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> The permission mask of the pipe. For octal numbers prefix the number with '0', for example: use 0755 for rwxr-xr-x.</para>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-suppress.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template-escape.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-throttle.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-ts-format.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <section xml:id="configuring-destinations-program">
        <title>Sending messages to external applications</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>program()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>program()</parameter> driver starts an external application or script and sends the log messages to its standard input (<parameter>stdin</parameter>). Usually, every message is a single line (ending with a newline character), which your script can process. Make sure that your script runs in a loop and keeps reading the standard input &mdash; it should not exit. (If your script exits, &abbrev; tries to restart it.)</para>
        <para>The <parameter>program()</parameter> driver has a single required parameter, specifying a program name to start. The program is executed with the help of the current shell, so the command may include both file patterns and I/O redirections. For the list of available optional parameters, see <xref linkend="reference-destination-program"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>program(command_to_run);</synopsis>
        <note>
            <itemizedlist>
                <listitem>
                    <para>The &abbrev; application must be able to start and restart the external program, and have the necessary permissions to do so. For example, if your host is running AppArmor, you might have to modify your AppArmor configuration to enable &abbrev; to execute external applications.</para>
                </listitem>
                <listitem>
                    <para>The &abbrev; application executes program destinations through the standard system shell. If the system shell is not bash and you experience problems with the program destination, try changing the <filename>/bin/sh</filename> link to <filename>/bin/bash</filename>.</para>
                </listitem>
                <listitem>
                    <para>If the external program exits, the &abbrev; application automatically restarts it. However it is not recommended to launch programs for single messages, because if the message rate is high, launching several instances of an application might overload the system, resulting in Denial of Service.</para>
                </listitem>
                <listitem>
                    <para>When the &abbrev; application stops, it will automatically stop the external program. To avoid restarting the application when &abbrev; is only reloaded, enable the <parameter>keep-alive()</parameter> option in the program destination.</para>
                </listitem>
                <listitem>
                    <para>Certain external applications buffer the log messages, which might cause unexpected latency and other problems. For example, if you send the log messages to an external Perl script, Perl uses a line buffer for terminal output and block buffer otherwise. You might want to disable buffering in the external application.</para>
                </listitem>
            </itemizedlist>
        </note>
        <example xml:id="example-destination-program">
            <title>Using the program() destination driver</title>
            <para>The message format does not include the priority and facility values by default. To add these values, specify a template for the program destination, as shown in the following example. Make sure to end your template with a newline character (<userinput>\n</userinput>).</para>
            <synopsis>destination d_prog { program("/bin/script" template("&lt;${PRI}&gt;${DATE} ${HOST} ${MESSAGE}\n") ); };</synopsis>
            <para>The following shell script writes the incoming messages into the <filename>/tmp/testlog</filename> file.</para>
            <synopsis>#!/bin/bash
while read line ; do
echo $line >> /tmp/testlog
done
</synopsis>
        </example>
        <section xml:id="reference-destination-program">
            <title>program() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>program()</parameter> driver</secondary>
            </indexterm>
            <para>This driver starts an external application or script and sends the log messages to its standard input (<parameter>stdin</parameter>).</para>
            <para>The <parameter>program()</parameter> destination has the following options:</para>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-diskbuffer.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flags.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-inherit-environment.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <title>keep-alive()</title>
                <indexterm type="parameter">
                    <primary>keep-alive()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
            <?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>yes or no</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
            <?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>no</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> Specifies whether the external program should be closed when &abbrev; is reloaded.</para>
            </simplesect>
            <simplesect condition="pe">
                <xi:include href="../../common/chunk/option-destination-mark-freq.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-mark-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                <para>Note that in earlier versions of &abbrev;, the default for the mark-mode of the <parameter>program</parameter> destination was <userinput>none</userinput>. Now it defaults to the global setting, so the <parameter>program</parameter> destination will emit a MARK message every <userinput>mark-freq</userinput> interval. To avoid such messages, set the <parameter>mark-mode()</parameter> option of the destination to <userinput>none</userinput>.</para>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-suppress.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                <para>Make sure to end your template with a newline character (<userinput>\n</userinput>).</para>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template-escape.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-throttle.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-ts-format.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <section xml:id="configuring-destination-pseudofile">
        <title>pseudofile()</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>pseudofile()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>pseudofile()</parameter> destination driver is a very simple driver, aimed at delivering messages to special files such as files in the <filename>/proc</filename>, <filename>/dev</filename> or <filename>/sys</filename> directories. It opens and closes the file after each write operation, instead of keeping it open. It does not append further data. It does not support templates in the filename, and does not have a queue, processing is performed immediately as read by the source. Therefore, no loss is possible, but it takes CPU time from the source, so it is not adequate in high traffic situations.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>pseudofile(filename options());</synopsis>
        <section xml:id="reference-destination-pseudofile">
            <title>pseudofile() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>pseudofile()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>pseudofile()</parameter> destination has the following options:</para>
            <simplesect>
                <title>file()</title>
                <indexterm type="parameter">
                    <primary>file()</primary>
                </indexterm>
                <informaltable frame="topbot" colsep="0" rowsep="0">
                    <tgroup cols="2">
                        <colspec colnum="1" colwidth="40pt"/>
                        <tbody>
                            <row>
                                <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry>filename with path</entry>
                            </row>
                            <row>
                                <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                                </entry>
                                <entry/>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <para><emphasis role="bold">Description:</emphasis> The file to write messages to, including the path.</para>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <xi:include href="destination-redis.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-riemann.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-smtp.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-splunk.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-sql.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="destination-stomp.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section xml:id="configuring-destinations-syslog">
        <title>Sending messages to a remote logserver using the IETF-syslog protocol</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>syslog()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>syslog()</parameter> driver sends messages to a remote host (for example a syslog-ng server or relay) on the local intranet or internet using the new standard syslog protocol developed by IETF (for details about the new protocol, see <xref linkend="concepts-message-ietfsyslog"/>). The protocol supports sending messages using the UDP, TCP, or the encrypted TLS networking protocols.</para>
        <para>The required arguments of the driver are the address of the destination host (where messages should be sent). The transport method (networking protocol) is optional, syslog-ng uses the TCP protocol by default. For the list of available optional parameters, see <xref linkend="reference-destination-syslog-chapter"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>syslog(host transport [options]);</synopsis>
        <note>
            <para>Note that the <parameter>syslog</parameter> destination driver has required parameters, while the source driver defaults to the local bind address, and every parameter is optional.</para>
        </note>
        <para>The <parameter>udp</parameter> transport method automatically sends multicast packets if a multicast destination address is specified. The <parameter>tcp</parameter> and <parameter>tls</parameter> methods do not support multicasting.</para>
        <note>
            <para>The default ports for the different transport protocols are as follows: UDP &mdash; 514, TCP &mdash; 601, TLS &mdash; 6514.</para>
        </note>
        <example xml:id="example-destination-syslog">
            <title>Using the syslog() driver</title>
            <synopsis>destination d_tcp { syslog("10.1.2.3" transport("tcp") port(1999) localport(999)); };</synopsis>
            <para>If name resolution is configured, the hostname of the target server can be used as well.</para>
            <synopsis>destination d_tcp { syslog("target_host" transport("tcp") port(1999) localport(999)); };</synopsis>
            <para>Send the log messages using TLS encryption and use mutual authentication. For details on the encryption and authentication options, see <xref linkend="tlsoptions"/>.</para>
            <synopsis>destination d_syslog_tls {
    syslog("10.100.20.40"
        transport("tls")
        port(6514)
        tls(peer-verify(required-trusted)
            ca-dir('/opt/syslog-ng/etc/syslog-ng/keys/ca.d/')
            key-file('/opt/syslog-ng/etc/syslog-ng/keys/client_key.pem')
            cert-file('/opt/syslog-ng/etc/syslog-ng/keys/client_certificate.pem')
        )
    );
};</synopsis>
        </example>
        <xi:include href="../../common/wnt/note-formatting-messages.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <section xml:id="reference-destination-syslog-chapter">
            <title>syslog() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>syslog()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>syslog()</parameter> driver sends messages to a remote host (for example a syslog-ng server or relay) on the local intranet or internet using the RFC5424 syslog protocol developed by IETF (for details about the protocol, see <xref linkend="concepts-message-ietfsyslog"/>). The protocol supports sending messages using the <phrase condition="pe"><trademark>RLTP</trademark>, </phrase>UDP, TCP, or the encrypted TLS networking protocols.</para>
            <para xml:id="table-destination-syslog-options">These destinations have the following options:</para>
            <xi:include href="../../common/chunk/destination-syslog-options.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </section>
    </section>
    <xi:include href="destination-tcpudp.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section xml:id="configuring-destinations-unixstream">
        <title>Sending messages to UNIX domain sockets</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>unix-stream()</parameter> driver</secondary>
        </indexterm>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>unix-dgram()</parameter> driver</secondary>
        </indexterm>
        <para>The <parameter>unix-stream()</parameter> and <parameter>unix-dgram()</parameter> drivers send messages to a UNIX domain socket in either <parameter>SOCK_STREAM</parameter> or <parameter>SOCK_DGRAM</parameter> mode.</para>
        <para>Both drivers have a single required argument specifying the name of the socket to connect to. For the list of available optional parameters, see <xref linkend="reference-destination-unixstream"/>.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>unix-stream(filename [options]);
unix-dgram(filename [options]);</synopsis>
        <example xml:id="example-destination-unixstream">
            <title>Using the unix-stream() driver</title>
            <synopsis>destination d_unix_stream { unix-stream("/var/run/logs"); };</synopsis>
        </example>
        <section xml:id="reference-destination-unixstream">
            <title>unix-stream() and unix-dgram() destination options</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>unix-stream()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>unix-dgram()</parameter> driver</secondary>
            </indexterm>
            <para>These drivers send messages to a unix socket in either <parameter>SOCK_STREAM</parameter> or <parameter>SOCK_DGRAM</parameter> mode. The <parameter>unix-stream()</parameter> and <parameter>unix-dgram()</parameter> destinations have the following options:</para>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-diskbuffer.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flags.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-keep-alive.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-so-broadcast.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-source-so-keepalive.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect condition="pe">
                <xi:include href="../../common/chunk/option-destination-mark-freq.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-mark-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-so-rcvbuf.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-so-sndbuf.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-suppress.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-template-escape.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-throttle.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                <xi:include href="../../common/chunk/option-destination-ts-format.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
        </section>
    </section>
    <section xml:id="reference-destination-usertty">
        <title>Sending messages to a user terminal &mdash; usertty() destination</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary><parameter>usertty()</parameter> driver</secondary>
        </indexterm>
        <para>This driver writes messages to the terminal of a logged-in user.</para>
        <para>The <parameter>usertty()</parameter> driver has a single required argument, specifying a username who should receive a copy of matching messages. Use the asterisk <userinput>*</userinput> to specify every user currently logged in to the system.</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>usertty(username);</synopsis>
        <para>The <parameter>usertty()</parameter> does not have any further options nor does it support templates.</para>
        <example>
            <title>Using the usertty() driver</title>
            <synopsis>destination d_usertty { usertty("root"); };</synopsis>
        </example>
    </section>
    <section xml:id="reference-destination-custom" condition="ose">
        <title>Write your own custom destination in Java or Python</title>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary>custom</secondary>
        </indexterm>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary>C</secondary>
        </indexterm>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary>Java</secondary>
        </indexterm>
        <indexterm>
            <primary>destination drivers</primary>
            <secondary>Python</secondary>
        </indexterm>
        <para>The &abbrev; application is open source, so if you have the necessary programming skills, you can extend it if its features are not adequate for your particular environment or needs. You can write destinations and other extensions to &abbrev; in C (the main language of &abbrev;), or using its language bindings, for example, Java or Python. For details on extending &abbrev;, see the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://www.gitbook.com/book/syslog-ng/getting-started/details">&abbrev; Developer Guide</link>.</para>
    </section>
</chapter>
