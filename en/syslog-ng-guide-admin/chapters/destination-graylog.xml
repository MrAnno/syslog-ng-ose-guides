<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="configuring-destinations-graylog" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title><parameter>graylog2()</parameter>: Sending metrics to Graylog</title>
    <indexterm>
        <primary>destination drivers</primary>
        <secondary>graylog2()</secondary>
    </indexterm>
    <para>You can use the <parameter>graylog2()</parameter> destination and a GELF (Graylog Extended Log Format) template to send syslog messages to <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://docs.graylog.org/en/2.4//en/latest/index.html">Graylog</link>.  </para>
    <para>You can also use them to forward simple name-value pairs where the name starts with a dot or underscore. If names of your name-value pairs include dots other than the first character, you should use JSON formatting directly instead of the GELF template and send logs to a raw TCP port in Graylog, which can then extract fields from nested JSON.</para>
    <formalpara>
        <title>Declaration:</title>
        <para/>
    </formalpara>
    <synopsis>graylog2();</synopsis>
    <example xml:id="example-destination-graylog">
        <title>Using the graylog2() driver</title>
        <para>You can send syslog messages to Graylog using the <parameter>graylog2()</parameter> destination. The <parameter>graylog2()</parameter> destination uses the GELF template, the native data format of Graylog.</para>
        <orderedlist>
            <listitem>
                <para>On the Graylog side, you have to configure a GELF TCP input. For more information, see the relevant <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://docs.graylog.org/en/2.4//en/latest/index.html">Graylog</link> documentation.</para>
            </listitem>
            <listitem>
                <para>On the syslog-ng side, configure the name or IP address of the host running Graylog.</para>
                <synopsis>destination d_graylog {

  graylog2(

    host("172.16.146.142")

  );

};</synopsis>
                <para>If you parsed your messages using syslog-ng, the template also forwards any name-value pairs where the name starts with a dot or underscore.</para>
                <note>
                    <para>If there is a dot in a field name other than the first character, syslog-ng creates nested JSON while formatting the message. Nested JSON is not automatically parsed in GELF messages.</para>
                </note>
            </listitem>
        </orderedlist>
    </example>
    <example>
        <title>Sending nested JSON to Graylog</title>
        <para>While sending nested JSON inside GELF is possible, it is not convenient. If you use  parsing and normalization in syslog-ng and dot notation in field names, use pure JSON instead of GELF to forward your messages.</para>
        <orderedlist>
            <listitem>
                <para>On the Graylog side, create a new raw TCP input. </para>
                <para>Once it is ready, add a JSON extractor to it.</para>
            </listitem>
            <listitem>
                <para>On the syslog-ng side, use a network destination combined with a template utilizing format-json as shown in the example below:</para>
                <synopsis>destination d_jsontcp {

  network(

    "172.16.146.142"

    port("5555")

    transport(tcp)

    template("$(format-json --scope all-nv-pairs)\n")

  );

};</synopsis>
            </listitem>
        </orderedlist>
    </example>
</section>
