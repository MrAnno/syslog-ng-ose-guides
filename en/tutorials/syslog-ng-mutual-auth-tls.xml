<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE article
[
<!ENTITY % entities SYSTEM "../common/syslog-ng-entities.ent">
%entities;
]>
<article xml:id="syslog-ng-mutual-auth-tls" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <info>
        <title>Mutual authentication using TLS in &abbrev;</title>
        <orgname>&fullvendor;</orgname>
        <keywordset>
            <keyword>&abbrev;, &product;, TLS, mutual authentication, authentication</keyword>
        </keywordset>
        <subjectset>
            <subject>
                <subjectterm>&abbrev;, &product;, TLS, mutual authentication, authentication</subjectterm>
            </subject>
        </subjectset>
        <xi:include href="../xml-stylesheet/common/common.xml" xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="common_copyright_bb"/>
        <pubdate><?dbtimestamp?></pubdate>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../xml-stylesheet/common/common.xml" xpointer="common_logo_bb"/>
    </info>

    <section>
        <title>Creating self-signed certificates</title>
        <para>To use mutual authentication in &abbrev;, certificates are required. There are several commercial certificate authorities who can help you, but the process costs both money and time (waiting until the submitted certificate is signed). This guide demonstrates how to create your very own Certificate Authority (CA) for creating self-signed certificates. It does not cover all the details, for example changing expiratory dates, only the minimally required steps to be able to test mutual authentication in &abbrev;.</para>
        <para>There are handy tools, such as CA.pl, which can make certificate creation and signing easier, but they are not available on all platforms, even if it is part of the OpenSSL software suite. On the other hand, the OpenSSL command line tool is available on all Linux distributions and BSD variants, so this tool will be used in the guide.</para>
    </section>
    
    <procedure>
        <title>Creating a CA</title>
        <formalpara>
            <title>Purpose:</title>
            <para/>
        </formalpara>
        <para>To create a CA, complete the following steps:</para>
        <formalpara>
            <title>Steps:</title>
            <para/>
        </formalpara>
        <step>
            <para>Create an empty directory and navigate into that directory:</para>
            <para><command>mkdir CA</command></para>
            <para><command>cd CA</command></para>
        </step>
        <step>
            <para>Create a few directories and give starting values to some support files:</para>
            <para><command>mkdir certs crl newcerts private</command></para>
            <para><command>echo "01" > serial</command></para>
            <para><command>cp /dev/null index.txt</command></para>
        </step>
        <step>
            <para>Copy <filename>openssl.conf</filename> to the current directory. Depending on your distributions, the source directory might be different, so check the list of files in the OpenSSL package before copying:</para>
            <para><command>cp /etc/ssl/openssl.cnf openssl.cnf</command></para>
        </step>
        <step>
            <para>Edit <filename>openssl.conf</filename> in the current directory: </para>
            <para><command>vi openssl.cnf</command></para>
        </step>
        <step>
            <para>Search for the following part and replace <filename>./DemoCA</filename> with a single dot:</para>
            <synopsis>[ CA_default ] 

dir             = ./demoCA              # Where everything is kept 
certs           = $dir/certs            # Where the issued certs are kept </synopsis>
            <para>Change it to:</para>
            <synopsis>[ CA_default ] 

dir             = .                     # Where everything is kept 
certs           = $dir/certs            # Where the issued certs are kept </synopsis>
        </step>
        <step>
            <para>As a last step, generate the certificate for the CA:</para>
            <para><command>openssl req -new -x509 -keyout private/cakey.pem -out cacert.pem -days 365 -config openssl.cnf</command></para>
            <para>The following will be displayed. Answer the questions as in the example:</para>
            <synopsis>Generating a 1024 bit RSA private key 
.++++++ 
......................++++++ 
writing new private key to 'private/cakey.pem' 
Enter PEM pass phrase: 
Verifying - Enter PEM pass phrase: 
----- 
You are about to be asked to enter information that will be incorporated 
into your certificate request. 
What you are about to enter is what is called a Distinguished Name or a DN. 
There are quite a few fields but you can leave some blank 
For some fields there will be a default value, 
If you enter '.', the field will be left blank. 
----- 
Country Name (2 letter code) [AU]:HU 
State or Province Name (full name) [Some-State]:Budapest 
Locality Name (eg, city) []:Budapest 
Organization Name (eg, company) [Internet Widgits Pty Ltd]:BalaBit 
Organizational Unit Name (eg, section) []:. 
Common Name (e.g. server FQDN or YOUR name) []:Peter Czanik 
Email Address []:czanik@balabit.hu</synopsis>
        </step>
    </procedure>
    
    <procedure>
        <title>Creating a server certificate</title>
        <formalpara>
            <title>Purpose:</title>
            <para/>
        </formalpara>
        <para>To create a server certificate, complete the following steps:</para>
        <formalpara>
            <title>Steps:</title>
            <para/>
        </formalpara>
        <step><para>The next step is to create and sign a certificate for your &abbrev; server. The common name should contain the FQDN or IP address of your server, and the e-mail address should be left blank.</para>
        <para><command>openssl req -nodes -new -x509 -keyout serverkey.pem -out serverreq.pem -days 365 -config openssl.cnf</command></para></step>
        <step><para>The following will be displayed. Answer the questions as in the example:</para>
        <synopsis>Generating a 1024 bit RSA private key 
........................................++++++ 
.++++++ 
writing new private key to 'serverkey.pem' 
----- 
You are about to be asked to enter information that will be incorporated 
into your certificate request. 
What you are about to enter is what is called a Distinguished Name or a DN. 
There are quite a few fields but you can leave some blank 
For some fields there will be a default value, 
If you enter '.', the field will be left blank. 
----- 
Country Name (2 letter code) [AU]:HU 
State or Province Name (full name) [Some-State]:Budapest 
Locality Name (eg, city) []:Budapest 
Organization Name (eg, company) [Internet Widgits Pty Ltd]:BalaBit 
Organizational Unit Name (eg, section) []:. 
Common Name (e.g. server FQDN or YOUR name) []:172.16.177.147 
Email Address []: 
czanik@linux-modi:~/CA> openssl x509 -x509toreq -in serverreq.pem -signkey serverkey.pem -out tmp.pem 
Getting request Private Key 
Generating certificate request 
czanik@linux-modi:~/CA> openssl ca -config openssl.cnf -policy policy_anything -out servercert.pem -infiles tmp.pem 
Using configuration from openssl.cnf 
Enter pass phrase for ./private/cakey.pem: 
Check that the request matches the signature 
Signature ok 
Certificate Details: 
        Serial Number: 1 (0x1) 
        Validity 
            Not Before: Jun 25 10:27:39 2014 GMT 
            Not After : Jun 25 10:27:39 2015 GMT 
        Subject: 
            countryName               = HU 
            stateOrProvinceName       = Budapest 
            localityName              = Budapest 
            organizationName          = BalaBit 
            commonName                = 172.16.177.147 
        X509v3 extensions: 
            X509v3 Basic Constraints: 
                CA:FALSE 
            Netscape Comment: 
                OpenSSL Generated Certificate 
            X509v3 Subject Key Identifier: 
                55:4E:B1:47:33:CF:0C:83:5F:29:64:9B:E9:99:77:DF:0E:72:52:76 
            X509v3 Authority Key Identifier: 
                keyid:D1:FF:ED:B4:0B:66:E6:45:EE:70:4F:DC:6C:C5:34:48:42:38:E9:38 

Certificate is to be certified until Jun 25 10:27:39 2015 GMT (365 days) 
Sign the certificate? [y/n]:y 

1 out of 1 certificate requests certified, commit? [y/n]y 
Write out database with 1 new entries 
Data Base Updated </synopsis></step>
        <step><para>Enter the following:</para>
        <para><command>rm tmp.pem</command></para></step>
    </procedure>
    
    <procedure>
        <title>Creating a client certificate</title>
        <formalpara>
            <title>Purpose:</title>
            <para/>
        </formalpara>
        <para>To create a client certificate, complete the following steps:</para>
        <formalpara>
            <title>Steps:</title>
            <para/>
        </formalpara>
        <step><para>The steps for the client(s) are very similar, only the file names and the embedded common name (host identifier: FQDN or IP address) are different. If you have multiple clients, make sure that each has the right host identifier.</para>
        <para><command>openssl req -nodes -new -x509 -keyout clientkey.pem -out clientreq.pem -days 365 -config openssl.cnf</command></para></step>
        <step><para>The following will be displayed. Answer the questions as in the example:</para>
        <synopsis>Generating a 1024 bit RSA private key 
.................................................................................++++++ 
...............................++++++ 
writing new private key to 'clientkey.pem' 
----- 
You are about to be asked to enter information that will be incorporated 
into your certificate request. 
What you are about to enter is what is called a Distinguished Name or a DN. 
There are quite a few fields but you can leave some blank 
For some fields there will be a default value, 
If you enter '.', the field will be left blank. 
----- 
Country Name (2 letter code) [AU]:HU 
State or Province Name (full name) [Some-State]:Budapest 
Locality Name (eg, city) []:Budapest 
Organization Name (eg, company) [Internet Widgits Pty Ltd]:BalaBit 
Organizational Unit Name (eg, section) []:. 
Common Name (e.g. server FQDN or YOUR name) []:172.16.177.129 
Email Address []: 

czanik@linux-modi:~/CA> openssl x509 -x509toreq -in clientreq.pem -signkey clientkey.pem -out tmp.pem 
Getting request Private Key 
Generating certificate request 
czanik@linux-modi:~/CA> openssl ca -config openssl.cnf -policy policy_anything -out clientcert.pem -infiles tmp.pem 
Using configuration from openssl.cnf 
Enter pass phrase for ./private/cakey.pem: 
Check that the request matches the signature 
Signature ok 
Certificate Details: 
        Serial Number: 2 (0x2) 
        Validity 
            Not Before: Jun 25 10:28:49 2014 GMT 
            Not After : Jun 25 10:28:49 2015 GMT 
        Subject: 
            countryName               = HU 
            stateOrProvinceName       = Budapest 
            localityName              = Budapest 
            organizationName          = BalaBit 
            commonName                = 172.16.177.129 
        X509v3 extensions: 
            X509v3 Basic Constraints: 
                CA:FALSE 
            Netscape Comment: 
                OpenSSL Generated Certificate 
            X509v3 Subject Key Identifier: 
                91:D9:99:95:F2:0D:22:BF:72:95:56:9A:C0:DF:A3:07:5C:E2:3F:63 
            X509v3 Authority Key Identifier: 
                keyid:D1:FF:ED:B4:0B:66:E6:45:EE:70:4F:DC:6C:C5:34:48:42:38:E9:38 

Certificate is to be certified until Jun 25 10:28:49 2015 GMT (365 days) 
Sign the certificate? [y/n]:y 

1 out of 1 certificate requests certified, commit? [y/n]y 
Write out database with 1 new entries 
Data Base Updated</synopsis></step>
        <step><para>Enter the following:</para>
        <para><command>rm tmp.pem</command></para></step>
    </procedure>
    
    <section>
        <title>Configuring syslog-ng</title>
        <para>Once you are ready with generating CA, server and client certificates, copy them to the respective machines and configure &abbrev; to use them. In theory, the CA and other certificates could be placed anywhere in the file system. In practice, server applications, such as &abbrev; are often protected by AppArmor, SELinux or other mechanisms, therefore it is recommended to create sub-directories where the <filename>syslog-ng.conf</filename> resides. This way &abbrev; can read them without modifying the related access rules.</para>
        
        <procedure>
            <title>Server</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>In the following example <filename>syslog-ng.conf</filename> is under <filename>/usr/local/etc/syslog-ng</filename>, but it could be <filename>/opt/syslog-ng/etc/</filename>, <filename>/etc/syslog-ng/</filename> or any other directory in your system, so adopt the configuration example accordingly.</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>As a first step, create two new directories under the &abbrev; configuration directory:</para>
                <para><command>mkdir cert.d ca.d</command></para>
            </step>
            <step>
                <para>Copy <filename>serverkey.pem</filename> and <filename>servercert.pem</filename> to <filename>cert.d</filename>. Copy <filename>cacert.pem</filename> to <filename>ca.d</filename> and issue the following command on the certificate:</para>
                <para><command>openssl x509 -noout -hash -in cacert.pem </command></para>
                <para>The result is a hash (for example 6d2962a8), a series of alphanumeric characters based on the Distinguished Name of the certificate. </para>
            </step>
            <step>
                <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <filename>.0</filename> suffix. </para>
                <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
            </step>
            <step>
                <para>Adopt the following configuration example to your <filename>syslog-ng.conf</filename> by changing the IP and port parameters and directories to your local environment. In the log statement replace “<filename>d_local</filename>” with an actual log destination name in your configuration (for example the one that refers to <filename>/var/log/messages</filename>).</para>
                <synopsis>source demo_tls_source { 
tcp(ip(0.0.0.0) port(6514) 
tls( key_file("/usr/local/etc/syslog-ng/cert.d/serverkey.pem") 
cert_file("/usr/local/etc/syslog-ng/cert.d/servercert.pem") 
ca_dir("/usr/local/etc/syslog-ng/ca.d")) 
); }; 

log { source(demo_tls_source); destination(d_local); };</synopsis>
            </step>
            <step>
                <para>Finally, restart &abbrev; for the configuration changes to take effect.</para>
            </step>
        </procedure>
        
        <procedure>
            <title>Client</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>Configuring the client side is similar to the server, the difference is in the configuration part. In the following example <filename>syslog-ng.conf</filename> is under <filename>/etc/syslog-ng</filename>, but it could be <filename>/opt/syslog-ng/etc/</filename>, <filename>/usr/local/etc/syslog-ng/</filename> or any other directory on your system, so adopt the configuration example accordingly.</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>As a first step, create two new directories under the &abbrev; configuration directory:</para>
                <para><command>mkdir cert.d ca.d</command></para>
            </step>
            <step>
                <para>Copy <filename>serverkey.pem</filename> and <filename>servercert.pem</filename> to <filename>cert.d</filename>. Copy <filename>cacert.pem</filename> to <filename>ca.d</filename> and issue the following command on the certificate:</para>
                <para><command>openssl x509 -noout -hash -in cacert.pem</command></para>
                <para>The result is a hash (for example 6d2962a8), a series of alphanumeric characters based on the Distinguished Name of the certificate. </para>
            </step>
            <step>
                <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <filename>.0</filename> suffix. </para>
                <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
            </step>
            <step>
                <para>Adopt the following configuration example to your <filename>syslog-ng.conf</filename> by changing the IP and port parameters and directories to your local environment. In the log statement replace “<filename>src</filename>” with an actual log source name in your configuration.</para>
                <synopsis>destination demo_tls_destination { 
tcp("172.16.177.147" port(6514) 
tls( ca_dir("/etc/syslog-ng/ca.d") 
key_file("/etc/syslog-ng/cert.d/clientkey.pem") 
cert_file("/etc/syslog-ng/cert.d/clientcert.pem") )
); }; 

log { source(src); destination(demo_tls_destination); };</synopsis>
            </step>
            <step>
                <para>Finally, restart &abbrev; for the configuration changes to take effect.</para>
            </step>
        </procedure>
    </section>
    
    <procedure>
        <title>Testing</title>
        <formalpara>
            <title>Purpose:</title>
            <para/>
        </formalpara>
        <para>After configuring &abbrev;, test if everything works as expected.</para>
        <formalpara>
            <title>Steps:</title>
            <para/>
        </formalpara>
        <step>
            <para>On the client side, enter the following command:</para>
            <para><command>logger "This is a test message" </command></para>
        </step>
        <step>
            <para>On the server side, <command>tail</command> the file, where logs from the network are arriving. You should see something similar in case of the above test message:</para>
            <para><command>tail -f /var/log/messages | grep test </command></para>
            <synopsis>Jun 26 19:12:06 172.16.177.129 root: This is a test message </synopsis>
            <para>If you cannot see it, check the log file, where the internal messages of syslog-ng are stored, both on the server and the client side. The most common causes of the problem are the following:</para>
            <itemizedlist>
                <listitem><para>There is no trace of connection at all (internal logs show connection attempts), there is a network / firewall problem, or incorrectly configured destination or listening IP.</para></listitem>
                <listitem><para>With new certificates an incorrectly configured clock can already cause problems. Check if all of your systems have the same time / time zone.</para></listitem>
                <listitem><para>Make sure, that the Common Name is set to the correct FQDN or IP address. If you use FQDN, make sure, that your DNS server works correctly.</para></listitem>
                <listitem><para>Do not include an e-mail address in the client and server certificates.</para></listitem>
            </itemizedlist>
        </step>
    </procedure>
</article>
