<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="" />
    </head>
    <body name="checkpoint-parser" oldrole="section">
        <h1 name="checkpoint-parser">Check Point Log Exporter parser</h1>
        <MadCap:keyword term="segmenting messages">
        </MadCap:keyword>
        <MadCap:keyword term="Check Point Log Exporter parser">
        </MadCap:keyword>
        <MadCap:keyword term="Check Point Log Exporter">
        </MadCap:keyword>
        <MadCap:keyword term="parsers:['Check Point Log Exporter']">
        </MadCap:keyword>
        <p oldrole="para">The Check Point Log Exporter parser can parse Check Point log messages. These messages do not completely comply with the syslog RFCs, making them difficult to parse. The <span class="Code" oldrole="parameter">checkpoint-parser()</span> of <MadCap:variable name="General.abbrev" /> solves this problem, and can separate these log messages to name-value pairs. For details on using value-pairs in <MadCap:variable name="General.abbrev" /> see <MadCap:xref href="concepts-value-pairs.htm"><span style="color: #04aada;" class="mcFormatColor">Structuring macros, metadata, and other value-pairs</span></MadCap:xref>. The parser can parse messages in the following format:</p><pre class="Code" oldrole="synopsis" xml:space="preserve">&lt;PRI&gt;&lt;VERSION&gt; &lt;YYYY-MM-DD&gt; &lt;HH-MM-SS&gt; &lt;PROGRAM&gt; &lt;PID&gt; &lt;MSGID&gt; - [key1:value1; key2:value2; ... ]</pre>
        <p oldrole="para">For example:</p><pre>&lt;134&gt;1 2018-03-21 17:25:25 MDS-72 CheckPoint 13752 - [action:"Update"; flags:"150784"; ifdir:"inbound"; logid:"160571424"; loguid:"{0x5ab27965,0x0,0x5b20a8c0,0x7d5707b6}";]</pre>
        <p oldrole="para">If you find a message that the <span class="Code" oldrole="parameter">checkpoint-parser()</span> cannot properly parse, <MadCap:variable name="General.contact-support"></MadCap:variable> so we can improve the parser.</p>
        <p oldrole="para">By default, the Check Point-specific fields are extracted into name-value pairs prefixed with <b oldrole="parameter" class="UI">.checkpoint</b>. For example, the <b class="UI">action</b> in the previous message becomes <b class="UI">${.checkpoint.action}</b>. You can change the prefix using the <span class="Code" oldrole="parameter">prefix</span> option of the parser.</p>
        <div>
            <h6 oldrole="formalpara">Declaration:</h6><pre class="Code" oldrole="synopsis">@version: <MadCap:variable name="Version.techversion" />
@include "scl.conf"
log {
    source { network(flags(no-parse)); };
    parser { checkpoint-parser(); };
    destination { ... };
};</pre>
        </div>
        <p>Note that the parser expects that the entire incorrectly formatted syslog message (starting with its <span class="Code">&lt;PRI&gt;</span> value) is in <span class="Code">$MSG</span>, which you can achieve by using <span class="Code" oldrole="userinput">flags(no-parse)</span> on the input driver.</p>
        <p oldrole="para" MadCap:conditions="General.ose">The <span class="Code" oldrole="parameter">checkpoint-parser()</span> is actually a reusable configuration snippet configured to parse Check Point messages. For details on using or writing such configuration snippets, see <MadCap:xref href="config-blocks.htm"><span style="color: #04aada;" class="mcFormatColor">Reusing configuration blocks</span></MadCap:xref>. You can find the source of this configuration snippet on <a href="https://github.com/balabit/syslog-ng/blob/master/scl/checkpoint/plugin.conf">GitHub</a>.</p>
        <div>
            <MadCap:snippetBlock src="../../shared/chunk/option-parser-prefix.htm">
            </MadCap:snippetBlock>
            <p oldrole="para">By default, <span class="Code" oldrole="parameter">checkpoint-parser()</span> uses the <b oldrole="userinput" class="UI">checkpoint.</b> prefix. To modify it, use the following format:</p><pre class="Code" oldrole="synopsis">parser {
    checkpoint-parser(prefix("myprefix."));
};</pre>
        </div>
    </body>
</html>