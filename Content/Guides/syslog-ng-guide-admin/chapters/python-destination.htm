<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="python-destination" oldrole="section">
        <h1 name="python-destination">python: writing custom Python destinations</h1>
        <MadCap:keyword term="python destination">
        </MadCap:keyword>
        <MadCap:keyword term="custom python destination">
        </MadCap:keyword>
        <MadCap:keyword term="destination:['python']">
        </MadCap:keyword>
        <p oldrole="para">The Python destination allows you to write your own destination in Python. You can import external Python modules to process the messages, and send them to other services or servers. Since many services have a Python library, the Python destination makes integrating <MadCap:variable name="General.abbrev"/> very easy and quick.</p>
        <MadCap:snippetBlock src="../../shared/chunk/python-blocks.htm">
        </MadCap:snippetBlock>

        <div>
            <h6 oldrole="formalpara">Declaration:</h6>
            <p oldrole="para">Python destinations consist of two parts. The first is a <MadCap:variable name="General.abbrev"></MadCap:variable> destination object that you use in your <MadCap:variable name="General.abbrev"></MadCap:variable> configuration, for example, in the log path. This destination references a Python class, which is the second part of the Python destination. The Python class processes the log messages it receives, and can do virtually anything that you can code in Python. You can either embed the Python class into your <MadCap:variable name="General.abbrev"/> configuration file, or <a href="python-code-external-file.htm">store it in an external Python file</a>.</p>
            <pre class="Code" oldrole="synopsis">destination &lt;name_of_the_python_destination&gt;{
    python(
        class("&lt;name_of_the_python_class_executed_by_the_destination&gt;")
    );
};

python {
class LogDestination(object):

    def open(self):
        """Open a connection to the target service

        Should return False if opening fails"""
        return True

    def close(self):
        """Close the connection to the target service"""
        pass

    def is_opened(self):
        """Check if the connection to the target is able to receive messages"""
        return True

    def init(self, options):
        """This method is called at initialization time

        Should return false if initialization fails"""
        return True

    def deinit(self):
        """This method is called at deinitialization time"""
        pass

    def send(self, msg):
        """Send a message to the target service

        It should return True to indicate success. False will suspend the
        destination for a period specified by the time-reopen() option."""
        return True
};</pre>
        </div>
        <div>
            <h2 name="python-destination-methods" oldrole="simplesect"><a name="python-destination-methods"></a>Methods of the python() destination</h2>
            <div>
                <h6 oldrole="formalpara">The <span class="Code" oldrole="parameter">init(self, options)</span> method (optional)</h6>
                <p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application initializes Python objects only when it is started or reloaded. That means it keeps the state of internal variables while <MadCap:variable name="General.abbrev"></MadCap:variable> is running. The <span class="Code" oldrole="parameter">init</span> method is executed as part of the initialization. You can perform any initialization steps that are necessary for your destination to work.</p>
                <p oldrole="para">When this method returns with False, <MadCap:variable name="General.abbrev"></MadCap:variable> does not start. It can be used to check options and return False when they prevent the successful start of the destination.</p>
                <p oldrole="para"><span class="Code" oldrole="userinput">options</span>: This optional argument contains the contents of the <span class="Code" oldrole="parameter">options()</span> parameter of the destination object as a Python dict.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">The <span class="Code" oldrole="parameter">is_opened(self)</span> method (optional)</h6>
                <p oldrole="para">Checks if the connection to the target is able to receive messages, and should return True if it is.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">The <span class="Code" oldrole="parameter">open(self)</span> method (optional)</h6>
                <p oldrole="para">The <span class="Code" oldrole="parameter">open(self)</span> method opens the resources required fo rhte destination, for example, it initiates a connection to the target service. It is called after <span class="Code" oldrole="parameter">init()</span> when <MadCap:variable name="General.abbrev"></MadCap:variable> is started or reloaded. If <span class="Code" oldrole="parameter">send()</span> returns with an error, syslog-ng calls <span class="Code" oldrole="parameter">close()</span> and <span class="Code" oldrole="parameter">open()</span> before trying to send again.</p>
                <p>If <span class="Code" oldrole="parameter">open()</span> fails, it should return the False value. In this case, <MadCap:variable name="General.abbrev"></MadCap:variable> retries it every <span class="Code" oldrole="parameter">time-reopen()</span> seconds. By default, this is 1 second for Python destinations, the value of <span class="Code" oldrole="parameter">time-reopen()</span> is not inherited from the global option.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">The <span class="Code" oldrole="parameter">send(self, message)</span> method</h6>
                <p oldrole="para">The <span class="Code" oldrole="parameter">send</span> method sends a message to the target service. It should return True to indicate success. Returning False will suspend the destination for a period set in the <span class="Code" oldrole="parameter">time-reopen()</span> option.</p>
                <!-- FIXME retries vs. time-reopen vs. return false vs. dropping messages? -->
                <p>This is the only mandatory method of the destination.</p>
                <p>If a message cannot be delivered after the number of times set in <span class="Code" oldrole="parameter">retries()</span> (by default: 3), <MadCap:variable name="General.abbrev"></MadCap:variable> drops the message and continues with the next message.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">The <span class="Code" oldrole="parameter">close(self)</span> method (optional)</h6>
                <p oldrole="para">Close the connection to the target service. Usually it is called right before <span class="Code" oldrole="parameter">deinit()</span> when stopping or reloading <MadCap:variable name="General.abbrev"></MadCap:variable>. It is also called when <span class="Code" oldrole="parameter">send()</span> fails.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">The <span class="Code" oldrole="parameter">deinit(self)</span> method (optional)</h6>
                <p oldrole="para">This method is executed when <MadCap:variable name="General.abbrev"/> is stopped or reloaded. This method does not return a value.</p>
<!--
                FIXME parseres deinit warning igaz destiantionre is?
-->
                <MadCap:snippetBlock src="../../shared/wnt/warning-python-parser-deinit.htm">
                </MadCap:snippetBlock>
            </div>
        </div>
        <!-- FIXME destination options,
        * ha external fileban van a kod, akkor a filenevet meg kell adni a class() parameterben
        * This configuration snippet uses value-pairs() to select which name-value pairs are passed on to the Python code, kulonben az msg objektumon keresztul erheti el az egeszet
destination d_python_to_file {
    python(
        class("pythonexample.TextDestination")
        value-pairs(key(MESSAGE))
    );
};
        -->
        <div class="Example">
            <h6 name="python-destination-example" oldrole="simplesect"><a name="python-destination-example"></a>Example: Write logs into a file</h6>
            <p oldrole="para">The purpose of this example is only to demonstrate the basics of the Python destination, if you really want to write log messages into text files, use the <a href="configuring-destinations-file.htm">file destination</a> instead.</p>
            <p>The following sample code writes the body of log messages into the <span class="Code" oldrole="filename">/tmp/example.txt</span> file. Only the <span class="Code" oldrole="parameter">send()</span> method is implemented, meaning that <MadCap:variable name="General.abbrev"/> opens and closes the file for every message.</p>
            <pre class="Code" oldrole="synopsis">destination d_python_to_file {
    python(
        class("TextDestination")
    );
};
log {
    source(src);
    destination(d_python_to_file);
};
python {
class TextDestination(object):
    def send(self, msg):
        self.outfile = open("/tmp/example.txt", "a")
        self.outfile.write("MESSAGE = %s\n" % msg["MESSAGE"])
        self.outfile.flush()
        self.outfile.close();
        return True
};</pre>
            <p>The following code is similar to the previous example, but it opens and closes the file using the <span class="Code" oldrole="parameter">open()</span> and <span class="Code" oldrole="parameter">close()</span> methods.</p>
            <pre class="Code" oldrole="synopsis">destination d_python_to_file {
    python(
        class("TextDestination")
    );
};
log {
    source(src);
    destination(d_python_to_file);
};
python {
class TextDestination(object):
    def open(self):
        try:
            self.outfile = open("/tmp/example.txt", "a")
            return True
        except:
            return False

    def send(self, msg):
        self.outfile.write("MESSAGE = %s\n" % msg["MESSAGE"])
        self.outfile.flush()
        return True

    def close(self):
        try:
            self.outfile.flush()
            self.outfile.close();
            return True
        except:
            return False
};</pre>
            <p>For a more detailed example about sending log messages to an MQTT (Message Queuing Telemetry Transport) server, see the <a href="https://www.syslog-ng.com/community/b/blog/posts/writing-python-destination-in-syslog-ng-how-to-send-log-messages-to-mqtt">Writing Python destination in syslog-ng: how to send log messages to MQTT blog post</a>.</p>
        </div>
    </body>
</html>
