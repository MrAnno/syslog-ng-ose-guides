<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="plugin-python-http-header" oldrole="chapter">
        <h1 name="plugin-python-http-header"><a name="plugin-python-http-header"></a>The Python HTTP header plugin</h1>
        <p>This section describes the <MadCap:variable name="General.product" /> (<MadCap:variable name="General.abbrev" />) application's Python HTTP header plugin.</p>
        <p>For more information about modules in <MadCap:variable name="General.ose" />, see <MadCap:xref href="modules.htm"><span style="color: #04aada;" class="mcFormatColor">Modules in [%=General.product%] ([%=General.abbrev%])</span></MadCap:xref>.</p>
        <h6>The Python HTTP header plugin</h6>
        <p>The Python HTTP header plugin is a signal-slot mechanism-based <MadCap:variable name="General.abbrev" /> module that enables users to create custom headers for the HTTP destination using the Python programming language.</p>
        <div class="Note">
            <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span>Currently, the HTTP module only defines the <span class="Code">signal_http_header_request</span> and the <span class="Code">signal_http_response_received</span> signals. The <span class="Code">python-http-header</span> plugin implements a Python binding for these signals.</p>
        </div>
        <div>
            <h6>Prerequisites</h6>
            <div class="Note">
                <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span>Before you use the <span class="Code">python-http-header</span> plugin, make sure that your <MadCap:variable name="General.abbrev" /> appliance was compiled with Python support. If you installed <MadCap:variable name="General.abbrev" /> from a package, make sure that the subpackage containing Python support is also installed.</p>
            </div>
        </div>
        <h6>Defining the Python interface</h6>
        <p>You can define the Python interface with the following:<pre>def get_headers(self, body, headers):</pre></p>
        <p>The definition should return a <span class="Code">string list</span>.</p>
        <p>By default, when the <span>signal_http_header_request</span> is emitted, the connected slot automatically executes the Python code. </p>
        <div class="Note">
            <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span>If the plugin fails, the HTTP module does not send the HTTP request without the header items by default. If you want the HTTP module to try sending the request without the header items, disable the <span class="Code">mark-errors-as-critical</span> function.</p>
        </div>
        <h6>Example configuration</h6>
        <div class="Example">
            <h6>Example configuration for using the Python HTTP header plugin</h6>
            <p>
            </p><pre class="Example">{{@version: 3.25
				
python {
from syslogng import Logger

logger = Logger()

class TestCounter():
def _<i>init</i>_(self, options):
self.header = options["header"]
self.counter = int(options["counter"])
logger.debug(f"TestCounter class instantiated; options=

{options}
")

def get_headers(self, body, headers):
logger.debug(f"get_headers() called, received body={body}, headers={headers}")

response = ["{}: {}".format(self.header, self.counter)]
self.counter += 1
return response

def _<i>del</i>_(self):
logger.debug("Deleting TestCounter class instance")
};

source s_network {
network(port(5555));
};

destination d_http {
http(
python_http_header(
class("TestCounter")
options("header", "X-Test-Python-Counter")
options("counter", 11)
mark-errors-as-critical(no)
)
url("http://127.0.0.1:8888")
);
};

log {
source(s_network);
destination(d_http);
flags(flow-control);
};}}|</pre>
        </div>
        <MadCap:keyword term="plugin-python-http-header">
        </MadCap:keyword>
    </body>
</html>