<?xml version="1.0" encoding="UTF-8"?>

 %entities;]&gt;
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body condition="ose" name="parser-map-value-pairs" oldrole="section">
<h1 condition="ose" name="parser-map-value-pairs" oldrole="section"><span class="Code" oldrole="parameter">map-value-pairs</span>: Rename value-pairs to normalize logs</h1>
<MadCap:keyword term="log normalization"></MadCap:keyword>
<MadCap:keyword term="normalize logs"></MadCap:keyword>
<MadCap:keyword term="rename value-pairs"></MadCap:keyword>
<MadCap:keyword term="map value-pairs"></MadCap:keyword>
<MadCap:keyword term="convert value-pairs"></MadCap:keyword>
<MadCap:keyword term="rename fields"></MadCap:keyword>
<MadCap:keyword term="map fields"></MadCap:keyword>
<MadCap:keyword term="parsers:['map-value-pairs']"></MadCap:keyword>
<MadCap:keyword term="value-pairs:['rename']"></MadCap:keyword>
<MadCap:keyword term="value-pairs:['bulk rename']"></MadCap:keyword>
<MadCap:keyword term="value-pairs:['map']"></MadCap:keyword>
<p oldrole="para">The <span class="Code" oldrole="parameter">map-value-pairs()</span> parser allows you to map existing name-value pairs to a different set of name-value pairs. You can rename them in bulk, making it easy to use for log normalization tasks (for example, when you parse information from different log messages, and want to convert them into a uniform naming scheme). You can use the <a href="concepts-value-pairs.htm">normal value-pairs expressions</a>, similarly to value-pairs based destinations.</p>
<p oldrole="para">Available in <entity>abbrev</entity> version <phrase condition="ose">3.10</phrase> and later.</p>

<p><b oldrole="formalpara">Declaration:</b></p>
<p oldrole="para"></p>

<pre class="Code" oldrole="synopsis">parser parser_name {
    map-value-pairs(
        &lt;list-of-value-pairs-options&gt;
    );
};</pre>
<example>
<title>Map name-value pairs</title>
<p oldrole="para">The following example creates a new name-value pair called <span class="Code" oldrole="userinput">username</span>, adds the hashed value of the <span class="Code" oldrole="userinput">.apache.username</span> to this new name-value pair, then adds the <span class="Code" oldrole="userinput">webserver</span> prefix to the name of every name-value pair of the message that starts with <span class="Code" oldrole="userinput">.apache</span></p>
<pre class="Code" oldrole="synopsis">parser p_remap_name_values {
    map-value-pairs(
        pair("username", "'($sha1 $.apache.username)")
        key('.apache.*' rekey(add-prefix("webserver")))
    );
};</pre>
</example>
</body></html>
