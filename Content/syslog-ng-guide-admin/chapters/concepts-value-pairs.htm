<?xml version="1.0" encoding="UTF-8"?>

<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="concepts-value-pairs" oldrole="section">
<h1 name="concepts-value-pairs" oldrole="section">Structuring macros, metadata, and other value-pairs</h1>
<p oldrole="para"><i oldrole="emphasis" role="bold">Available in <MadCap:variable name="General.abbrev"></MadCap:variable> <MadCap:conditionaltext MadCap:conditions="ose">3.3</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe">5.1</MadCap:conditionaltext> and later.</i></p>
<p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application allows you to select and construct name-value pairs from any information already available about the log message, or extracted from the message itself. You can directly use this structured information, for example, in the following places:</p>
<ul oldrole="itemizedlist">
<li condition="ose" oldrole="listitem">
<p oldrole="para"><a href="destination-amqp.htm"><span class="Code" oldrole="parameter">amqp()</span></a> destination</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><a href="reference-template-functions.htm"><span class="Code" oldrole="parameter">format-welf()</span></a> template function</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><a href="destination-mongodb.htm"><span class="Code" oldrole="parameter">mongodb()</span></a> destination</p>
</li>
<li condition="ose" oldrole="listitem">
<p oldrole="para"><a href="destination-stomp.htm"><span class="Code" oldrole="parameter">stomp()</span></a> destination</p>
</li>
<li oldrole="listitem">
<p oldrole="para">or in other destinations using the <a href="reference-template-functions.htm"><span class="Code" oldrole="parameter">format-json()</span></a> template function.</p>
</li>
</ul>
<p oldrole="para">When using <span class="Code" oldrole="parameter">value-pairs</span>, there are three ways to specify which information (that is, macros or other name-value pairs) to include in the selection.</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">Select groups of macros using the <span class="Code" oldrole="parameter">scope()</span> parameter, and optionally remove certain macros from the group using the <span class="Code" oldrole="parameter">exclude()</span> parameter.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">List specific macros to include using the <span class="Code" oldrole="parameter">key()</span> parameter.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Define new name-value pairs to include using the <span class="Code" oldrole="parameter">pair()</span> parameter.</p>
</li>
</ul>
<p oldrole="para">These parameters are detailed in <xref linkend="options-value-pairs"></xref>.</p>

<h2 name="specifying-data-types">Specifying data types in value-pairs</h2>
<indexterm>
<primary>data types</primary>
</indexterm>
<indexterm>
<primary>type-hinting</primary>
</indexterm>
<indexterm>
<primary>type-casting</primary>
</indexterm>
<indexterm>
<primary>typecasting</primary>
<see>type-casting</see>
</indexterm>
<p oldrole="para">By default, <entity>abbrev</entity> handles every data as strings. However, certain destinations and data formats (for example, SQL, MongoDB, JSON<phrase condition="ose">, AMQP</phrase>) support other types of data as well, for example, numbers or dates. The <entity>abbrev</entity> application allows you to specify the data type in templates (this is also called type-hinting). If the destination driver supports data types, it converts the incoming data to the specified data type. For example, this allows you to store integer numbers as numbers in MongoDB, instead of strings.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Yellow_DoNotEdit" oldrole="warning" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css');"><col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Yellow_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/caution.png"/></p></td><td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyA-Column2-Body1"><span class="Yellow">Caution: </span><p oldrole="para">Hazard of data loss! If <entity>abbrev</entity> cannot convert the data into the specified type, an error occurs, and <entity>abbrev</entity> drops the message by default. To change how <entity>abbrev</entity> handles data-conversion errors, see <xref linkend="global-option-typecasting-on-error"></xref>.</p></td></tr></tbody></table>
<p oldrole="para">To use type-hinting, enclose the macro or template containing the data with the type: <span class="Code" oldrole="userinput">&lt;datatype&gt;("&lt;macro&gt;")</span>, for example: <span class="Code" oldrole="userinput">int("$PID")</span>.</p>
<p oldrole="para">Currently the <span class="Code" oldrole="parameter">mongodb()</span> destination and the <span class="Code" oldrole="parameter">format-json</span> template function supports data types.</p>
<example>
<title>Using type-hinting</title>
<indexterm>
<primary>mongodb</primary>
<see>type-casting</see>
</indexterm>
<p oldrole="para">The following example stores the MESSAGE, PID, DATE, and PROGRAM fields of a log message in a MongoDB database. The DATE and PID parts are stored as numbers instead of strings.</p>
<pre class="Code" oldrole="synopsis">mongodb(
    value-pairs(pair("date", datetime("$UNIXTIME"))
            pair("pid", int64("$PID"))
            pair("program", "$PROGRAM"))
            pair("message", "$MESSAGE"))
             )
);</pre>
<p oldrole="para">The following example formats the same fields into JSON.</p>
<pre class="Code" oldrole="synopsis">$(format-json date=datetime($UNIXTIME) pid=int64($PID) program=$PROGRAM message=$MESSAGE)</pre>
</example>
<p oldrole="para">The <entity>abbrev</entity> application currently supports the following data-types.</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">boolean</span>: Converts the data to a boolean value. Anything that begins with a <span class="Code" oldrole="userinput">t</span> or <span class="Code" oldrole="userinput">1</span> is converted to true, anything that begins with an <span class="Code" oldrole="userinput">f</span> or <span class="Code" oldrole="userinput">0</span> is converted to false.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">datetime</span>: Use it only with UNIX timestamps, anything else will likely result in an error. This means that currently you can use only the <span class="Code" oldrole="parameter">$UNIXTIME</span> macro for this purpose.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">double</span>: A floating-point number.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">literal</span>: The data as a literal string, without adding any quotes or escape characters.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">int</span> or <span class="Code" oldrole="parameter">int32</span>: 32-bit integer.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">int64</span>: 64-bit integer.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">string</span>: The data as a string.</p>
</li>
</ul>

<simplesect xml:id="options-value-pairs">
<title>value-pairs()</title>
<indexterm type="parameter">
<primary>value-pairs()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>parameter list of the <span class="Code" oldrole="parameter">value-pairs()</span> option</entry>
</row>
<row>
<entry>Default:</entry>
<entry>
<pre class="Code" oldrole="synopsis">empty string</pre>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The <span class="Code" oldrole="parameter">value-pairs()</span> option allows you to select specific information about a message easily using predefined macro groups. The selected information is represented as name-value pairs and can be used formatted to JSON format, or directly used in a <span class="Code" oldrole="parameter">mongodb()</span> destination.</p>
<example>
<title>Using the <span class="Code" oldrole="parameter">value-pairs()</span> option</title>
<indexterm type="parameter">
<primary>value-pairs()</primary>
</indexterm>
<p oldrole="para">The following example selects every available information about the log message, except for the date-related macros (<span class="Code" oldrole="userinput">R_*</span> and <span class="Code" oldrole="userinput">S_*</span>), selects the <span class="Code" oldrole="userinput">.SDATA.meta.sequenceId</span> macro, and defines a new value-pair called <span class="Code" oldrole="userinput">MSGHDR</span> that contains the program name and PID of the application that sent the log message.</p>
<pre class="Code" oldrole="synopsis">value-pairs(
    scope(nv_pairs core syslog all_macros selected_macros everything)
    exclude("R_*")
    exclude("S_*")
    key(".SDATA.meta.sequenceId")
    pair("MSGHDR" "$PROGRAM[$PID]: ")
)</pre>
<p oldrole="para">The following example selects the same information as the previous example, but converts it into JSON format.</p>
<pre class="Code" oldrole="synopsis">$(format-json --scope nv_pairs,core,syslog,all_macros,selected_macros,everything \
  --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
  --pair MSGHDR="$PROGRAM[$PID]: ")</pre>
</example>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">Every macro is included in the selection only once, but redundant information may appear if multiple macros include the same information (for example, including several date-related macros in the selection).</p></td></tr></tbody></table>
<p oldrole="para">The <span class="Code" oldrole="parameter">value-pairs()</span> option has the following parameters. The parameters are evaluated in the following order:</p>
<ol oldrole="orderedlist">
<li oldrole="listitem">
<p oldrole="para"><a href="concepts-value-pairs.htm"><span class="Code" oldrole="parameter">scope()</span></a></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><a href="concepts-value-pairs.htm"><span class="Code" oldrole="parameter">exclude()</span></a></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><a href="concepts-value-pairs.htm"><span class="Code" oldrole="parameter">key()</span></a></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><a href="concepts-value-pairs.htm"><span class="Code" oldrole="parameter">pair()</span></a></p>
</li>
</ol>
<informaltable colsep="0" frame="topbot" rowsep="0" xml:id="value-pairs-exclude">
<tgroup cols="2">
<colspec colname="c1" colnum="1" colwidth="40pt"></colspec>
<colspec colname="c2" colnum="2"></colspec>
<tbody>
<row>
<entry>
<indexterm type="parameter">
<primary>exclude()</primary>
</indexterm><i oldrole="emphasis" role="bold">exclude()</i>
</entry>
<entry></entry>
</row>
<row>
<entry>Type:</entry>
<entry>Space-separated list of macros to remove from the selection created using the <span class="Code" oldrole="parameter">scope()</span> option.</entry>
</row>
<row>
<entry>Default:</entry>
<entry>empty string</entry>
</row>
<row>
<entry nameend="c2" namest="c1">
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> This option removes the specified macros from the selection. Use it to remove unneeded macros selected using the <span class="Code" oldrole="parameter">scope()</span> parameter.</p>
<p oldrole="para">For example, the following example removes the SDATA macros from the selection.</p>
<pre class="Code" oldrole="synopsis">value-pairs(
        scope(rfc5424 selected_macros)
        exclude(".SDATA*")
    )</pre>
<p oldrole="para">The name of the macro to remove can include wildcards <span class="Code" oldrole="userinput">(*, ?)</span>. Regular expressions are not supported.</p>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<informaltable colsep="0" frame="topbot" rowsep="0" xml:id="value-pairs-key">
<tgroup cols="2">
<colspec colname="c1" colnum="1" colwidth="40pt"></colspec>
<colspec colname="c2" colnum="2"></colspec>
<tbody>
<row>
<entry><i oldrole="emphasis" role="bold">key()</i>
<indexterm type="parameter">
<primary>key()</primary>
</indexterm>
</entry>
<entry></entry>
</row>
<row>
<entry>Type:</entry>
<entry>Space-separated list of macros to be included in selection</entry>
</row>
<row>
<entry>Default:</entry>
<entry>empty string</entry>
</row>
<row>
<entry nameend="c2" namest="c1">
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> This option selects the specified macros. The selected macros will be included as <span class="Code" oldrole="userinput">MACRONAME = MACROVALUE</span>, that is using <span class="Code" oldrole="userinput">key("HOST")</span> will result in <span class="Code" oldrole="userinput">HOST = $HOST</span>. You can use wildcards <span class="Code" oldrole="userinput">(*, ?)</span> to select multiple macros. For example:</p>
<pre class="Code" oldrole="synopsis">value-pairs(
        scope(rfc3164)
        key("HOST"))</pre>
<pre class="Code" oldrole="synopsis">value-pairs(
        scope(rfc3164)
        key("HOST", "PROGRAM"))</pre>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<informaltable colsep="0" frame="topbot" rowsep="0" xml:id="value-pairs-pair">
<tgroup cols="2">
<colspec colname="c1" colnum="1" colwidth="40pt"></colspec>
<colspec colname="c2" colnum="2"></colspec>
<tbody>
<row>
<entry><i oldrole="emphasis" role="bold">pair()</i>
<indexterm type="parameter">
<primary>pair()</primary>
</indexterm>
</entry>
<entry></entry>
</row>
<row>
<entry>Type:</entry>
<entry>name value pairs in <span class="Code" oldrole="userinput">"&lt;NAME&gt;" "&lt;VALUE&gt;"</span> format</entry>
</row>
<row>
<entry>Default:</entry>
<entry>empty string</entry>
</row>
<row>
<entry nameend="c2" namest="c1">
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> This option defines a new name-value pair to be included in the message. The value part can include macros, templates, and template functions as well. For example:</p>
<pre class="Code" oldrole="synopsis">value-pairs(
        scope(rfc3164)
        pair("TIME" "$HOUR:$MIN")
        pair("MSGHDR" "$PROGRAM[$PID]: "))</pre>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<informaltable colsep="0" frame="topbot" rowsep="0" xml:id="value-pairs-rekey">
<tgroup cols="2">
<colspec colname="c1" colnum="1" colwidth="40pt"></colspec>
<colspec colname="c2" colnum="2"></colspec>
<tbody>
<row>
<entry><i oldrole="emphasis" role="bold">rekey()</i>
<indexterm type="parameter">
<primary>rekey()</primary>
</indexterm>
</entry>
<entry></entry>
</row>
<row>
<entry>Type:</entry>
<entry>&lt;pattern-to-select-names&gt;, &lt;list of transformations&gt;</entry>
</row>
<row>
<entry>Default:</entry>
<entry>empty string</entry>
</row>
<row>
<entry nameend="c2" namest="c1">
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> This option allows you to manipulate and modify the name of the value-pairs. You can define transformations, which are are applied to the selected name-value pairs. The first parameter of the <span class="Code" oldrole="parameter">rekey()</span> option is a glob pattern that selects the name-value pairs to modify. If you omit the pattern, the transformations are applied to every key of the scope. For details on globs, see <xref linkend="reference-regexp-glob"></xref>.</p>
<p oldrole="para">If you want to modify the names of several message fields, see also <xref linkend="parser-map-value-pairs"></xref>.</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">If <span class="Code" oldrole="parameter">rekey()</span> is used within a <span class="Code" oldrole="parameter">key()</span> option, the name-value pairs specified in the glob of the <span class="Code" oldrole="parameter">key()</span> option are transformed.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">If <span class="Code" oldrole="parameter">rekey()</span> is used outside the <span class="Code" oldrole="parameter">key()</span> option, every name-value pair of the <span class="Code" oldrole="parameter">scope()</span> is transformed.</p>
</li>
</ul>
<p oldrole="para">The following transformations are available:</p>
<ul oldrole="variablelist">
<li oldrole="varlistentry">
<b oldrole="command">add-prefix("&lt;my-prefix&gt;")</b>
<indexterm type="parameter">
<primary>add-prefix()</primary>
</indexterm>

<li oldrole="listitem">
<p oldrole="para">Adds the specified prefix to every name. For example, <span class="Code" oldrole="userinput">rekey( add-prefix("my-prefix."))</span></p>
</li>
</li>
<li oldrole="varlistentry">
<b oldrole="command">replace-prefix("&lt;prefix-to-replace&gt;", "&lt;new-prefix&gt;")</b>
<indexterm type="parameter">
<primary>replace-prefix()</primary>
</indexterm>

<li oldrole="listitem">
<p oldrole="para">Replaces a substring at the beginning of the key with another string. Only prefixes can be replaced. For example, <span class="Code" oldrole="userinput">replace-prefix(".class", ".patterndb")</span> changes the beginning tag <span class="Code" oldrole="userinput">.class</span> to <span class="Code" oldrole="userinput">.patterndb</span></p>
<p condition="ose" oldrole="para">This option was called <span class="Code" oldrole="parameter">replace()</span> in <entity>abbrev</entity> version 3.4.</p>
</li>
</li>
<li oldrole="varlistentry">
<b oldrole="command">shift("&lt;number&gt;")</b>
<indexterm type="parameter">
<primary>shift()</primary>
</indexterm>

<li oldrole="listitem">
<p oldrole="para">Cuts the specified number of characters from the beginning of the name.</p>
</li>
</li>
</ul>
<example xml:id="example-value-pairs-rekey">
<title>Using the rekey() option</title>
<p oldrole="para">The following sample selects every value-pair that begins with <span class="Code" oldrole="userinput">.cee.</span>, deletes this prefix by cutting 4 characters from the names, and adds a new prefix (<span class="Code" oldrole="userinput">events.</span>).</p>
<pre class="Code" oldrole="synopsis">value-pairs(
    key(".cee.*"
        rekey(
            shift(4)
            add-prefix("events.")
        )
    )
)</pre>
<p oldrole="para">The <span class="Code" oldrole="parameter">rekey()</span> option can be used with the <span class="Code" oldrole="parameter">format-json</span> template-function as well, using the following syntax:</p>
<pre class="Code" oldrole="synopsis">$(format-json --rekey .cee.* --add-prefix events.)</pre>
</example>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<informaltable colsep="0" frame="topbot" rowsep="0" xml:id="value-pairs-scope">
<tgroup cols="2">
<colspec colname="c1" colnum="1" colwidth="40pt"></colspec>
<colspec colname="c2" colnum="2"></colspec>
<tbody>
<row>
<entry><i oldrole="emphasis" role="bold">scope()</i>
<indexterm type="parameter">
<primary>scope()</primary>
</indexterm>
</entry>
<entry></entry>
</row>
<row>
<entry>Type:</entry>
<entry>space-separated list of macro groups to include in selection</entry>
</row>
<row>
<entry>Default:</entry>
<entry>empty string</entry>
</row>
<row>
<entry nameend="c2" namest="c1">
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> This option selects predefined groups of macros. The following groups are available:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para"><i oldrole="emphasis">nv-pairs</i>: Every soft macro (name-value pair) associated with the message, except the ones that start with a dot (.) character. Macros starting with a dot character are generated within <entity>abbrev</entity> and are not originally part of the message, therefore are not included in this group.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><i oldrole="emphasis">dot-nv-pairs</i>: Every soft macro (name-value pair) associated with the message which starts with a dot (.) character. For example, <span class="Code" oldrole="userinput">.classifier.rule_id</span> and <span class="Code" oldrole="userinput">.sdata.*</span>. Macros starting with a dot character are generated within <entity>abbrev</entity> and are not originally part of the message.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><i oldrole="emphasis">all-nv-pairs</i>: Include every soft macro (name-value pair). Equivalent to using both <span class="Code" oldrole="parameter">nv-pairs</span> and <span class="Code" oldrole="parameter">dot-nv-pairs</span>.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><i oldrole="emphasis">rfc3164</i>: The macros that correspond to the RFC3164 (legacy or BSD-syslog) message format: <span class="Code" oldrole="parameter">$FACILITY</span>, <span class="Code" oldrole="parameter">$PRIORITY</span>, <span class="Code" oldrole="parameter">$HOST</span>, <span class="Code" oldrole="parameter">$PROGRAM</span>, <span class="Code" oldrole="parameter">$PID</span>, <span class="Code" oldrole="parameter">$MESSAGE</span>, and <span class="Code" oldrole="parameter">$DATE</span>.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><i oldrole="emphasis">rfc5424</i>: The macros that correspond to the RFC5424 (IETF-syslog) message format: <span class="Code" oldrole="parameter">$FACILITY</span>, <span class="Code" oldrole="parameter">$PRIORITY</span>, <span class="Code" oldrole="parameter">$HOST</span>, <span class="Code" oldrole="parameter">$PROGRAM</span>, <span class="Code" oldrole="parameter">$PID</span>, <span class="Code" oldrole="parameter">$MESSAGE</span>, <span class="Code" oldrole="parameter">$MSGID</span>, <span class="Code" oldrole="parameter">$R_DATE</span>, and the metadata from the structured-data (SDATA) part of RFC5424-formatted messages, that is, every macro that starts with <span class="Code" oldrole="userinput">.SDATA.</span>.</p>
<p oldrole="para">The <span class="Code" oldrole="parameter">rfc5424</span> group also has the following alias: <span class="Code" oldrole="parameter">syslog-proto</span>. Note that the value of <span class="Code" oldrole="parameter">$R_DATE</span> will be listed under the <span class="Code" oldrole="parameter">DATE</span> key.</p>
<p oldrole="para">The <span class="Code" oldrole="parameter">rfc5424</span> group does not contain any metadata about the message, only information that was present in the original message. To include the most commonly used metadata (for example, the <span class="Code" oldrole="parameter">$SOURCEIP</span> macro), use the <span class="Code" oldrole="parameter">selected-macros</span> group instead.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><i oldrole="emphasis">all-macros</i>: Include every hard macro. This group is mainly useful for debugging, as it contains redundant information (for example, the date-related macros include the date-related information several times in various formats).</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><i oldrole="emphasis">selected-macros</i>: Include the macros of the <span class="Code" oldrole="parameter">rfc3164</span> groups, and the most commonly used metadata about the log message: the <span class="Code" oldrole="parameter">$TAGS</span>, <span class="Code" oldrole="parameter">$SOURCEIP</span>, and <span class="Code" oldrole="parameter">$SEQNUM</span> macros.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><i oldrole="emphasis">sdata</i>: The metadata from the structured-data (SDATA) part of RFC5424-formatted messages, that is, every macro that starts with <span class="Code" oldrole="userinput">.SDATA.</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><i oldrole="emphasis">everything</i>: Include every hard and soft macros. This group is mainly useful for debugging, as it contains redundant information (for example, the date-related macros include the date-related information several times in various formats).</p>
</li>
</ul>
<p oldrole="para">For example:</p>
<pre class="Code" oldrole="synopsis">value-pairs(
        scope(rfc3164 selected-macros))</pre>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</simplesect>
</body></html>
