<?xml version="1.0" encoding="UTF-8"?>
%entities;]&gt;
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
 <body name="configuring-destinations-graylog" oldrole="section">
  <h1 name="configuring-destinations-graylog" oldrole="section">
   Sending logs to Graylog
  </h1>
  <MadCap:keyword term="destination drivers:['graylog2()']">
  </MadCap:keyword>
  <h6 oldrole="simplesect">
   <span class="Code" oldrole="parameter">
    graylog2()
   </span>
   : Sending logs to Graylog
  </h6>
  <p oldrole="para">
   You can use the
   <span class="Code" oldrole="parameter">
    graylog2()
   </span>
   destination and a Graylog Extended Log Format (GELF) template to send syslog messages to
   <a href="http://docs.graylog.org">
    Graylog
   </a>
   .
  </p>
  <p oldrole="para">
   You can forward simple name-value pairs where the name starts with a dot or underscore. If names of your name-value pairs include dots other than the first character, you should use JSON formatting directly instead of the GELF template and send logs to a raw TCP port in Graylog, which can then extract fields from nested JSON.
  </p>
  <p>
   <b oldrole="formalpara">
    Declaration:
   </b>
  </p>
  <p oldrole="para">
  </p>
  <p class="Code" oldrole="synopsis">
   graylog2();
  </p>
  <example xml:id="example-destination-graylog">
   <title>
    Using the graylog2() driver
   </title>
   <p oldrole="para">
    You can send syslog messages to Graylog using the
    <span class="Code" oldrole="parameter">
     graylog2()
    </span>
    destination. The
    <span class="Code" oldrole="parameter">
     graylog2()
    </span>
    destination uses the GELF template, the native data format of Graylog.
   </p>
   <ol oldrole="orderedlist">
    <li oldrole="listitem">
     <p oldrole="para">
      On the Graylog side, configure a GELF TCP input. For more information, see the relevant
      <a href="http://docs.graylog.org">
       Graylog
      </a>
      documentation.
     </p>
    </li>
    <li oldrole="listitem">
     <p oldrole="para">
      On the syslog-ng side, configure the name or IP address of the host running Graylog.
     </p>
     <p class="Code" oldrole="synopsis">
      destination d_graylog {
  graylog2(
    host("172.16.146.142")
  );
};
     </p>
     <p oldrole="para">
      If you parsed your messages using syslog-ng, the template also forwards any name-value pairs where the name starts with a dot or underscore.
     </p>
    </li>
   </ol>
   <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
    <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
    </col>
    <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
    </col>
    <tbody>
     <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
      <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
       <p>
        <img src="../../Resources/Images/Common/note.png"/>
       </p>
      </td>
      <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1">
       <span class="AllNoteStyles">
        NOTE:
       </span>
       <p oldrole="para">
        If there is a dot in a field name other than the first character, syslog-ng creates nested JSON while formatting the message. Nested JSON is not automatically parsed in GELF messages.
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </example>
  <simplesect>
   <title>
    Sending nested JSON to Graylog
   </title>
   <p oldrole="para">
    While sending nested JSON inside GELF is possible, it is not convenient. If you use parsing and normalization in syslog-ng and dot notation in field names, use pure JSON instead of GELF to forward your messages.
   </p>
   <ol oldrole="orderedlist">
    <li oldrole="listitem">
     <p oldrole="para">
      On the Graylog side, create a new raw TCP input.
     </p>
    </li>
    <li oldrole="listitem">
     <p oldrole="para">
      Still in Graylog, once the raw TCP input is ready, add a JSON extractor to it.
     </p>
    </li>
    <li oldrole="listitem">
     <p oldrole="para">
      On the syslog-ng side, use a network destination combined with a template utilizing format-json as shown in the example below:
     </p>
     <p class="Code" oldrole="synopsis">
      destination d_jsontcp {
  network(
    "172.16.146.142"
    port("5555")
    transport(tcp)
    template("$(format-json --scope all-nv-pairs)\n")
  );
};
     </p>
    </li>
   </ol>
  </simplesect>
 </body>
</html>
