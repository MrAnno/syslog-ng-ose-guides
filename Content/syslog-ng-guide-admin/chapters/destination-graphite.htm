<?xml version="1.0" encoding="UTF-8"?>

<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="configuring-destinations-graphite" oldrole="section">
<h1 name="configuring-destinations-graphite" oldrole="section"><span class="Code" oldrole="parameter">graphite</span>: Sending metrics to Graphite</h1>
<MadCap:keyword term="destination drivers:['graphite()']"></MadCap:keyword>
<p oldrole="para">The <span class="Code" oldrole="parameter">graphite()</span> destination can send metrics to a <a href="http://graphite.readthedocs.io/en/latest/index.html">Graphite</a> server to store numeric time-series data. There are many ways to feed the Graphite template function with name value pairs. The <entity>abbrev</entity> CSV and PatternDB parsers (for details, see <xref linkend="syslog-ng-patterndb-using-parsers"></xref>) can parse log messages and generate name value pairs based on message content. The CSV parser (for details, see <xref linkend="csv-parser"></xref>) can be used for logs which have a constant field based structure, like the Apache web server access logs. The patterndb parser can parse information and can extract important fields from free form log messages, as long as patterns describing the log messages are available. Another way is to send JSON-based log messages (for details, see <xref linkend="json-parser"></xref>) to <entity>abbrev</entity>, like running a simple shell script collecting metrics and running it from cron regularly.</p>
<p oldrole="para">To see an example of how the <span class="Code" oldrole="parameter">graphite()</span> destination is used to collect statistics coming from syslog-ng, see the blog post <a href="https://syslog-ng.com/blog/collecting-syslog-ng-statistics-to-graphite/">Collecting syslog-ng statistics to Graphite</a>.</p>

<h6 oldrole="formalpara">Declaration:</h6>
<p oldrole="para"></p>

<pre class="Code" oldrole="synopsis">graphite(payload());</pre>
<example xml:id="example-destination-graphite">
<title>Using the graphite() driver</title>
<p oldrole="para">To use the graphite() destination, the only mandatory parameter is payload, which specifies the value pairs to send to graphite. In the following example any value pairs starting with "monitor." are forwarded to graphite.</p>
<pre class="Code" oldrole="synopsis">destination d_graphite { graphite(payload("--key monitor.*")); };</pre>
</example>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">The <span class="Code" oldrole="parameter">graphite()</span> destination is only a wrapper around the <span class="Code" oldrole="parameter">network()</span> destination and the <span class="Code" oldrole="parameter">graphite-output</span> template function. If you want to fine-tune the TCP parameters, use the <span class="Code" oldrole="parameter">network()</span> destination instead, as described in <xref linkend="template-function-graphite"></xref>.</p></td></tr></tbody></table>

<h2 name="reference-destination-graphite">graphite() destination options</h2>
<indexterm>
<primary>destination drivers</primary>
<secondary><span class="Code" oldrole="parameter">graphite()</span> driver</secondary>
</indexterm>
<p oldrole="para">The <span class="Code" oldrole="parameter">graphite()</span> destination has the following options:</p>
<simplesect xml:id="graphite-option-host">
<title>host()</title>
<indexterm type="parameter">
<primary>host()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>hostname or IP address</entry>
</row>
<row>
<entry>Default:</entry>
<entry>localhost</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The hostname or IP address of the Graphite server.</p>
</simplesect>
<simplesect xml:id="graphite-option-port">
<title>port()</title>
<indexterm type="parameter">
<primary>port()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>number</entry>
</row>
<row>
<entry>Default:</entry>
<entry>2003</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The port number of the Graphite server.</p>
</simplesect>
<simplesect xml:id="graphite-option-payload">
<title>payload()</title>
<indexterm type="parameter">
<primary>payload()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>parameter list of the <span class="Code" oldrole="parameter">payload()</span> option</entry>
</row>
<row>
<entry>Default:</entry>
<entry>
<pre class="Code" oldrole="synopsis">empty string</pre>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The payload() option allows you to select which value pairs to forward to graphite.</p>
<p oldrole="para">The syntax of <span class="Code" oldrole="parameter">payload</span> is different from the syntax of <span class="Code" oldrole="parameter">value-pairs()</span>: use the command-line syntax used in the <a href="reference-template-functions.htm">format-json template function</a>. For details on using the payload() option, see <xref linkend="template-function-graphite"></xref>.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">If left empty, there is no data to be forwarded to Graphite.</p></td></tr></tbody></table>
</simplesect>

</body></html>
