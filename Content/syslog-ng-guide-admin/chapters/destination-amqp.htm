<?xml version="1.0" encoding="UTF-8"?>

 %entities;]&gt;
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body condition="ose" name="configuring-destinations-amqp" oldrole="section">
<h1 condition="ose" name="configuring-destinations-amqp" oldrole="section"><span class="Code" oldrole="parameter">amqp</span>: Publishing messages using AMQP</h1>
<MadCap:keyword term="destination drivers:[&lt;span class=&quot;Code&quot; oldrole=&quot;parameter&quot;&gt;amqp()&lt;/span&gt;, ' driver']"></MadCap:keyword>
<p oldrole="para">The <span class="Code" oldrole="parameter">amqp()</span> driver publishes messages using the <a href="http://www.amqp.org/">AMQP (Advanced Message Queuing Protocol)</a>. <entity>abbrev</entity> supports AMQP versions 0.9.1 and 1.0. The <entity>abbrev</entity> <span class="Code" oldrole="parameter">amqp()</span> driver supports persistence, and every available exchange types.</p>
<p oldrole="para">The name-value pairs selected with the <span class="Code" oldrole="parameter">value-pairs()</span> option will be sent as AMQP headers, while the body of the AMQP message is empty by default (but you can add custom content using the <span class="Code" oldrole="parameter">body()</span> option). Publishing the name-value pairs as headers makes it possible to use the Headers exchange-type and subscribe only to interesting log streams. This solution is more flexible than using the <span class="Code" oldrole="parameter">routing-key()</span> option.</p>
<p oldrole="para">For the list of available parameters, see <xref linkend="reference-destination-amqp"></xref>.</p>

<h6 oldrole="formalpara">Declaration:</h6>
<p oldrole="para"></p>

<pre class="Code" oldrole="synopsis">amqp( host("&lt;amqp-server-address&gt;") );</pre>
<example xml:id="example-using-amqp">
<title>Using the amqp() driver</title>
<p oldrole="para">The following example shows the default values of the available options.</p>
<pre class="Code" oldrole="synopsis">destination d_amqp {
    amqp(
        vhost("/")
        host("127.0.0.1")
        port(5672)
        exchange("syslog")
        exchange-type("fanout")
        routing-key("")
        body("")
        persistent(yes)
        value-pairs(
            scope("selected-macros" "nv-pairs" "sdata")
        )
    );
};</pre>
</example>

<h2 name="reference-destination-amqp">amqp() destination options</h2>
<indexterm>
<primary>destination drivers</primary>
<secondary><span class="Code" oldrole="parameter">amqp()</span> driver</secondary>
</indexterm>
<p oldrole="para">The <span class="Code" oldrole="parameter">amqp()</span> driver publishes messages using the AMQP (Advanced Message Queuing Protocol).</p>
<p oldrole="para">The <span class="Code" oldrole="parameter">amqp()</span> destination has the following options:</p>
<simplesect xml:id="amqp-option-body">
<title>body()</title>
<indexterm type="parameter">
<primary>body()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>string</entry>
</row>
<row>
<entry>Default:</entry>
<entry>empty string</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The body of the AMQP message. You can also use macros and templates.</p>
</simplesect>
<simplesect xml:id="amqp-option-ca-file">
<title>ca-file()</title>
<indexterm type="parameter">
<primary>ca-file()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>string</entry>
</row>
<row>
<entry>Default:</entry>
<entry>N/A</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Name of a file, that contains the trusted CA certificate in PEM format. For example: <span class="Code" oldrole="filename">ca-file("/home/certs/syslog-ng/tls/cacert.pem")</span>. The <entity>abbrev</entity> application uses this CA certificate to validate the certificate of the peer.</p>
<MadCap:snippetBlock src="../../shared/chunk/topic-tls-block-amqp.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="amqp-options-cert-file">
<MadCap:snippetBlock src="../../shared/chunk/option-destination-tls-cert-file.htm"></MadCap:snippetBlock>
<MadCap:snippetBlock src="../../shared/chunk/topic-tls-block-amqp.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-diskbuffer.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="amqp-option-exchange">
<title>exchange()</title>
<indexterm type="parameter">
<primary>exchange()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>string</entry>
</row>
<row>
<entry>Default:</entry>
<entry>syslog</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The name of the AMQP exchange where <entity>abbrev</entity> sends the message. Exchanges take a message and route it into zero or more queues.</p>
</simplesect>
<simplesect xml:id="amqp-option-exchange-declare">
<title>exchange-declare()</title>
<indexterm type="parameter">
<primary>exchange-declare()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>yes|no</entry>
</row>
<row>
<entry>Default:</entry>
<entry>no</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> By default, <entity>abbrev</entity> does not create non-existing exchanges. Use the <span class="Code" oldrole="userinput">exchange-declare(yes)</span> option to automatically create exchanges.</p>
</simplesect>
<simplesect xml:id="amqp-option-exchange-type">
<title>exchange-type()</title>
<indexterm type="parameter">
<primary>exchange-type()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>direct|fanout|topic|headers</entry>
</row>
<row>
<entry>Default:</entry>
<entry>fanout</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The type of the AMQP exchange.</p>
</simplesect>
<simplesect xml:id="amqp-option-host">
<title>host()</title>
<indexterm type="parameter">
<primary>host()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>hostname or IP address</entry>
</row>
<row>
<entry>Default:</entry>
<entry>127.0.0.1</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The hostname or IP address of the AMQP server.</p>
</simplesect>
<simplesect xml:id="amqp-options-key-file">
<MadCap:snippetBlock src="../../shared/chunk/option-destination-tls-key-file.htm"></MadCap:snippetBlock>
<MadCap:snippetBlock src="../../shared/chunk/topic-tls-block-amqp.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="amqp-option-password">
<title>password()</title>
<indexterm type="parameter">
<primary>password()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>string</entry>
</row>
<row>
<entry>Default:</entry>
<entry>n/a</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The password used to authenticate on the AMQP server.</p>
</simplesect>
<simplesect xml:id="amqp-options-peer-verify">
<MadCap:snippetBlock src="../../shared/chunk/option-peer-verify-simple.htm"></MadCap:snippetBlock>
<MadCap:snippetBlock src="../../shared/chunk/topic-tls-block-amqp.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="amqp-option-persistent">
<title>persistent()</title>
<indexterm type="parameter">
<primary>persistent()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>yes|no</entry>
</row>
<row>
<entry>Default:</entry>
<entry>yes</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> If this option is enabled, the AMQP server or broker will store the messages on its hard disk. That way, the messages will be retained if the AMQP server is restarted, if the message queue is set to be durable on the AMQP server.</p>
</simplesect>
<simplesect xml:id="amqp-option-port">
<title>port()</title>
<indexterm type="parameter">
<primary>port()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>number</entry>
</row>
<row>
<entry>Default:</entry>
<entry>5672</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The port number of the AMQP server.</p>
</simplesect>
<simplesect xml:id="amqp-option-retries">
<MadCap:snippetBlock src="../../shared/chunk/option-destination-retries.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="amqp-option-routing-key">
<title>routing-key()</title>
<indexterm type="parameter">
<primary>routing-key()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>string</entry>
</row>
<row>
<entry>Default:</entry>
<entry>empty string</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies a routing key for the exchange. The routing key selects certain messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter. The routing key can include macros and templates.</p>
</simplesect>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-throttle.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="amqp-option-username">
<title>username()</title>
<indexterm type="parameter">
<primary>username()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>string</entry>
</row>
<row>
<entry>Default:</entry>
<entry>empty string</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The username used to authenticate on the AMQP server.</p>
</simplesect>
<MadCap:snippetBlock src="../../shared/chunk/destination-option-value-pairs.htm"></MadCap:snippetBlock>
<simplesect xml:id="amqp-option-vhost">
<title>vhost()</title>
<indexterm type="parameter">
<primary>vhost()</primary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>string</entry>
</row>
<row>
<entry>Default:</entry>
<entry>/</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The name of the AMQP virtual host to send the messages to.</p>
</simplesect>

</body></html>
