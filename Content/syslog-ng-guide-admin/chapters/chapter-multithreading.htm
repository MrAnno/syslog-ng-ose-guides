<?xml version="1.0" encoding="UTF-8"?>

 %entities;]&gt;
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="chapter-multithreading" oldrole="chapter">
<h1 name="chapter-multithreading" oldrole="chapter">Multithreading and scaling in <MadCap:variable name="General.abbrev"></MadCap:variable></h1>

<MadCap:keyword term="scaling to multiple CPUs"></MadCap:keyword>
<MadCap:keyword term="threading"></MadCap:keyword>
<MadCap:keyword term="performance:['using multithreading']"></MadCap:keyword>
<p oldrole="para">Starting with version <MadCap:conditionaltext MadCap:conditions="pe">4 F1</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="ose">3.3</MadCap:conditionaltext>, <MadCap:variable name="General.abbrev"></MadCap:variable> can process sources and destinations in multithreaded mode to scale to multiple CPUs or cores for increased performance. Starting with version <MadCap:conditionaltext MadCap:conditions="ose">3.6</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe">5 F4</MadCap:conditionaltext>, this multithreaded mode is the default.</p>

<h2 name="multithreading-in-syslog-ng">Multithreading concepts of <MadCap:variable name="General.abbrev"></MadCap:variable></h2>
<p oldrole="para">This section is a brief overview on how <MadCap:variable name="General.abbrev"></MadCap:variable> works in multithreaded mode. It is mainly for illustration purposes: the concept has been somewhat simplified and may not completely match reality.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">The way <MadCap:variable name="General.abbrev"></MadCap:variable> uses multithreading may change in future releases. The current documentation applies to version <MadCap:variable name="Version.version"></MadCap:variable>.</p></td></tr></tbody></table>
<p oldrole="para"><MadCap:variable name="General.abbrev"></MadCap:variable> always uses multiple threads:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">A main thread that is always running</p>
</li>
<li oldrole="listitem">
<p oldrole="para">A number of worker threads that process the messages. You can influence the behavior of worker threads using the <span class="Code" oldrole="parameter">threaded()</span> option and the <span class="Code" oldrole="parameter">--worker-threads</span> command-line option.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Some other, special threads for internal functionalities. For example, certain destinations run in a separate thread, independently of the multithreading (<span class="Code" oldrole="parameter">threaded()</span>) and <span class="Code" oldrole="parameter">--worker-threads</span> settings of <MadCap:variable name="General.abbrev"></MadCap:variable>.</p>
</li>
</ul>
<p oldrole="para">The maximum number of worker threads <MadCap:variable name="General.abbrev"></MadCap:variable> uses is the number of CPUs or cores in the host running <MadCap:variable name="General.abbrev"></MadCap:variable> (up to 64). You can limit this value using the <span class="Code" oldrole="parameter">--worker-threads</span> command-line option that sets the maximum total number of threads <MadCap:variable name="General.abbrev"></MadCap:variable> can use, including the main <MadCap:variable name="General.abbrev"></MadCap:variable> thread. However, the <span class="Code" oldrole="parameter">--worker-threads</span> option does not affect the supervisor of <MadCap:variable name="General.abbrev"></MadCap:variable>. The supervisor is a separate process (see <MadCap:xref href="#syslog-ng.8"></MadCap:xref>), but certain operating systems might display it as a thread. In addition, certain destinations always run in a separate thread, independently of the multithreading (<span class="Code" oldrole="parameter">threaded()</span>) and <span class="Code" oldrole="parameter">--worker-threads</span> settings of <MadCap:variable name="General.abbrev"></MadCap:variable>.</p>
<p oldrole="para">When an event requiring a new thread occurs (for example, <MadCap:variable name="General.abbrev"></MadCap:variable> receives new messages, or a destination becomes available), <MadCap:variable name="General.abbrev"></MadCap:variable> tries to start a new thread. If there are no free threads, the task waits until a thread finishes its task and becomes available. There are two types of worker threads:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">Reader threads read messages from a source (as many as possible, but limited by the <span class="Code" oldrole="parameter">log-fetch-limit()</span> and <span class="Code" oldrole="parameter">log-iw-size()</span> options. The thread then processes these messages, that is, performs filtering, rewriting and other tasks as necessary, and puts the log message into the queue of the destination. If the destination does not have a queue (for example, usertty), the reader thread sends the message to the destination, without the interaction of a separate writer thread.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Writer threads take the messages from the queue of the destination and send them to the destination, that is, write the messages into a file, or send them to the syslog server over the network. The writer thread starts to process messages from the queue only if the destination is writable, and there are enough messages in the queue, as set in the <span class="Code" oldrole="parameter">flush-lines()</span> and the <span class="Code" oldrole="parameter">flush-timeout()</span> options. Writer threads stop processing messages when the destination becomes unavailable, or there are no more messages in the queue.</p>
</li>
</ul>

<h6 oldrole="formalpara">Sources and destinations affected by multithreading</h6>
<p oldrole="para">The following list describes which sources and destinations can use multiple threads. Changing the <span class="Code" oldrole="parameter">--worker-threads</span> command-line option changes the number of threads available to these sources and destinations.</p>

<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">The <span class="Code" oldrole="parameter">tcp</span> and <span class="Code" oldrole="userinput">syslog(tcp)</span> sources can process independent connections in separate threads. The number of independent connections is limited by the <span class="Code" oldrole="parameter">max-connections()</span> option of the source. Separate sources are processed by separate thread, for example, if you have two separate <span class="Code" oldrole="parameter">tcp</span> sources defined that receive messages on different IP addresses or port, <MadCap:variable name="General.abbrev"></MadCap:variable> will use separate threads for these sources even if they both have only a single active connection.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">The <span class="Code" oldrole="parameter">udp</span>, <span class="Code" oldrole="parameter">file</span>, and <span class="Code" oldrole="parameter">pipe</span> sources use a single thread for every source statement.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">The <span class="Code" oldrole="parameter">tcp</span>, <span class="Code" oldrole="parameter">syslog</span>, and <span class="Code" oldrole="parameter">pipe</span> destinations use a single thread for every destination.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">The <span class="Code" oldrole="parameter">file</span> destination uses a single thread for writing the destination file, but may use a separate thread for each destination file if the filename includes macros.</p>
</li>
</ul>

<h6 oldrole="formalpara">Sources and destinations not affected by multithreading</h6>
<p oldrole="para">The following list describes sources and destinations that use a separate thread even if you disable multithreading in <MadCap:variable name="General.abbrev"></MadCap:variable>, in addition to the limit set in the <span class="Code" oldrole="parameter">--worker-threads</span> command-line option.</p>

<ul oldrole="itemizedlist">
<li condition="pe" oldrole="listitem">
<p oldrole="para">The <span class="Code" oldrole="parameter">logstore</span> destination uses separate threads for writing the messages from the journal to the logstore files, and also for timestamping. These threads are independent from the setting of the <span class="Code" oldrole="parameter">--worker-threads</span> command-line option.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Every <span class="Code" oldrole="parameter">sql</span> destination uses its own thread. These threads are independent from the setting of the <span class="Code" oldrole="parameter">--worker-threads</span> command-line option.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">The <span class="Code" oldrole="parameter">java</span> destinations use one thread, even if there are multiple Java-based destinations configured. This thread is independent from the setting of the <span class="Code" oldrole="parameter">--worker-threads</span> command-line option.</p>
</li>
</ul>


<h2 name="configuring-multithreading">Configuring multithreading</h2>
<p oldrole="para">Starting with version <MadCap:conditionaltext MadCap:conditions="ose">3.6</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe">5 F4</MadCap:conditionaltext>, <MadCap:variable name="General.abbrev"></MadCap:variable> runs in multithreaded mode by default. You can enable multithreading in <MadCap:variable name="General.abbrev"></MadCap:variable> using the following methods:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">Globally using the <span class="Code" oldrole="userinput">threaded(yes)</span> option.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Separately for selected sources or destinations using the <span class="Code" oldrole="userinput">flags("threaded")</span> option.</p>
</li>
</ul>

<h6 oldrole="example">Example: Enabling multithreading</h6>
<p oldrole="para">To enable multithreading globally, use the <span class="Code" oldrole="parameter">threaded</span> option:</p>
<pre class="Code" oldrole="synopsis">options {threaded(yes) ; };</pre>
<p oldrole="para">To enable multithreading only for a selected source or destination, use the <span class="Code" oldrole="userinput">flags("threaded")</span> option:</p>
<pre class="Code" oldrole="synopsis">source s_tcp_syslog { network(ip(127.0.0.1) port(1999) flags("syslog-protocol", "threaded") ); };</pre>



<h2 name="optimize-syslog-ng-performance">Optimizing multithreaded performance</h2>
<MadCap:keyword term="performance:['optimizing multithreading']"></MadCap:keyword>
<p oldrole="para">Destinations that have a queue process that queue in a single thread. Multiple sources can send messages to the same queue, so the queue can scale to multiple CPUs. However, when the writer thread writes the queue contents to the destination, it will be single-threaded.</p>
<p oldrole="para">Message parsing, rewrite rules, filters, and other types of message processing is performed by the reader thread in a sequential manner. This means that such operations can scale only if reading messages from the source can be multithreaded. For example, if a <span class="Code" oldrole="parameter">tcp</span> source can process messages from different connections (clients) in separate threads. If the source cannot use multiple threads to process the messages, the operations will not scale.</p>
<p oldrole="para">To improve the processing power of <MadCap:variable name="General.abbrev"></MadCap:variable> and scale to more processors, use the following methods:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">To improve scaling on the source side, use more sources, for example, more source files, or receive the messages from more parallel connections. For network sources, you can also configure a part of your clients to send the messages to a different port of your syslog-ng server, and use separate source definitions for each port.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">On the destination side, when writing the log messages to files, use macros in the filename to split the messages to separate files (for example, using the ${HOST} macro). Files with macros in their filenames are processed in separate writer threads.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">On the destination side, when sending messages to a syslog-ng server, you can use multiple connections to the server if you configure the syslog-ng server to receive messages on multiple ports, and configure separate destinations on the clients to use both ports.</p>
</li>
</ul>

</body></html>
