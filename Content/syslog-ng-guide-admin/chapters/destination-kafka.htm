<?xml version="1.0" encoding="UTF-8"?>

<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="configuring-destinations-kafka" oldrole="section">
<h1 name="configuring-destinations-kafka" oldrole="section"><span class="Code" oldrole="parameter">kafka</span>: Publishing messages to Apache Kafka</h1>
<MadCap:keyword term="destination drivers:[&lt;span class=&quot;Code&quot; oldrole=&quot;parameter&quot;&gt;java()&lt;/span&gt;, ' driver']"></MadCap:keyword>
<MadCap:keyword term='destination drivers:[&lt;span class="Code" oldrole="parameter"&gt;kafka&lt;/span&gt;]'></MadCap:keyword>
<p oldrole="para">Starting with version <MadCap:conditionaltext MadCap:conditions="pe">5.4</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="ose">3.7</MadCap:conditionaltext>, <MadCap:variable name="General.abbrev"></MadCap:variable> can directly publish log messages to the <a href="http://kafka.apache.org">Apache Kafka</a> message bus, where subscribers can access them.</p>
<ul oldrole="itemizedlist">
<MadCap:snippetBlock src="../../shared/chunk/listitem-java-supported-platforms.htm"></MadCap:snippetBlock>
<li oldrole="listitem">
<p oldrole="para">Since <entity>abbrev</entity> uses the official Java Kafka producer, the <span class="Code" oldrole="parameter">kafka</span> destination has significant memory usage.</p>
</li>
<MadCap:snippetBlock src="../../shared/chunk/listitem-java-internal-messages.htm"></MadCap:snippetBlock>
</ul>

<h6 oldrole="formalpara">Declaration:</h6>
<p oldrole="para"></p>

<pre class="Code" oldrole="synopsis">@module mod-java
@include "scl.conf"

kafka(
    client-lib-dir("/opt/syslog-ng/lib/syslog-ng/java-modules/:&lt;path-to-preinstalled-kafka-libraries&gt;")
    kafka-bootstrap-servers("1.2.3.4:9092,192.168.0.2:9092")
    topic("${HOST}")

);</pre>
<example xml:id="example-destination-kafka">
<title>Sending log data to Apache Kafka</title>
<p oldrole="para">The following example defines a <span class="Code" oldrole="parameter">kafka</span> destination, using only the required parameters.</p>
<pre class="Code" oldrole="synopsis">@module mod-java
@include "scl.conf"

destination d_kafka {
  kafka(
    client-lib-dir("/opt/syslog-ng/lib/syslog-ng/java-modules/KafkaDestination.jar:/usr/share/kafka/lib/")
    kafka-bootstrap-servers("1.2.3.4:9092,192.168.0.2:9092")
    topic("${HOST}")
  );
};</pre>
</example>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">To install the software required for the <span class="Code" oldrole="parameter">kafka</span> destination, see <xref linkend="destination-kafka-prerequisites"></xref>.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">For details on how the <span class="Code" oldrole="parameter">kafka</span> destination works, see <xref linkend="destination-kafka-interaction"></xref>.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">For the list of options, see <xref linkend="reference-destination-kafka"></xref>.</p>
</li>
</ul>
<p condition="ose" oldrole="para">The <span class="Code" oldrole="parameter">kafka()</span> driver is actually a reusable configuration snippet configured to receive log messages using the Java language-binding of <entity>abbrev</entity>. For details on using or writing such configuration snippets, see <xref linkend="config-blocks"></xref>. You can find the source of the kafka configuration snippet on <a href="https://github.com/balabit/syslog-ng/blob/master/scl/kafka/plugin.conf">GitHub</a>. For details on extending <entity>abbrev</entity> in Java, see the <a href="https://syslog-ng.gitbooks.io/getting-started/content/chapters/chapter_5/section_2.html">Getting started with syslog-ng development</a> guide.</p>
<MadCap:snippetBlock src="destination-kafka-prerequisites.htm"></MadCap:snippetBlock>

<h2 name="destination-kafka-interaction">How <entity>abbrev</entity> interacts with Apache Kafka</h2>
<p oldrole="para">When stopping the <entity>abbrev</entity> application, <entity>abbrev</entity> will not stop until all Java threads are finished, including the threads started by the Kafka Producer. There is no way (except for the <b oldrole="command">kill -9</b> command) to stop <entity>abbrev</entity> before the Kafka Producer stops. To change this behavior set the properties of the Kafka Producer in its properties file, and reference the file in the <span class="Code" oldrole="parameter">properties-file</span> option.</p>
<p oldrole="para">The <entity>abbrev</entity> <span class="Code" oldrole="parameter">kafka</span> destination tries to reconnect to the brokers in a tight loop. This can look as spinning, because of a lot of similar debug messages. To decrease the amount of such messages, set a bigger timeout using the following properties:</p>
<pre class="Code" oldrole="synopsis">retry.backoff.ms=1000
reconnect.backoff.ms=1000</pre>
<p oldrole="para">For details on using property files, see <xref linkend="kafka-option-properties-file"></xref>. For details on the properties that you can set in the property file, see the <a href="http://kafka.apache.org/documentation.html#newproducerconfigs">Apache Kafka documentation</a>.</p>


<h2 name="reference-destination-kafka">Kafka destination options</h2>
<indexterm>
<primary>destination drivers</primary>
<secondary><span class="Code" oldrole="parameter">java()</span> driver</secondary>
</indexterm>
<indexterm>
<primary>destination drivers</primary>
<secondary><span class="Code" oldrole="parameter">kafka</span></secondary>
</indexterm>
<p oldrole="para">The <span class="Code" oldrole="parameter">kafka</span> destination of <entity>abbrev</entity> can directly publish log messages to the <a href="http://kafka.apache.org">Apache Kafka</a> message bus, where subscribers can access them. The <span class="Code" oldrole="parameter">kafka</span> destination has the following options.</p>

<h6 oldrole="formalpara">Required options:</h6>
<p oldrole="para"></p>

<p oldrole="para">The following options are required: <span class="Code" oldrole="parameter">kafka-bootstrap-servers()</span>, <span class="Code" oldrole="parameter">topic()</span>. Note that to use <span class="Code" oldrole="parameter">kafka</span>, you must add the following lines to the beginning of your <entity>abbrev</entity> configuration:</p>
<pre class="Code" oldrole="synopsis">@module mod-java
@include "scl.conf"</pre>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-java-class-path.htm"></MadCap:snippetBlock>
<p oldrole="para">For the <span class="Code" oldrole="parameter">kafka</span> destination, include the path to the directory where you copied the required libraries (see <xref linkend="destination-kafka-prerequisites"></xref>), for example, <span class="Code" oldrole="userinput">client-lib-dir("/opt/syslog-ng/lib/syslog-ng/java-modules/KafkaDestination.jar:/usr/share/kafka/lib/*.jar")</span>.</p>
</simplesect>
<simplesect xml:id="kafka-option-kafka-bootstrap-servers">
<title>kafka-bootstrap-servers()</title>
<indexterm type="parameter">
<primary>kafka-bootstrap-servers()</primary>
<secondary>kafka</secondary>
</indexterm>
<indexterm type="parameter">
<primary>kafka</primary>
<secondary>kafka-bootstrap-servers()</secondary>
</indexterm>
<indexterm type="parameter">
<primary>kafka</primary>
<secondary>server</secondary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>list of hostnames</entry>
</row>
<row>
<entry>Default:</entry>
<entry></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies the hostname or IP address of the Kafka server. When specifying an IP address, IPv4 (for example, <span class="Code" oldrole="userinput">192.168.0.1</span>) or IPv6 (for example, <span class="Code" oldrole="userinput">[::1]</span>) can be used as well. Use a colon (<span class="Code" oldrole="userinput">:</span>) after the address to specify the port number of the server. When specifying multiple addresses, use a comma to separate the addresses, for example, <span class="Code" oldrole="userinput">kafka-bootstrap-servers("127.0.0.1:2525,remote-server-hostname:6464")</span></p>
</simplesect>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-frac-digits.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="apache-destination-jvm-options">
<MadCap:snippetBlock src="../../shared/chunk/option-destination-jvm-options.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-on-error.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="kafka-option-key">
<title>key()</title>
<indexterm type="parameter">
<primary>key()</primary>
<secondary>kafka</secondary>
</indexterm>
<indexterm type="parameter">
<primary>kafka</primary>
<secondary>key</secondary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>template</entry>
</row>
<row>
<entry>Default:</entry>
<entry>N/A</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The key of the partition under which the message is published. You can use templates to change the topic dynamically based on the source or the content of the message, for example, <span class="Code" oldrole="userinput">key("${PROGRAM}")</span>.</p>
</simplesect>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-log-fifo-size.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="kafka-option-properties-file">
<title>properties-file()</title>
<indexterm type="parameter">
<primary>properties-file()</primary>
<secondary>kafka</secondary>
</indexterm>
<indexterm type="parameter">
<primary>properties-file</primary>
<secondary>resource</secondary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>string (absolute path)</entry>
</row>
<row>
<entry>Default:</entry>
<entry>N/A</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The absolute path and filename of the Kafka properties file to load. For example, <span class="Code" oldrole="userinput">properties-file("/opt/syslog-ng/etc/kafka_dest.properties")</span>. The <entity>abbrev</entity> application reads this file and passes the properties to the Kafka Producer. If a property is defined both in the <entity>abbrev</entity> configuration file (<span class="Code" oldrole="filename">syslog-ng.conf</span>) and in the properties file, then <entity>abbrev</entity> uses the definition from the <entity>abbrev</entity> configuration file.</p>
<p oldrole="para">The <entity>abbrev</entity> <span class="Code" oldrole="parameter">kafka</span> destination supports all properties of the official Kafka producer. For details, see the <a href="http://kafka.apache.org/documentation.html#newproducerconfigs">Apache Kafka documentation</a>.</p>
<p oldrole="para">The <span class="Code" oldrole="parameter">kafka-bootstrap-servers</span> option is translated to the <span class="Code" oldrole="userinput">bootstrap.servers</span> property.</p>
<p oldrole="para">For example, the following properties file defines the acknowledgement method and compression:</p>
<pre class="Code" oldrole="synopsis">acks=all
compression.type=snappy</pre>
</simplesect>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-retries.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="kafka-option-sync-send">
<title>sync-send()</title>
<indexterm type="parameter">
<primary>sync-send()</primary>
<secondary>kafka</secondary>
</indexterm>
<indexterm type="parameter">
<primary>kafka</primary>
<secondary>sync-send</secondary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>true | false</entry>
</row>
<row>
<entry>Default:</entry>
<entry>false</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> When <span class="Code" oldrole="parameter">sync-send</span> is set to <span class="Code" oldrole="userinput">true</span>, <entity>abbrev</entity> sends the message reliably: it sends a message to the Kafka server, then waits for a reply. In case of failure, <entity>abbrev</entity> repeats sending the message, as set in the <span class="Code" oldrole="parameter">retries()</span> parameter. If sending the message fails for <span class="Code" oldrole="parameter">retries()</span> times, <entity>abbrev</entity> drops the message.</p>
<p oldrole="para">This method ensures reliable message transfer, but is very slow.</p>
<p oldrole="para">When <span class="Code" oldrole="parameter">sync-send</span> is set to <span class="Code" oldrole="userinput">false</span>, <entity>abbrev</entity> sends messages asynchronously, and receives the response asynchronously. In case of a problem, <entity>abbrev</entity> cannot resend the messages.</p>
<p oldrole="para">This method is fast, but the transfer is not reliable. Several thousands of messages can be lost before <entity>abbrev</entity> recognizes the error.</p>
</simplesect>
<simplesect xml:id="kafka-option-template">
<title>template()</title>
<indexterm type="parameter">
<primary>message-template()</primary>
<secondary>kafka</secondary>
</indexterm>
<indexterm type="parameter">
<primary>kafka</primary>
<secondary>template</secondary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>template or template function</entry>
</row>
<row>
<entry>Default:</entry>
<entry>$ISODATE $HOST $MSGHDR$MSG\n</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The message as published to Apache Kafka. You can use templates and template functions (for example, <span class="Code" oldrole="parameter">format-json()</span>) to format the message, for example, <span class="Code" oldrole="userinput">template("$(format-json --scope rfc5424 --exclude DATE --key ISODATE)")</span>.</p>
<p oldrole="para">For details on formatting messages in JSON format, see <xref linkend="template-function-format-json"></xref>.</p>
</simplesect>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-throttle.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect xml:id="kafka-option-kafka-topic">
<title>topic()</title>
<indexterm type="parameter">
<primary>topic()</primary>
<secondary>kafka</secondary>
</indexterm>
<indexterm type="parameter">
<primary>kafka</primary>
<secondary>topic</secondary>
</indexterm>
<informaltable colsep="0" frame="topbot" rowsep="0">
<tgroup cols="2">
<colspec colnum="1" colwidth="40pt"></colspec>
<tbody>
<row>
<entry>Type:</entry>
<entry>template</entry>
</row>
<row>
<entry>Default:</entry>
<entry>N/A</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> The Kafka topic under which the message is published. You can use templates to change the topic dynamically based on the source or the content of the message, for example, <span class="Code" oldrole="userinput">topic("${HOST}")</span>.</p>
</simplesect>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-timezone.htm"></MadCap:snippetBlock>
</simplesect>
<simplesect>
<MadCap:snippetBlock src="../../shared/chunk/option-destination-ts-format.htm"></MadCap:snippetBlock>
</simplesect>

</body></html>
