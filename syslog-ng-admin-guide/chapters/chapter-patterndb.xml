<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../../xml-stylesheet/pdf/dtd/docbookx.dtd"
 [  <!ENTITY % entities SYSTEM "../syslog-ng-entities.ent">
 %entities;]> 
<chapter id="chapter-patterndb">
    <title>Processing message content with a pattern database</title>
    <!-- FIXME a cim nem az igazi -->
    <!-- FIXME jumplist -->
    <!-- FIXME leirni, mennyi mindenre jo a patterndb: artificial ignorance, message classification and tagging, content extraction, message correlation, ... -->
        <section id="concepts_pattern_databases">
        <title>Classifying log messages</title>
        <indexterm>
            <primary>classifying messages</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <indexterm>
            <primary>pattern databases</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <para>The syslog-ng application can compare the contents of the received log messages to
            predefined message patterns. By comparing the messages to the known patterns, syslog-ng
            is able to identify the exact type of the messages, and sort them into message classes.
            The message classes can be used to classify the type of the event described in the log
            message. The message classes can be customized, and for example can label the messages
            as user login, application crash, file transfer, etc. events.</para>
        <para>To find the pattern that matches a particular message, syslog-ng uses a method called
            longest prefix match radix tree. This means that syslog-ng creates a tree structure of
            the available patterns, where the different characters available in the patterns for a
            given position are the branches of the tree.</para>
            <!-- FIXME missing figure -->
        <para>To classify a message, syslog-ng selects the first character of the message (the text
            of message, not the header), and selects the patterns starting with this character,
            other patterns are ignored for the rest of the process. After that, the second character
            of the message is compared to the second character of the selected patterns. Again,
            matching patterns are selected, and the others discarded. This process is repeated until
            a single pattern completely matches the message, or no match is found. In the latter
            case, the message is classified as unknown, otherwise the class of the matching pattern
            is assigned to the message.</para>
        <para>To make the message classification more flexible and robust, the patterns can contain
            pattern parsers: elements that match on a set of characters. For example, the NUMBER
            parser matches on any integer or hexadecimal number (for example 1, 123, 894054, 0xFFFF, etc.). Other pattern
            parsers match on various strings and IP addresses. For the details of available pattern
            parsers, see <xref linkend="patterndb-using-parsers"/>.</para>
        <para>The functionality of the pattern database is similar to that of the logcheck project,
            but it is much easier to write and maintain the patterns used by syslog-ng, than the
            regular expressions used by logcheck. Also, it is much easier to understand syslog-ng
            pattens than regular expressions.</para>
        <para>Pattern matching based on regular expressions is computationally very intensive,
            especially when the number of patterns increases. The solution used by syslog-ng can be
            performed real-time, and is independent from the number of patterns, so it scales much
            better. The following patterns describe the same message: <parameter>Accepted password
                for bazsi from 10.50.0.247 port 42156 ssh2</parameter>
        </para>
        <para>A regular expression matching this message from the logcheck project:
                <parameter>Accepted \
                (gssapi(-with-mic|-keyex)?|rsa|dsa|password|publickey|keyboard-interactive/pam) \
                for [^[:space:]]+ from [^[:space:]]+ port [0-9]+( (ssh|ssh2))?</parameter>
        </para>
        <para>A syslog-ng database pattern for this message: <parameter>Accepted
                @QSTRING:auth_method: @ for@QSTRING:username: @from\ @QSTRING:client_addr: @port
                @NUMBER:port:@ ssh2</parameter>
        </para>
        <para>For details on using pattern databases to classify log messages, see <xref
                linkend="configuring_pattern_databases"/>.</para>
        <xi:include href="../../common/chapters/patterndb_common.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="element(patterndb-structure)"/>
        <xi:include href="../../common/chapters/patterndb_common.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="element(patterndb-operation)"/>
        <section id="concepts_artificial_ignorance">
            <title>Artificial ignorance</title>
            <para>Artificial ignorance is a method to detect anomalies. When applied to log
                analysis, it means that you ignore the regular, common log messages - these are the
                result of the regular behavior of your system, and therefore are not too
                interesting. However, new messages that have not appeared in the logs before can
                sign important events, and should be therefore investigated. "By definition,
                something we have never seen before is anomalous" (Marcus J. Ranum).Â </para>
            <para>The syslog-ng application can classify messages using a pattern database: messages
                that do not match any pattern are classified as unknown. This provides a way to use
                artificial ignorance to review your log messages. You can periodically review the
                unknown messages &mdash; syslog-ng can send them to a separate destination - and
                add patterns for them to the pattern database. By reviewing and manually classifying
                the unknown messages, you can iteratively classify more and more messages, until the
                only the really anomalous messages show up as unknown.</para>
            <para>Obviously, for this to work, a large number of message patterns are required. The
                radix-tree matching method used for message classification is very effective, can be
                performed very fast, and scales very well; basically the time required to perform a
                pattern matching is independent from the number of patterns in the database.</para>
            <para>To simplify the building of pattern databases, BalaBit has released (and will
                continue to release) sample databases. Currently the sample pattern databases are
                available at the <ulink
                    url="http://www.balabit.com/downloads/files/patterndb-snapshot/"
                    >BalaBit Download page</ulink>.</para>
<!--            <itemizedlist>
                <listitem>
                    <para>a database for the log messages of Cisco PIX firewalls;</para>
                </listitem>
                <listitem>
                    <para>the database of the Logcheck project (<ulink url="http://logcheck.org/"
                            >http://logcheck.org/</ulink>) containing message patterns for a large
                        number of open source applications;</para>
                </listitem>
                <listitem>
                    <para>a database for the log messages of the Zorp Application Level Gateway
                            (<ulink url="http://www.balabit.com/network-security/zorp-gateway/"
                            >http://www.balabit.com/network-security/zorp-gateway/</ulink>)
                        (developed by BalaBit IT Security).</para>
                </listitem>
            </itemizedlist>-->
        </section>
    </section>
    

    <section id="configuring_pattern_databases">
        <title>Using pattern databases</title>
        <indexterm>
            <primary>parsers</primary>
        </indexterm>
        <indexterm>
            <primary>message parsing</primary>
        </indexterm>
        <indexterm>
            <primary>parsing messages</primary>
        </indexterm>
        <indexterm>
            <primary>pattern database</primary>
        </indexterm>
        <indexterm>
            <primary>classifying messages</primary>
            <secondary>configuration</secondary>
        </indexterm>
        <indexterm>
            <primary>message classification</primary>
        </indexterm>
        <para>To classify messages using a pattern database, include a
            <parameter>db_parser()</parameter> statement in your syslog-ng configuration file using
            the following syntax:</para>
        <synopsis>Declaration:
        parser &lt;identifier&gt; {db_parser(file("&lt;database_filename&gt;"));};</synopsis>
        <para>Note that using the parser in a log statement only performs the classification, but
            does not automatically do anything with the results of the classification. </para>
        <example>
            <title>Defining pattern databases</title>
            <para>The following statement uses the database located at
                    <filename>/opt/syslog-ng/var/db/patterndb.xml</filename>.</para>
            <synopsis>parser pattern_db {
            db_parser(
                file("/opt/syslog-ng/var/db/patterndb.xml")
            );
            };</synopsis>
            <para>To apply the patterns on the incoming messages, include the parser in a log
                statement:</para>
            <synopsis>log { 
        source(s_all);
        parser(pattern_db);            
        destination( di_messages_class);
        };</synopsis>
        </example>
        <note>
            <para>The default location of the pattern database file is
                    <filename>/opt/syslog-ng/var/run/patterndb.xml</filename>. The
                <parameter>file</parameter> option of the <parameter>db-parser</parameter> statement
                can be used to specify a different file, thus different db-parser statements can use
                different pattern databases. Later versions of syslog-ng will be able to dynamically
                generate a main database from separate pattern database files.</para>
        </note>
        <example>
            <title>Using classification results</title>
            <para>The following destination separates the log messages into different files based on
                the class assigned to the pattern that matches the message (for example Violation and
                Security type messages are stored in a separate file), and also adds the ID of the
                matching rule to the message: </para>
            <synopsis>destination di_messages_class {
        file("/var/log/messages-${.classifier.class}"
        template("${.classifier.rule_id};${S_UNIXTIME};${SOURCEIP};${HOST};${PROGRAM};${PID};${MSG}\n")
        template_escape(no)
    );
};</synopsis>
        </example>
        <para>To create your own pattern databases see <xref linkend="reference_patterndb_schemes"
            />.</para>
        <section id="patterndb-filters">
            <title>Using parser results in filters and templates</title>
            <indexterm>
                <primary>pattern database</primary>
                <secondary>using the results</secondary>
            </indexterm>
            <indexterm>
                <primary>message filtering</primary>
                <secondary>using parsers</secondary>
            </indexterm>
            <indexterm>
                <primary>parsing messages</primary>
                <secondary>filtering parsed messages</secondary>
            </indexterm>
            <indexterm>
                <primary>parsers</primary>
            </indexterm>
            <indexterm>
                <primary>message parsing</primary>
            </indexterm>
            <indexterm>
                <primary>parsing messages</primary>
            </indexterm>
            <indexterm>
                <primary>pattern database</primary>
            </indexterm>
            <indexterm>
                <primary>classifying messages</primary>
                <secondary>filtering</secondary>
            </indexterm>
            <indexterm>
                <primary>message classification</primary>
            </indexterm>
            <para>The results of message classification and parsing can be used in custom
                filters and file and database templates as well.Â There are two built-in macros
                in &abbrev; that allow you to use the results of the classification: the
                    <parameter>.classifier.class</parameter> macro contains the class assigned
                to the message (for example violation, security, or unknown), while the
                    <parameter>.classifier.rule_id</parameter> macro contains the identifier of
                the message pattern that matched the message.</para>
            <example>
                <title>Using classification results for filtering messages</title>
                <para>To filter on a specific message class, create a filter that checks the
                        <guimenu>.classifier_class</guimenu> macro, and use this filter in a log
                    statement.</para>
                <synopsis>filter fi_class_violation {
                    match("violation"
                    value(".classifier.class")
                    type("string")
                    );
                    };</synopsis>
                <synopsis>log { 
                    source(s_all);
                    parser(pattern_db);
                    filter(fi_class_violation);
                    destination(di_class_violation);
                    };</synopsis>
                <para>Filtering on the <parameter>unknown</parameter> class selects messages
                    that did not match any rule of the pattern database. Routing these messages
                    into a separate file allows you to periodically review new or unknown
                    messages.</para>
                <para>To filter on messages matching a specific classification rule, create a
                    filter that checks the <guimenu>.classifier_rule_id</guimenu> macro. The
                    unique identifier of the rule (for example
                        <parameter>e1e9c0d8-13bb-11de-8293-000c2922ed0a</parameter>) is the
                        <parameter>id</parameter> attribute of the rule in the XML database.</para>
                <synopsis>filter fi_class_rule {
                    match("e1e9c0d8-13bb-11de-8293-000c2922ed0a"
                    value(".classifier_rule_id")
                    type("string")
                    );
                    };</synopsis>
            </example>

            <para>The message-segments parsed by the pattern parsers can also be used as macros
                as well. To accomplish this, you have to add a name to the parser, and then you
                can use this name as a macro that refers to the parsed value of the message.</para>
            <example>
                <title>Using pattern parsers as macros</title>
                <para>For example, you want to parse messages of an application that look like
                        <parameter>"Transaction: &lt;type&gt;."</parameter>, where
                    &lt;type&gt; is a string that has different values (for example refused,
                    accepted, incomplete, etc.). To parse these messages, you can use the
                    following pattern:</para>
                <synopsis>'Transaction: @ESTRING::.@'</synopsis>
                <para>Here the @ESTRING@ parser parses the message until the next full stop
                    character. To use the results in a filter or a filename template, include a
                    name in the parser of the pattern, for example:</para>
                <synopsis>'Transaction: @ESTRING:TRANSACTIONTYPE:.@'</synopsis>
                <para>After that, add a custom template to the logpath that uses this template.
                    For example, to select every <parameter>accepted</parameter> transaction,
                    use the following custom filter in the log path:</para>
                <synopsis>match("accepted" value("TRANSACTIONTYPE"));</synopsis>
            </example>
            <note>
                <para>The above macros can be used in database columns and filename templates as
                    well, if you create custom templates for the destination or logspace.</para>
                <para>Use a consistent naming scheme for your macros, for example,
                        <parameter>APPLICATIONNAME_MACRONAME</parameter>.</para>
            </note>
        </section>
        <section id="patterndb-download">
            <title>Downloading sample pattern databases</title>
            <!-- FIXME atirni git reposra -->
            <indexterm>
                <primary>patterndb</primary>
                <secondary>download</secondary>
            </indexterm>
            <indexterm>
                <primary>download</primary>
                <secondary>pattern databases</secondary>
            </indexterm>
            <para>Sample pattern databases are available at the BalaBit Download page <ulink
                    url="http://www.balabit.com/downloads/files/patterndb-snapshot/"
                    >http://www.balabit.com/downloads/files/patterndb-snapshot/</ulink>. Note that
                even though these pattern databases contain over 8000 rules for more than 200
                applications and devices, they are only samples and experimental databases that are
                not officially supported and may or may not work in your environment.</para>
            <para>The syslog-ng pattern databases are available under the Creative Commons
                Attribution-Share Alike 3.0 (CC by-SA) license. This includes every
                pattern database written by community contributors or the BalaBit staff. It means
                that:</para>
            <itemizedlist>
                <listitem>
                    <para>you are free to use and modify the patterns
                    purposes;</para>
                </listitem>
                <listitem>
                    <para>when redistributing the pattern databases you must distribute your
                        modifications under the same license;</para>
                </listitem>
                <listitem>
                    <para>and when redistributing the pattern databases, you must make it obvious
                        that the original syslog-ng pattern databases are available at <ulink
                            url="http://www.balabit.com/network-security/syslog-ng/"
                            >http://www.balabit.com/network-security/syslog-ng/</ulink>.</para>
                            <!-- FIXME konkretabb linket -->
                </listitem>
            </itemizedlist>
            <para>For legal details, the full text of the license is available at <ulink
                    url="http://creativecommons.org/licenses/by-sa/3.0/us/legalcode"
                    >http://creativecommons.org/licenses/by-sa/3.0/us/legalcode</ulink>.</para>
        </section>
    </section>
    <section id="reference_parsers_pattern_databases">
        <title>Pattern databases</title>
        <xi:include href="../../common/chapters/patterndb_common.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"
            xpointer="element(patterndb-using-parsers)"/>
        <section id="reference_patterndb_schemes">
            <title>The syslog-ng pattern database format</title>
            <indexterm>
                <primary>pattern database</primary>
            </indexterm>
            <indexterm>
                <primary>classifying messages</primary>
                <secondary>creating databases</secondary>
            </indexterm>
            <indexterm>
                <primary>message classification</primary>
            </indexterm>
            <para>Pattern databases are XML files that contain rules describing the message
            patterns. For sample pattern databases, see <xref linkend="patterndb-download"
            />.</para>
            <para>The following scheme describes the V3 format of the pattern database. This
                format is used by syslog-ng 3.1 and later, and the syslog-ng Store Box (SSB)
                appliance version 1.1 and later (see the <ulink
                    url="http://www.balabit.com/network-security/syslog-ng/log-server-appliance/"
                    >syslog-ng Store Box web page</ulink>
                for details on SSB).</para>
            <para>For a sample database containing only a single pattern, see <xref
                    linkend="example_pattern_database_v3_su"/>.</para>
            <tip>
                <para>Use the <command>pdbtool</command> utility that is bundled with
                    syslog-ng to test message patterns and convert existing databases to the
                    latest format. See <xref linkend="pdbtool.1"/> for details.</para>
            </tip>
            <itemizedlist id="reference_patterndb_scheme_v3">
                <listitem>
                    <para><guimenu>&lt;patterndb&gt;</guimenu>: The container
                        element of the pattern database. For example:
                        <synopsis>&lt;patterndb version='3' pub_date='2009-10-25'&gt;</synopsis></para>
                </listitem>
                <listitem>
                    <para><emphasis>version</emphasis>: The schema version of the pattern
                        database. The current version is <parameter>3</parameter>.</para>
                </listitem>
                <listitem>
                    <para><emphasis>pubdate</emphasis>: The publication date of the XML
                        file.</para>
                </listitem>
                <listitem>
                    <para><guimenu>&lt;ruleset&gt;</guimenu>: A container element to
                        group log patterns for an application or program. For example:
                        <synopsis>&lt;ruleset name='su' id='480de478-d4a6-4a7f-bea4-0c0245d361e1'&gt;</synopsis></para>
                    <para> A <parameter>&lt;patterndb&gt;</parameter> element may
                        contain any number of <guimenu>&lt;ruleset&gt;</guimenu>
                        elements.</para>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis>name</emphasis>: The name of the application.
                                Note that the function of this attribute is to make the
                                database more readable, syslog-ng uses the
                                    <parameter>&lt;pattern&gt;</parameter> element
                                to identify the applications sending log messages.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis>id</emphasis>: A unique ID of the application,
                                for example, the md5 sum of the <parameter>name</parameter>
                                attribute.</para>
                        </listitem>
                        <listitem>
                            <para><guimenu>description</guimenu>: OPTIONAL &mdash; A
                                description of the ruleset or the application.</para>
                        </listitem>
                        <listitem>
                            <para><guimenu>url</guimenu>: OPTIONAL &mdash; An URL
                                referring to further information about the ruleset or the
                                application.</para>
                        </listitem>
                        <listitem>
                            <para><guimenu>pattern</guimenu>: The name of the application
                                &mdash; syslog-ng matches this value to the $PROGRAM
                                header of the syslog message to find the rulesets applicable
                                to the syslog message. This element is also called
                                    <parameter>program pattern</parameter>. For example <synopsis>&lt;pattern&gt;su&lt;/pattern&gt;</synopsis>
                                <note>
                                    <para>If the
                                        <parameter>&lt;pattern&gt;</parameter>
                                        element of a ruleset is not specified, -ng will use
                                        this ruleset as a fallback ruleset: it will apply
                                        the ruleset to messages that have an empty PROGRAM
                                        header, or if none of the program patterns matched
                                        the PROGRAM header of the incoming message. </para>
                                </note>
                            </para>
                        </listitem>
                        <listitem>
                            <para><guimenu>&lt;rules&gt;</guimenu>: A container
                                element for the rules of the ruleset.</para>
                            <itemizedlist>
                                <listitem>
                                    <para><guimenu>&lt;rule&gt;</guimenu>: An
                                        element containing message patterns and how a
                                        message that matches these patterns is classified.
                                        For example:
                                        <synopsis>&lt;rule provider='balabit'
                                        id='f57196aa-75fd-11dd-9bba-001e6806451b'
                                        class='violation'&gt;</synopsis></para>
                                    <note>
                                        <para>If the following characters appear in the
                                          message, they must be escaped in the rule as
                                          follows:</para>
                                        <itemizedlist>
                                          <listitem>
                                          <para><parameter>@</parameter>: Use @@,
                                          for example
                                          <parameter>user@@example.com</parameter></para>
                                          </listitem>
                                          <listitem>
                                          <para><emphasis>&lt;</emphasis>: Use
                                          <parameter>&amp;lt;</parameter></para>
                                          </listitem>
                                          <listitem>
                                          <para><emphasis>&gt;</emphasis>: Use
                                          <parameter>&amp;gt;</parameter></para>
                                          </listitem>
                                          <listitem>
                                          <para>&amp;: Use
                                          <parameter>&amp;amp;</parameter></para>
                                          </listitem>
                                        </itemizedlist>
                                    </note>
                                    <para>The <guimenu>&lt;rules&gt;</guimenu>
                                        element may contain any number of
                                          <guimenu>&lt;rule&gt;</guimenu>
                                        elements.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>provider</emphasis>: The provider of the
                                        rule. This is used to distinguish between who
                                        supplied the rule; i.e., if it has been created by
                                        BalaBit, or added to the xml by a local user.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>id</emphasis>: The globally unique ID of
                                        the rule.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>class</emphasis>: The class of the rule
                                        &mdash; syslog-ng assigns this class to the
                                        messages matching a pattern of this rule.</para>
                                </listitem>

                                <listitem>
                                    <para><guimenu>&lt;patterns&gt;</guimenu>: An
                                        element containing the patterns of the rule. If a
                                          <guimenu>&lt;patterns&gt;</guimenu>
                                        element contains multiple
                                          <guimenu>&lt;pattern&gt;</guimenu>
                                        elements, the class of the
                                          <guimenu>&lt;rule&gt;</guimenu> is
                                        assigned to every syslog message matching any of the
                                        patterns. </para>
                                    <itemizedlist>
                                        <listitem>
                                          <para><guimenu>&lt;pattern&gt;</guimenu>:
                                          A pattern describing a log message. This
                                          element is also called <parameter>message
                                          pattern</parameter>. For example:
                                          <synopsis>&lt;pattern&gt;+ ??? root-&lt;/pattern&gt;</synopsis></para>
                                        </listitem>
                                        <listitem>
                                          <para><guimenu>description</guimenu>: OPTIONAL
                                          &mdash; A description of the pattern or
                                          the log message matching the pattern.
                                          </para>
                                        </listitem>
                                        <listitem>
                                          <para><guimenu>urls</guimenu>: OPTIONAL
                                          &mdash; An element containing one or
                                          more URLs referring to further information
                                          about the patterns or the matching log
                                          messages.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <para><guimenu>url</guimenu>: OPTIONAL
                                          &mdash; An URL referring to
                                          further information about the
                                          patterns or the matching log
                                          messages.</para>
                                          </listitem>
                                          </itemizedlist>
                                        </listitem>
                                        <listitem>
                                          <para><guimenu>values</guimenu>: OPTIONAL
                                          &mdash; Name-value pairs that are
                                          assigned to messages matching the patterns,
                                          for example, the representation of the event
                                          described in the message in Common Event
                                          Format (CEF). The names can be used as
                                          macros to reference the assigned values.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <para><guimenu>value</guimenu>: OPTIONAL
                                          &mdash; Contains the value of
                                          the name-value pair that is assigned
                                          to the message. For example:
                                          <synopsis>&lt;value name=".classifier.outcome"&gt;/Success&lt;/value&gt;</synopsis>
                                          </para>
                                          </listitem>
                                          <listitem>
                                          <para><emphasis>name</emphasis>: The
                                          name of the name-value pair. It can
                                          also be used as a macro to reference
                                          the assigned value.</para>
                                          </listitem>
                                          </itemizedlist>
                                        </listitem>
                                        <listitem>
                                          <para><guimenu>examples</guimenu>: OPTIONAL
                                          &mdash; A container element for sample
                                          log messages that should be recognized by
                                          the pattern. These messages can be used also
                                          to test the patterns and the parsers.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <para><guimenu>example</guimenu>:
                                          OPTIONAL &mdash; A container
                                          element for a sample log message. </para>
                                          <itemizedlist>
                                          <listitem>
                                          <para><guimenu>test_message</guimenu>:
                                          OPTIONAL &mdash; A
                                          sample log message that
                                          should match this pattern.
                                          For example:
                                          <synopsis>&lt;test_message&gt;Content filter has been enabled&lt;/test_message&gt;</synopsis></para>
                                          </listitem>
                                          <listitem>
                                          <para><guimenu>test_values</guimenu>:
                                          OPTIONAL &mdash; A
                                          container element to test
                                          the results of the parsers
                                          used in the pattern.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <para><guimenu>test_value</guimenu>:
                                          OPTIONAL &mdash;
                                          The expected value
                                          of the parser when
                                          matching the pattern
                                          to the test message.
                                          For example:
                                          <synopsis>&lt;test_value name=".dict.ContentFilter"&gt;enabled&lt;/test_value&gt;</synopsis></para>
                                          </listitem>
                                          <listitem>
                                          <para><emphasis>name</emphasis>:
                                          The name of the
                                          parser to
                                          test.</para>
                                          </listitem>
                                          </itemizedlist>
                                          </listitem>
                                          </itemizedlist>
                                          </listitem>
                                          </itemizedlist>
                                        </listitem>
                                        <listitem>
                                          <indexterm>
                                          <primary>tagging messages</primary>
                                          </indexterm>
                                          <indexterm>
                                          <primary>tags</primary>
                                          </indexterm>
                                          <para><guimenu>tags</guimenu>: OPTIONAL
                                          &mdash; An element containing custom
                                          keywords (tags) about the messages matching
                                          the patterns. The tags can be used to label
                                          specific events (for example user logons). It is
                                          also possible to filter on these tags later
                                          (see <xref linkend="tagging_messages"/> for
                                          details). Starting with &product; 3.2, the list of tags assigned to a message can be referenced with the <parameter>$TAGS</parameter> macro.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <para><guimenu>tag</guimenu>: OPTIONAL
                                          &mdash; A keyword or tags
                                          applied to messages matching the
                                          rule. For example:
                                          <synopsis>&lt;tags&gt;&lt;tag&gt;UserLogin&lt;/tag&gt;&lt;/tags&gt;</synopsis></para>
                                          </listitem>
                                          </itemizedlist>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <example id="example_pattern_database_v3_su">
                <title>A V3 pattern database containing a single rule</title>
                <indexterm>
                    <primary>pattern database</primary>
                </indexterm>
                <para>The following pattern database contains a single rule that matches a
                    log message of the <parameter>ssh</parameter> application. A sample log
                    message looks like:</para>
                <synopsis>Accepted password for sampleuser from 10.50.0.247 port 42156 ssh2</synopsis>
                <para>The following is a simple pattern database containing a matching rule.</para>
                <synopsis>&lt;patterndb version='3' pub_date='2009-04-17'&gt;
    &lt;ruleset name='ssh' id='123456678'&gt;
        &lt;pattern&gt;ssh&lt;/pattern&gt;
            &lt;rules&gt;
                &lt;rule provider='me' id='182437592347598' class='system'&gt;
                    &lt;patterns&gt;
                        &lt;pattern&gt;Accepted @QSTRING:SSH.AUTH_METHOD: @ for@QSTRING:SSH_USERNAME: @from\ @QSTRING:SSH_CLIENT_ADDRESS: @port @NUMBER:SSH_PORT_NUMBER:@ ssh2&lt;/pattern&gt;
                    &lt;/patterns&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
    &lt;/ruleset&gt;
&lt;/patterndb&gt;</synopsis>
                <para>Note that the rule uses macros that refer to parts of the message, for
                    example, you can use the <parameter>$SSH_USERNAME</parameter> macro
                    refer to the username used in the connection.</para>
                <para>The following is the same example, but with a test message and test
                    values for the parsers.</para>
                <synopsis>&lt;patterndb version='3' pub_date='2009-04-17'&gt;
    &lt;ruleset name='ssh' id='123456678'&gt;
        &lt;pattern&gt;ssh&lt;/pattern&gt;
            &lt;rules&gt;
                &lt;rule provider='me' id='182437592347598' class='system'&gt;
                    &lt;patterns&gt;
                        &lt;pattern&gt;Accepted @QSTRING:SSH.AUTH_METHOD: @ for@QSTRING:SSH_USERNAME: @from\ @QSTRING:SSH_CLIENT_ADDRESS: @port @NUMBER:SSH_PORT_NUMBER:@ ssh2&lt;/pattern&gt;
                    &lt;/patterns&gt;
                    &lt;examples&gt;
                        &lt;example&gt;
                            &lt;test_message&gt;Accepted password for sampleuser from 10.50.0.247 port 42156 ssh2&lt;/test_message&gt;
                            &lt;test_values&gt;
                                &lt;test_value name="SSH.AUTH_METHOD"&gt;password&lt;/test_value&gt;
                                &lt;test_value name="SSH_USERNAME"&gt;sampleuser&lt;/test_value&gt;
                                &lt;test_value name="SSH_CLIENT_ADDRESS"&gt;10.50.0.247&lt;/test_value&gt;
                                &lt;test_value name="SSH_PORT_NUMBER"&gt;42156&lt;/test_value&gt;
                            &lt;/test_values&gt;
                       &lt;/example&gt;
                    &lt;/examples&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
    &lt;/ruleset&gt;
&lt;/patterndb&gt;</synopsis>
                </example>
            </section>
        </section>
</chapter>
