<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../../xml-stylesheet/pdf/dtd/docbookx.dtd"
 [  <!ENTITY % entities SYSTEM "../syslog-ng-entities.ent">
 %entities;]> 
<chapter id="chapter_configuration">
    <title>Configuring syslog-ng</title>
    <indexterm>
        <primary>configuring syslog-ng</primary>
        <secondary>on Linux/Unix</secondary>
    </indexterm>
    <para>This chapter describes how to configure syslog-ng. </para>
    <section id="config_file">
        <title>The syslog-ng configuration file</title>
        <indexterm significance="preferred">
            <primary>syslog-ng.conf</primary>
        </indexterm>
        <para>The syslog-ng application is configured by editing the
            <filename>syslog-ng.conf</filename> file. Use any regular text editor application to
            modify the file. The precompiled syslog-ng packages include sample configuration files
            as well.</para>
        <para>Every syslog-ng configuration file must begin with a line containing the version
            information of syslog-ng. For syslog-ng version &version;, this line looks like:</para>
        <synopsis>@version:&version;</synopsis>
        <para>Versioning the configuration file was introduced in syslog-ng 3.0. If the configuration file does not contain the version information, syslog-ng assumes
            that the file is for syslog-ng version 2.x. In this case it interprets the configuration
            and sends warnings about the parts of the configuration that should be updated. Version
            3.0 and later will correctly operate with configuration files of version 2.x, but the
            default values of certain parameters have changed since 3.0.</para>
        <para>All identifiers, option names and attributes, and any other strings used in the
            syslog-ng configuration file are case sensitive. Objects must be defined before they are
            referenced in another statement.</para>
        <example>
            <title>A simple configuration file</title>
            <para>The following is a very simple configuration file for syslog-ng: it collects the
                internal messages of syslog-ng and the messages from <parameter>/dev/log</parameter>
                into the <filename>/var/log/messages_syslog-ng.log</filename> file.</para>
            <synopsis>@version:3.0
                
source s_local { unix-stream("/dev/log"); internal(); };

destination d_file {file("/var/log/messages_syslog-ng.log"); };

log { source(s_local); destination(d_file); };</synopsis>
        </example>
        <tip>
            <para>Before activating a new configuration, check that your configuration file is
                syntactically correct using the <command>syslog-ng --syntax-only</command> command.</para>
            <para>To activate the configuration, reload the configuration of syslog-ng using the
                    <command>/etc/init.d/syslog-ng reload</command> command.</para>
        </tip>
        <para>The <filename>syslog-ng.conf</filename> file is
            located under the <filename>/opt/syslog-ng/etc/</filename> directory.</para>
        <note>
            <para>Earlier versions of &abbrev; stored the configuration file in
                different directories, depending on the platform; typically under
                    <filename>/etc/syslog-ng/</filename>.</para>
        </note>
        <!-- <table id="configfile_location">
            <title>The location of syslog-ng.conf on different platforms</title>
            
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Operating System</entry>
                        <entry>Location</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Linux, AIX 5.x</entry>
                        <entry>
                            <filename>/etc/syslog-ng/syslog-ng.conf</filename>
                        </entry>
                    </row>
                    <row>
                        <entry>Solaris, HP-UX, FreeBSD</entry>
                        <entry>
                            <filename>/opt/syslog-ng/syslog-ng.conf</filename>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <note>
            <para>On HP-UX and Solaris operating systems the earlier versions of syslog-ng stored
                the configuration file at
                <filename>/opt/syslog-ng/etc/syslog-ng/syslog-ng.conf</filename>.</para>
        </note> -->        
        <section id="including-config-files">
            <title>Including configuration files</title>
            <indexterm>
                <primary>syslog-ng.conf</primary>
                <secondary>includes</secondary>
            </indexterm>
            <indexterm>
                <primary>configuration file</primary>
                <secondary>including other files</secondary>
            </indexterm>
            <para>The syslog-ng application supports including external files in its configuration
                file, so parts of its configuration can be managed separately. To include the
                contents of a file in the syslog-ng configuration, use the following syntax</para>
            <synopsis>include "filename";</synopsis>
            <para>This imports the entire file into the configuration of syslog-ng, at the location
                of the include statement. If you specify a directory, syslog-ng will try to include
                every file in alphabetic order. When including configuration files, consider the
                following points:</para>
            <itemizedlist>
                <listitem>
                    <para>If an object is defined twice (for example the original syslog-ng configuration
                        file and the file imported into this configuration file both define the same
                        option, source, or other object), then the object that is defined later in
                        the configuration file will be effective. For example, if you set a global
                        option at the beginning of the configuration file, and later include a file
                        that defines the same option with a different value, then the option defined
                        in the imported file will be used.</para>
                </listitem>
                <listitem>
                    <para>Files can be embedded into each other: the included files can contain
                        include statements as well, up to a maximum depth of 15 levels.</para>
                </listitem>
                <listitem>
                    <para>Include statements can only be used at top level of the configuration
                        file. For example, the following is correct:</para>
                    <synopsis>@version:3.0
include "example.conf";</synopsis>
                    <para>But the following is not:</para>
                    <synopsis>source s_example {
    include "example.conf"
     };</synopsis>
                </listitem>
            </itemizedlist>
            <warning>
                <para>The syslog-ng application will not start if it cannot find a file that is to
                    be included in its configuration. Always double-check the filenames, paths, and
                    access rights when including configuration files, and use the
                        <command>--syntax-only</command> command-line option to check your
                    configuration.</para>
            </warning>
        </section>
    </section>

    <section id="defining_global_objects">
        <title>Defining global objects</title>
        <indexterm>
            <primary>global objects</primary>
            <secondary>defining</secondary>
        </indexterm>
        <indexterm>
            <primary>defining global objects</primary>
        </indexterm>
        <para id="global_objects_para1">Global objects (for example sources, destinations, log paths, or
            filters) are defined in the syslog-ng configuration file. Object definitions consist of
            the following elements: </para>
        <itemizedlist id="global_objects_syntax">
            <listitem>
                <para><emphasis>Type of the object</emphasis>: One of <parameter>source</parameter>,
                        <parameter>destination</parameter>, <parameter>log</parameter>,
                        <parameter>filter</parameter>, <parameter>parser</parameter>,
                        <parameter>rewrite</parameter> rule, or
                <parameter>template</parameter>.</para>
            </listitem>
            <listitem>
                <para><emphasis>Identifier of the object</emphasis>: A unique name identifying the
                    object. When using a reserved word as an identifier, enclose the identifier in
                    quotation marks.</para>
                <tip>
                    <para>Use identifiers that refer to the type of the object they identify. For
                        example, prefix source objects with <parameter>s_</parameter>, destinations
                        with <parameter>d_</parameter>, and so on. </para>
                </tip>
            </listitem>
            <listitem>
                <para><emphasis>Parameters</emphasis>: The parameters of the object, enclosed in
                    braces <parameter>{parameters}</parameter>.</para>
            </listitem>
            <listitem>
                <para><emphasis>Semicolon</emphasis>: Object definitions end with a semicolon
                        (<parameter>;</parameter>).</para>
            </listitem>
        </itemizedlist>
        <para id="global_objects_para2">The syntax is summarized as follows:</para>
        <synopsis>type identifier { parameters };</synopsis>
        <para>Objects have parameters; some of them are required, others are optional. Required
            parameters are positional, meaning that they must be specified in a defined order.
            Optional arguments can be specified in any order using the
            <literal>option(value)</literal> format. If a parameter (optional or required) is not
            specified, its default value is used. The parameters and their default values are listed
            in the reference section of the particular object. See <xref linkend="chapter_reference"
            /> for details.</para>
        <example>
            <title>Using required and optional parameters</title>
            <para>The <parameter>unix-stream()</parameter> source driver has a single required
                argument: the name of the socket to listen on. Optional parameters follow the socket
                name in any order, so the following source definitions have the same effect: </para>
            <synopsis>source s_demo_stream1 { 
           unix-stream("/dev/log" max-connections(10) group(log)); };
source s_demo_stream2 { 
           unix-stream("/dev/log" group(log) max-connections(10)); };</synopsis>
        </example>
        <para>To add comments to the configuration file, start a line with <parameter>#</parameter>
            and write your comments. These lines are ignored by syslog-ng.</para>
        <synopsis># Comment: This is a stream source
source s_demo_stream { 
           unix-stream("/dev/log" max-connections(10) group(log)); };</synopsis>
        <section id="configfile_syntax">
            <title>Notes about the configuration syntax</title>
            <para>When you are editing the syslog-ng configuration file, note the following points:</para>
            <itemizedlist>
                <listitem>
                    <para>When writing the names of options and parameters (or other reserved
                        words), the hyphen (<parameter>-</parameter>) and underscore
                        (<parameter>_</parameter>) characters are equivalent, for example
                            <parameter>max-connections(10)</parameter> and
                            <parameter>max_connections(10)</parameter> are both correct.</para>
                </listitem>
                <listitem>
                    <para>Number can be prefixed with <parameter>+</parameter> or
                        <parameter>-</parameter> to indicate positive or negative values. Numbers
                        beginning with zero (<parameter>0</parameter>) or <parameter>0x</parameter>
                        are treated as octal or hexadecimal numbers, respectively.</para>
                </listitem>
                <listitem>
                    <para>You can use commas (<parameter>,</parameter>) to separate options or other
                        parameters for readability; syslog-ng completely ignores them. The following
                        declarations are equivalent:</para>
                    <synopsis>source s_demo_stream { 
                        unix-stream("/dev/log" max-connections(10) group(log)); };</synopsis>
                    <synopsis>source s_demo_stream { 
                        unix-stream("/dev/log", max-connections(10), group(log)); };</synopsis>
                </listitem>
                <listitem>
                    <para>Strings between single quotes (<parameter>'string'</parameter>) are
                        treated literally, you do not have to escape special characters. This makes
                        writing and reading regular expressions much more simple: it is recommended
                        to use single quotes when writing regular expressions.</para>
                </listitem>
                <listitem>
                    <para>When enclosing strings between double-quotes
                        (<parameter>"string"</parameter>), you have to escape special characters:
                        for example when enclosing a regular expression that uses the
                        <parameter>\</parameter> character to escape a special character, you have
                        to add an extra <parameter>\</parameter> (for example
                        <parameter>"\\n"</parameter>). It is recommended to use single quotes
                        instead.</para>
                </listitem>
                <listitem>
                    <para>Enclosing normal strings between double-quotes
                        (<parameter>"string"</parameter>) is not necessary, you can just omit the
                        double-quotes. For example when writing filters,
                        <parameter>match("sometext")</parameter> and
                        <parameter>match(sometext)</parameter> will both match for the
                            <parameter>sometext</parameter> string.</para>
                </listitem>
                <listitem>
                    <para>When enclosing object IDs (for example the name of a destination) between
                        double-quotes (<parameter>"mydestination"</parameter>), the ID can include
                        whitespace as well, for example:</para>
                    <synopsis>source "s demo stream" { 
                        unix-stream("/dev/log" max-connections(10) group(log)); };</synopsis>
                </listitem>
            </itemizedlist>

        </section>

    </section>
    <section id="sources">
        <title>Sources and source drivers</title>
        <indexterm significance="preferred">
            <primary>sources</primary>
        </indexterm>
        <indexterm significance="preferred">
            <primary>source drivers</primary>
        </indexterm>
        <para>A source is where syslog-ng receives log messages. Sources consist of one or more
            drivers, each defining where and how messages are received.</para>
        <para>To define a source, add a source statement to the syslog-ng configuration file using
            the following syntax: <indexterm>
                <primary>destinations</primary>
                <secondary>defining</secondary>
            </indexterm>
            <synopsis>source &lt;identifier&gt; { source-driver(params); source-driver(params); ... };</synopsis>
        </para>
        <example>
            <title>A simple source statement</title>
            <para>The following source statement receives messages on the TCP port
                <parameter>1999</parameter> of the interface having the
                <parameter>10.1.2.3</parameter> IP address.</para>
            <synopsis>source s_demo_tcp { tcp(ip(10.1.2.3) port(1999)); };</synopsis>
        </example>
        <example>
            <title>A source statement using two source drivers</title>
            <para>The following source statement receives messages on the
                <parameter>1999</parameter> TCP port and the <parameter>1999</parameter> UDP port of
                the interface having the <parameter>10.1.2.3</parameter> IP address.</para>
            <synopsis>source s_demo_two_drivers { 
           tcp(ip(10.1.2.3) port(1999)); 
           udp(ip(10.1.2.3) port(1999)); };</synopsis>
        </example>
        <example>
            <title>Setting default priority and facility</title>
            <indexterm>
                <primary>setting facility</primary>
            </indexterm>
            <indexterm>
                <primary>overriding facility</primary>
            </indexterm>
            <para>If the message received by the source does not have a proper syslog header, you
                can use the <parameter>default-facility()</parameter> and
                    <parameter>default-priority()</parameter> options to set the facility and
                priority of the messages. Note that these values are applied only to messages that
                do not set these parameters in their header.</para>
            <synopsis>source headerless_messages { udp(default-facility(syslog) default-priority(emerg)); };</synopsis>
        </example>

        <para>Define a source only once. The same source can be used in several log paths.
            Duplicating sources causes syslog-ng to open the source (TCP/IP port, file, etc.) more
            than once, which might cause problems. For example, include the
            <parameter>/dev/log</parameter> file source only in one source statement, and use this
            statement in more than one log path if needed. </para>
        <para>To collect log messages on a specific platform, it is important to know how the native
                <parameter>syslogd</parameter> communicates on that platform. The following table
            summarizes the operation methods of <parameter>syslogd</parameter> on some of the tested
            platforms:</para>
        <!-- FIXME belevenni a hianyzo, de tamogatott platformokat, es forrasokat pl. AIX, HP-UX, ... 
        osszegyujteni, hogy az egyes platformokon milyen forrasokat kell felvenni ahhoz, 
            hogy a syslog-ng a nativ syslog funkcionalitasat tudja 
        -->
        <table>
            <title>Communication methods used between the applications and syslogd</title>
            <indexterm>
                <primary>sources</primary>
                <secondary>on different platforms</secondary>
            </indexterm>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Platform</entry>
                        <entry>Method</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Linux</entry>
                        <entry>A <parameter>SOCK_STREAM</parameter> unix socket named
                                <parameter>/dev/log</parameter>; some of the distributions switched
                            over to using <parameter>SOCK_DGRAM</parameter>, though applications
                            still work with either method. </entry>
                    </row>
                    <row>
                        <entry>BSD flavors</entry>
                        <entry>A <parameter>SOCK_DGRAM</parameter> unix socket named
                                <parameter>/var/run/log</parameter>.</entry>
                    </row>
                    <row>
                        <entry>Solaris (2.5 or below)</entry>
                        <entry>An SVR4 style <parameter>STREAMS</parameter> device named
                                <parameter>/dev/log</parameter>.</entry>
                    </row>
                    <row>
                        <entry>Solaris (2.6 or above)</entry>
                        <entry>In addition to the <parameter>STREAMS</parameter> device used in
                            earlier versions, 2.6 uses a new multithreaded IPC method called door.
                            By default the door used by <parameter>syslogd</parameter> is
                                <parameter>/etc/.syslog_door</parameter>. </entry>
                    </row>
                    <row>
                        <entry>HP-UX 11 or later</entry>
                        <entry>HP-UX uses a named pipe called <filename>/dev/log</filename> that is
                            padded to 2048 bytes, for example <parameter>source s_hp-ux {pipe ("/dev/log"
                                pad_size(2048)}</parameter>.</entry>
                    </row>
                    <row>
                        <!-- FIXME -->
                        <entry>AIX 5.2 and 5.3</entry>
                        <entry>A <parameter>SOCK_STREAM</parameter> or
                            <parameter>SOCK_DGRAM</parameter> unix socket called
                            <filename>/dev/log</filename>.</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>Each possible communication mechanism has a corresponding source driver in syslog-ng.
            For example, to open a unix socket with <parameter>SOCK_DGRAM</parameter> style
            communication use the driver <parameter>unix-dgram</parameter>. The same socket using
            the <parameter>SOCK_STREAM</parameter> style &mdash; as used under Linux &mdash;
            is called <parameter>unix-stream</parameter>. </para>
        <example>
            <title>Source statement on a Linux based operating system</title>
            <para>The following source statement collects the following log messages:</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis>internal()</emphasis>: Messages generated by syslog-ng.</para>
                </listitem>
                <listitem>
                    <para><emphasis>udp(ip(0.0.0.0) port(514))</emphasis>: Messages arriving to the
                            <parameter>514/UDP</parameter> port of any interface of the host.</para>
                </listitem>
                <listitem>
                    <para><emphasis>unix-stream("/dev/log");</emphasis>: Messages arriving to the
                            <parameter>/dev/log</parameter> socket.</para>
                </listitem>
            </itemizedlist>
            <synopsis>source s_demo { 
           internal(); 
           udp(ip(0.0.0.0) port(514)); 
           unix-stream("/dev/log"); };</synopsis>
        </example>
        <para>The following table lists the source drivers available in syslog-ng.</para>
        <table id="table_source_drivers">
            <title>Source drivers available in syslog-ng</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary>list of</secondary>
            </indexterm>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <link linkend="configuring_sources_internal">internal()</link>
                        </entry>
                        <entry>Messages generated internally in syslog-ng.</entry>
                    </row>


                    <row>
                        <entry>
                            <link linkend="configuring_sources_file">file()</link>
                        </entry>
                        <entry>Opens the specified file and reads messages.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_sources_pipe">pipe(), fifo</link>
                        </entry>
                        <entry>Opens the specified named pipe and reads messages.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_source_program">program()</link>
                        </entry>
                        <entry>Opens the specified application and reads messages from its standard output.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_sources_sunstreams">sun-stream(), sun-streams()</link>
                        </entry>
                        <entry>Opens the specified <parameter>STREAMS</parameter> device on Solaris systems and reads incoming messages.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_sources_syslog">syslog()</link>
                        </entry>
                        <entry>Listens for incoming messages using the new <link linkend="concepts_message_ietfsyslog">IETF-standard syslog protocol</link>.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_sources_tcpudp">tcp(), tcp6()</link>
                        </entry>
                        <entry>Listens on the specified TCP port for incoming messages using the <link linkend="concepts_message_bsdsyslog">BSD-syslog protocol</link> over IPv4 and IPv6 networks, respectively.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_sources_tcpudp">udp(), udp6()</link>
                        </entry>
                        <entry>Listens on the specified UDP port for incoming messages using the <link linkend="concepts_message_bsdsyslog">BSD-syslog protocol</link> over IPv4 and IPv6 networks, respectively.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_sources_unixstream">unix-dgram()</link>
                        </entry>
                        <entry>Opens the specified unix socket in <parameter>SOCK_DGRAM</parameter> mode and listens for incoming messages.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_sources_unixstream">unix-stream()</link>
                        </entry>
                        <entry>Opens the specified unix socket in <parameter>SOCK_STREAM</parameter> mode and listens for incoming messages.</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>For a complete description of the parameters of the above drivers, see <xref
                linkend="reference_sourcedrivers"/>. </para>

        <section id="configuring_sources_internal">
            <title>Collecting internal messages</title>
            <para>All messages generated internally by syslog-ng use this special source. To collect
                warnings, errors and notices from syslog-ng itself, include this source in one of
                your source statements. </para>
            <synopsis>internal()</synopsis>
            <para>The syslog-ng application will issue a warning upon startup if none of the defined
                log paths reference this driver. </para>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_source_internal']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
            <section id="reference_log_statistics">
                <title>Log statistics</title>
                <indexterm>
                    <primary>log statistics</primary>
                </indexterm>
                <indexterm>
                    <primary>statistics</primary>
                </indexterm>
                <para>Periodically, syslog-ng sends a message containing statistics about the
                    received messages, and about any lost messages since the last such message. It
                    includes a <parameter>processed</parameter> entry for every source and
                    destination, listing the number of messages received or sent, and a
                        <parameter>dropped</parameter> entry including the IP address of the server
                    for every destination where syslog-ng has lost messages. The
                        <parameter>center(received)</parameter> entry shows the total number of
                    messages received from every configured sources.</para>
                <para>The following is a sample log statistics message for a configuration that has
                    a single source (<parameter>s_local</parameter>) and a network and a local file
                    destination (<parameter>d_network</parameter> and
                    <parameter>d_local</parameter>, respectively). All incoming messages are sent to
                    both destinations.</para>
                <synopsis>Log statistics;
                    dropped='tcp(AF_INET(192.168.10.1:514))=6439',
                    processed='center(received)=234413',
                    processed='destination(d_tcp)=234413',
                    processed='destination(d_local)=234413',
                    processed='source(s_local)=234413'</synopsis>
                <indexterm>
                    <primary>log statistics</primary>
                    <secondary>on unix-socket</secondary>
                </indexterm>
                <indexterm>
                    <primary>message statistics</primary>
                </indexterm>
                <indexterm>
                    <primary>message</primary>
                    <secondary>statistics</secondary>
                </indexterm>
                <indexterm>
                    <primary>statistics</primary>
                </indexterm>
                <para>Log statistics can be also retrieved on-demand using one of the following options:</para>
                <itemizedlist>
                    <listitem>
                        <para>Use the
                            <command>socat</command> application: <command>echo STATS | socat -vv
                            UNIX-CONNECT:/opt/syslog-ng/var/run/syslog-ng.ctl -</command></para>
                    </listitem>
                    <listitem>
                        <para>If you have an OpenBSD-style
                        <command>netcat</command> application installed, use the <command>echo STATS |
                        nc -U var/run/syslog-ng.ctl</command> command. Note that the <command>netcat</command> included in most Linux distributions is a GNU-style version that is not
                        suitable to query the statistics of syslog-ng.</para>
                    </listitem>
                    <listitem>
                        <para>Starting from &product; version 3.1, &product; includes the syslog-ng-ctl utility. Use the <command>syslog-ng-ctl stats</command> command.</para>
                    </listitem>
                </itemizedlist>
                <para>The statistics include a list of source
                    groups and destinations, as well as the number of processed messages for each.
                    The verbosity of the statistics can be set using the
                    <parameter>stats_level()</parameter> option. See <xref
                        linkend="reference_options"/> for details. An example output is shown below.</para>
                <synopsis>src.internal;s_all#0;;a;processed;6445
src.internal;s_all#0;;a;stamp;1268989330
destination;df_auth;;a;processed;404
destination;df_news_dot_notice;;a;processed;0
destination;df_news_dot_err;;a;processed;0
destination;d_ssb;;a;processed;7128
destination;df_uucp;;a;processed;0
source;s_all;;a;processed;7128
destination;df_mail;;a;processed;0
destination;df_user;;a;processed;1
destination;df_daemon;;a;processed;1
destination;df_debug;;a;processed;15
destination;df_messages;;a;processed;54
destination;dp_xconsole;;a;processed;671
dst.tcp;d_network#0;10.50.0.111:514;a;dropped;5080
dst.tcp;d_network#0;10.50.0.111:514;a;processed;7128
dst.tcp;d_network#0;10.50.0.111:514;a;stored;2048
destination;df_syslog;;a;processed;6724
destination;df_facility_dot_warn;;a;processed;0
destination;df_news_dot_crit;;a;processed;0
destination;df_lpr;;a;processed;0
destination;du_all;;a;processed;0
destination;df_facility_dot_info;;a;processed;0
center;;received;a;processed;0
destination;df_kern;;a;processed;70
center;;queued;a;processed;0
destination;df_facility_dot_err;;a;processed;0</synopsis>
                <para>The statistics are semicolon separated; every line contains statistics for a particular object (for example source, destination, tag, etc.). The statistics have the following fields:</para>
                <orderedlist>
                    <listitem>
                        <para>The type of the object (for example <parameter>dst.file</parameter>, <parameter>tag</parameter>, <parameter>src.facility</parameter>)</para>
                    </listitem>
                    <listitem>
                        <para>The ID of the object used in the syslog-ng configuration file, for example <parameter>d_internal</parameter> or <parameter>source.src_tcp</parameter>. The <parameter>#0</parameter> part means that this is the first destination in the destination group.</para>
                    </listitem>
                    <listitem>
                        <para>The instance ID (destination) of the object, for example the filename of a file destination, or the name of the application for a program source or destination.</para>
                    </listitem>
                    <listitem>
                        <para>The status of the object. One of the following:</para>
                        <itemizedlist>
                            <listitem>
                                <para><parameter>a</parameter> - active. At the time of quering the statistics, the source or the destination was still alive (it continuously received statistical data).</para>
                            </listitem>
                            <listitem>
                                <para><parameter>d</parameter> - dynamic. Such objects may not be continuously available, for example, like statistics based on the sender's hostname.</para>
                            </listitem>
                            <listitem>
                                <para><parameter>o</parameter> - This object was once active, but stopped receiving messages. (For example a dynamic object may disappear and become orphan.)</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>The type of the statistics:</para>
                        <itemizedlist>
                            <listitem>
                                <para><parameter>processed</parameter>: The number of messages that successfully reached their destination.</para>
                            </listitem>
                            <listitem>
                                <para><parameter>dropped</parameter>: The number of dropped messages &mdash; &abbrev; could not send the messages to the destination and the output buffer got full, so messages were lost.</para>
                            </listitem>
                            <listitem>
                                <para><parameter>stored</parameter>: The number of messages stored in the message queue, waiting to be sent to the destination.</para>
                            </listitem>
                            <listitem>
                                <para><parameter>suppressed</parameter>: The number of suppressed messages (if the <parameter>suppress()</parameter> feature is enabled).</para>
                            </listitem>
                            <listitem>
                                <para><parameter>stamp</parameter>: The UNIX timestamp of the last message sent to the destination.</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>The number of such messages.</para>
                    </listitem>
                </orderedlist>
                <note>
                    <para>Note that certain statistics are available only if the <parameter>stats-level()</parameter> option is set to a higher value.</para>
                </note>
            </section>
        </section>
        <section id="configuring_sources_file">
            <title>Collecting messages from text files</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>file()</parameter> driver</secondary>
            </indexterm>
            <para>Collects log messages from plain-text files, for example from the logfiles of an Apache
                webserver.</para>
            <para>The syslog-ng application notices if a file is renamed or replaced with a new
                file, so it can correctly follow the file even if logrotation is used. When
                syslog-ng is restarted, it records the position of the last sent log message, and
                continues to send messages from this position after the restart.</para>
            <para>The file driver has a single required parameter specifying the file to open. For
                the list of available optional parameters, see <xref linkend="reference_source_file"
                />. </para>
            <synopsis>Declaration:
                file(filename);</synopsis>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_source_file']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
            <para>The kernel usually sends log messages to a special file
                (<parameter>/dev/kmsg</parameter> on BSDs, <parameter>/proc/kmsg</parameter> on
                Linux). The <parameter>file()</parameter> driver reads log messages from such files.
                The syslog-ng application can periodically check the file for new log messages if
                the <parameter>follow_freq()</parameter> option is set. </para>
            <note>
                <para>On Linux, the <parameter>klogd</parameter> daemon can be used in addition to
                    syslog-ng to read kernel messages and forward them to syslog-ng.
                        <parameter>klogd</parameter> used to preprocess kernel messages to resolve
                    symbols etc., but as this is deprecated by <parameter>ksymoops</parameter> there
                    is really no point in running both <parameter>klogd</parameter> and syslog-ng in
                    parallel. Also note that running two processes reading
                    <filename>/proc/kmsg</filename> at the same time might result in dead-locks. </para>
                <para>When using syslog-ng to read messages from the <filename>/proc/kmsg</filename>
                    file, syslog-ng automatically disables the <parameter>follow_freq()</parameter>
                    parameter to avoid blocking the file.</para>
            </note>
        </section>
        <section id="configuring_sources_pipe">
            <title>Collecting messages from named pipes</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>pipe()</parameter> driver</secondary>
            </indexterm>
            <para>The pipe driver opens a named pipe with the specified name and listens for
                messages. It is used as the native message delivery protocol on HP-UX.</para>
            <para>The pipe driver has a single required parameter, specifying the filename of the
                pipe to open. For the list of available optional parameters, see <xref
                    linkend="reference_source_pipe"/>.</para>
            <synopsis>Declaration:
                pipe(filename);</synopsis>
            <note>
                <para>As of syslog-ng Open Source Edition 3.0.2, pipes are created automatically. In
                    earlier versions, you had to create the pipe using the
                    <command>mkfifo(1)</command> command. </para>
            </note>
            <para>Pipe is very similar to the <parameter>file()</parameter> driver, but there are a
                few differences, for example <parameter>pipe()</parameter> opens its argument in
                read-write mode, therefore it is not recommended to be used on special files like
                    <filename>/proc/kmsg</filename>.</para>
            <warning>
                <para>It is not recommended to use <parameter>pipe()</parameter> on anything else
                    than real pipes. </para>
            </warning>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_source_pipe']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>
        <section id="configuring_sources_sunstreams">
            <title>Collecting messages on Sun Solaris</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>sun-streams()</parameter> driver</secondary>
            </indexterm>
            <para>Solaris uses its <parameter>STREAMS</parameter> framework to send messages to the
                    <parameter>syslogd</parameter> process. Solaris 2.5.1 and above uses an IPC
                called <emphasis>door</emphasis> in addition to <parameter>STREAMS</parameter>, to
                confirm the delivery of a message. The syslog-ng application supports the IPC
                mechanism via the <parameter>door()</parameter> option (see below).</para>
            <note>
                <para>The <parameter>sun-streams()</parameter> driver must be enabled when the
                    syslog-ng application is compiled (see <command>./configure --help</command>).</para>
            </note>
            <para>The <parameter>sun-streams()</parameter> driver has a single required argument
                specifying the <parameter>STREAMS</parameter> device to open, and the
                    <parameter>door()</parameter> option. For the list of available optional
                parameters, see <xref linkend="reference_source_sunstreams"/>.</para>
            <synopsis>Declaration:
        sun-streams(name_of_the_streams_device door(filename_of_the_door));</synopsis>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_source_sunstreams']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>
        <section id="configuring_sources_syslog">
            <title>Collecting messages using the IETF syslog protocol</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>syslog()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>syslog()</parameter> driver enables to receive messages from the
                network using the new standard syslog protocol and message format (also called
                IETF-syslog protocol; described in RFC 5424-28, see <xref
                    linkend="concepts_message_ietfsyslog"/>). UDP, TCP, and TLS-encrypted TCP can
                all be used to transport the messages.</para>
            <indexterm>
                <primary>TLS</primary>
            </indexterm>
            <para>For the list of available optional parameters, see <xref
                    linkend="reference_source_syslog"/>.</para>
            <!-- FIXME mi a kotelezo parameter? -->
            <synopsis>Declaration:
            syslog(ip() port() transport() options());</synopsis>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_source_syslog']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>
        <section id="configuring_sources_tcpudp">
            <title>Collecting messages from remote hosts using the BSD syslog protocol</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>tcp()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>tcp6()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>udp()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>udp6()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>tcp()</parameter>, <parameter>tcp6()</parameter>,
                <parameter>udp()</parameter>, <parameter>udp6()</parameter> drivers can receive
                messages from the network using the TCP and UDP networking protocols. The
                    <parameter>tcp6()</parameter> and <parameter>udp6()</parameter> drivers use the
                IPv6 network protocol, while <parameter>tcp()</parameter> and
                <parameter>udp()</parameter> use IPv4.</para>
            <para>UDP is a simple datagram oriented protocol, which provides "best effort service"
                to transfer messages between hosts. It may lose messages, and no attempt is made at
                the protocol level to retransmit such lost messages. The <emphasis>
                    <link linkend="concepts_message_bsdsyslog">BSD-syslog</link>
                </emphasis> protocol traditionally uses UDP.</para>
            <para>TCP provides connection-oriented service, which basically means that the path of
                the messages is flow-controlled. Along this path, each message is acknowledged, and
                retransmission is done for lost packets. Generally it is safer to use TCP, because
                lost connections can be detected, and no messages get lost, assuming that the TCP
                connection does not break. When a TCP connection is broken the 'in-transit' messages
                that were sent by syslog-ng but not yet received on the other side are lost.
                (Basically these messages are still sitting in the socket buffer of the sending host
                and syslog-ng has no information about the fate of these messages). </para>
            <para>The <parameter>tcp()</parameter> and <parameter>udp()</parameter> drivers do not
                have any required parameters. By default they bind to the
                <parameter>0.0.0.0:514</parameter> address, which means that syslog-ng will listen
                on all available interfaces, port 514. To limit accepted connections to only one
                interface, use the <parameter>localip()</parameter> parameter as described below.
                For the list of available optional parameters, see <xref
                    linkend="reference_source_tcpudp"/>.</para>
            <synopsis>Declaration:
                tcp([options]);
                udp([options]);</synopsis>
            <note>
                <para>The tcp port 514 is reserved for use with <command>rshell</command>, so select
                    a different port if syslog-ng and <command>rshell</command> is used at the same
                    time. </para>
            </note>
            <para>If you specify a multicast bind address to <parameter>udp()</parameter> and
                    <parameter>udp6()</parameter>, syslog-ng will automatically join the necessary
                multicast group. TCP does not support multicasting. </para>
            <para>The syslog-ng application supports TLS (Transport Layer Security,
                also known as SSL) for the tcp() and tcp6() drivers. See the TLS-specific options
                below and <xref linkend="tls_serverauth"/> for details. For the list of available
                optional parameters, see <xref linkend="reference_source_tcpudp"/>.</para>
            <tip><para>The <parameter>syslog()</parameter> driver also supports TLS-encrypted 
                       connections.</para></tip>
            <indexterm>
                <primary>TLS</primary>
            </indexterm>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_source_tcpudp']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>
        <section id="configuring_sources_unixstream">
            <title>Collecting messages from UNIX domain sockets</title>
            <para>The <parameter>unix-stream()</parameter> and <parameter>unix-dgram()</parameter>
                drivers open an <parameter>AF_UNIX</parameter> socket and start listening on it for
                messages. The <parameter>unix-stream()</parameter> driver is primarily used on Linux
                and uses <parameter>SOCK_STREAM</parameter> semantics (connection oriented, no
                messages are lost); while <parameter>unix-dgram()</parameter> is used on BSDs and
                uses <parameter>SOCK_DGRAM</parameter> semantics: this may result in lost local
                messages if the system is overloaded. </para>
            <para>To avoid denial of service attacks when using connection-oriented protocols, the
                number of simultaneously accepted connections should be limited. This can be
                achieved using the <parameter>max-connections()</parameter> parameter. The default
                value of this parameter is quite strict, you might have to increase it on a busy
                system. </para>
            <para>Both unix-stream and unix-dgram have a single required argument that specifies the
                filename of the socket to create. For the list of available optional parameters, see
                    <xref linkend="reference_source_unixstream"/></para>
            <synopsis>Declaration: 
                unix-stream(filename [options]);
                unix-dgram(filename [options]);</synopsis>
            <note>
                <para><parameter>syslogd</parameter> on Linux originally used
                    <parameter>SOCK_STREAM</parameter> sockets, but some distributions switched to
                        <parameter>SOCK_DGRAM</parameter> around 1999 to fix a possible DoS problem.
                    On Linux you can choose to use whichever driver you like as syslog clients
                    automatically detect the socket type being used. </para>
            </note>
            <para>The difference between the unix-stream and unix-dgram drivers is similar to the
                difference between the TCP and UDP network protocols. Use the following guidelines
                to select which driver to use in a particular situation:</para>
            <para>Choose unix-stream if you would choose TCP (stream) instead of UDP (datagram). The
                unix-stream driver offers the following features:</para>
            <itemizedlist>
                <listitem>
                    <para>Increased reliability</para>
                </listitem>
                <listitem>
                    <para>Ordered delivery of messages</para>
                </listitem>
                <listitem>
                    <para>Client-side notification of failures</para>
                </listitem>
            </itemizedlist>
            <para>Choose unix-dgram if you would choose TCP (stream) over UDP (datagram). The
                unix-dgram driver offers the following features:</para>
            <itemizedlist>
                <listitem>
                    <para>Decreased possibility of Dos by opening too many connections (a local
                        vulnerability)</para>
                </listitem>
                <listitem>
                    <para>Less overhead</para>
                </listitem>
            </itemizedlist>
            <para>However, the client does not notice if a message is lost when using the unix-dgram
                driver.</para>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_source_unixstream']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>

    </section>
    <section id="destinations">
        <title>Destinations and destination drivers</title>
        <indexterm significance="preferred">
            <primary>destinations</primary>
        </indexterm>
        <indexterm significance="preferred">
            <primary>destination drivers</primary>
        </indexterm>
        <para>A destination is where a log message is sent if the filtering rules match. Similarly
            to sources, destinations consist of one or more drivers, each defining where and how
            messages are sent.</para>
        <tip>
            <para>If no drivers are defined for a destination, all messages sent to the destination
                are discarded. This is equivalent to omitting the destination from the log
                statement.</para>
        </tip>
        <para>To define a destination, add a destination statement to the syslog-ng configuration
            file using the following syntax: <indexterm>
                <primary>destinations</primary>
                <secondary>defining</secondary>
            </indexterm>
            <synopsis>destination &lt;identifier&gt; { 
                destination-driver(params); destination-driver(params); ... };</synopsis>
        </para>
        <example>
            <title>A simple destination statement</title>
            <para>The following destination statement sends messages to the TCP port
                <parameter>1999</parameter> of the <parameter>10.1.2.3</parameter> host.</para>
            <synopsis>destination d_demo_tcp { tcp("10.1.2.3" port(1999)); };</synopsis>
            <para>If name resolution is configured, the hostname of the target server can be used as
                well.</para>
            <synopsis>destination d_tcp { tcp("target_host" port(1999); localport(999)); };</synopsis>
        </example>
        <para>The following table lists the destination drivers available in syslog-ng.</para>
        <table id="table_destination_drivers">
            <title>Destination drivers available in syslog-ng</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary>list of</secondary>
            </indexterm>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <link linkend="configuring_destinations_file">file()</link>
                        </entry>
                        <entry>Writes messages to the specified file.</entry>
                    </row>                    
                    <row>
                        <entry>
                            <link linkend="configuring_destinations_pipe">fifo(), pipe()</link>
                        </entry>
                        <entry>Writes messages to the specified named pipe.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_destinations_program">program()</link>
                        </entry>
                        <entry>Forks and launches the specified program, and sends messages to its standard input.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_destinations_sql">sql()</link>
                        </entry>
                        <entry>Sends messages into an SQL database. In addition to the standard syslog-ng packages, the <parameter>sql()</parameter> destination requires database-specific packages to be installed. Refer to the section appropriate for your platform in <xref linkend="chapter_install"/>.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_destinations_syslog">syslog()</link>
                        </entry>
                        <entry>Sends messages to the specified remote host using the <link linkend="concepts_message_ietfsyslog">IETF-syslog protocol</link>. The IETF standard supports message transport using the UDP, TCP, and TLS networking protocols.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_destinations_tcpudp">tcp() and tcp6()</link>
                        </entry>
                        <entry>Sends messages to the specified TCP port of a remote host using the <link linkend="concepts_message_bsdsyslog">BSD-syslog protocol</link> over IPv4 and IPv6, respectively.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_destinations_tcpudp">udp() and udp6()</link>
                        </entry>
                        <entry>Sends messages to the specified UDP port of a remote host using the <link linkend="concepts_message_bsdsyslog">BSD-syslog protocol</link> over IPv4 and IPv6, respectively.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_destinations_unixstream">unix-dgram()</link>
                        </entry>
                        <entry>Sends messages to the specified unix socket in <parameter>SOCK_DGRAM</parameter> style (BSD).</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="configuring_destinations_unixstream">unix-stream()</link>
                        </entry>
                        <entry>Sends messages to the specified unix socket in <parameter>SOCK_STREAM</parameter> style (Linux).</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_usertty">usertty()</link>
                        </entry>
                        <entry>Sends messages to the terminal of the specified user, if the user is logged in.</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>For detailed list of driver parameters, see <xref
                linkend="reference_destinationdrivers"/>. </para>
        <section id="configuring_destinations_file">
            <title>Storing messages in plain-text files</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>file()</parameter> driver</secondary>
            </indexterm>
            <para>The file driver is one of the most important destination drivers in syslog-ng. It
                allows to output messages to the specified text file, or to a set of files. </para>
            <para>The destination filename may include macros which get expanded when the message is
                written, thus a simple <parameter>file()</parameter> driver may create several
                files. For more information on available macros see <xref linkend="reference_macros"
                />. </para>
            <para>If the expanded filename refers to a directory which does not exist, it will be
                created depending on the <parameter>create_dirs()</parameter> setting (both global
                and a per destination option).</para>
            <para>The <parameter>file()</parameter> has a single required parameter that specifies
                the filename that stores the log messages. For the list of available optional
                parameters, see <xref linkend="reference_destination_file"/>.</para>
            <synopsis>Declaration:
                file(filename options());</synopsis>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_file']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_file_macro']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
            <note>
                <para>When using the <parameter>file()</parameter> destination, update the
                    configuration of your log rotation program to rotate these files. Otherwise, the
                    log files can become very large.</para>
            </note>
            <warning>
                <para>Since the state of each created file must be tracked by syslog-ng, it consumes
                    some memory for each file. If no new messages are written to a file within 60
                    seconds (controlled by the <parameter>time_reap()</parameter> global option), it
                    is closed, and its state is freed. </para>
                <para>Exploiting this, a DoS attack can be mounted against the system. If the number
                    of possible destination files and its needed memory is more than the amount
                    available on the syslog-ng server. </para>
                <para>The most suspicious macro is <parameter>$PROGRAM</parameter>, where the number
                    of possible variations is rather high. Do not use the
                    <parameter>$PROGRAM</parameter> macro in insecure environments.</para>
            </warning>
        </section>
        <section id="configuring_destinations_pipe">
            <title>Sending messages to named pipes</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>pipe()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>pipe()</parameter> driver sends messages to a named pipe like
                    <filename>/dev/xconsole</filename>. </para>
            <para>The pipe driver has a single required parameter, specifying the filename of the
                pipe to open. The filename can include macros. For the list of available optional
                parameters, see <xref linkend="reference_destination_pipe"/>.</para>
            <synopsis>Declaration:
                pipe(filename);</synopsis>
            <warning>
                <para>As of syslog-ng Open Source Edition 3.0.2, pipes are created automatically. In
                    earlier versions, you had to create the pipe using the
                    <command>mkfifo(1)</command> command. </para>
            </warning>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_pipe']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>
        <section id="configuring_destinations_program">
            <title>Sending messages to external applications</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>program()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>program()</parameter> driver starts an external application or
                script and sends the log messages to its standard input
                (<parameter>stdin</parameter>). </para>
            <para>The <parameter>program()</parameter> driver has a single required parameter,
                specifying a program name to start. The program is executed with the help of the
                current shell, so the command may include both file patterns and I/O redirections.
                For the list of available optional parameters, see <xref
                    linkend="reference_destination_program"/>.</para>
            <synopsis>Declaration: 
                program(command_to_run);</synopsis>
            <note>
                <para>The syslog-ng application automatically restarts the external program if it
                    exits for reliability reasons. However it is not recommended to launch programs
                    for single messages, because if the message rate is high, launching several
                    instances of an application might overload the system, resulting in Denial of
                    Service. </para>
            </note>
            <para>Note that the message format does not include the priority and facility values by
                default. To add these values, specify a template for the program destination, as
                shown in the following example.</para>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_program']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>
        <section id="configuring_destinations_sql">
            <title>Storing messages in an SQL database</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>sql()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary>database driver</secondary>
            </indexterm>
            <para>The <parameter>sql()</parameter> driver sends messages into an SQL database.
                Currently the Microsoft SQL (MSSQL), MySQL, Oracle, PostgreSQL, and SQLite databases
                are supported.</para>
            <para>The <parameter>sql()</parameter> driver has the following required parameters:</para>
            <simplesect>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//simplesect[@id = 'sql_option_type']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//simplesect[@id = 'sql_option_database']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//simplesect[@id = 'sql_option_table']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//simplesect[@id = 'sql_option_columns']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <simplesect>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//simplesect[@id = 'sql_option_values']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </simplesect>
            <para>For the list of available optional parameters, see <xref
                    linkend="reference_destination_sql"/>.</para>
            <synopsis>Declaration: 
    sql(database_type host_parameters database_parameters [options]);</synopsis>
            <warning>
                <para>The syslog-ng application requires read and write access to the SQL table,
                    otherwise it cannot verify that the destination table exists.</para>
                <para>Currently the syslog-ng application has default schemas for the different
                    databases and uses these defaults if the database schema (for example columns and
                    column types) is not defined in the configuration file. However, these schemas
                    will be deprecated and specifying the exact database schema will be required in
                    later versions of syslog-ng. </para>
            </warning>
            <note>
                <para>In addition to the standard syslog-ng packages, the
                    <parameter>sql()</parameter> destination requires database-specific packages to
                    be installed. These packages are automatically installed by the binary syslog-ng
                    installer.</para>
                <para>The <parameter>sql()</parameter> driver is currently not available for every
                    platform that is supported by syslog-ng. For a list of platforms that support
                    the <parameter>sql()</parameter> driver, visit <ulink
                        url="http://www.balabit.com/network-security/syslog-ng/central-syslog-server/"
                        >http://www.balabit.com/network-security/syslog-ng/central-syslog-server/</ulink>.</para>
            </note>
            <para>The <parameter>table</parameter> and <parameter>value</parameter> parameters can
                include macros to create tables and columns dynamically (see <xref
                    linkend="reference_macros"/> for details).</para>
            <warning>
                <para>When using macros in table names, note that some databases limit the maximum
                    allowed length of table names. Consult the documentation of the database for
                    details.</para>
            </warning>
            <para>Inserting the records into the database is performed by a separate thread. The
                syslog-ng application automatically performs the escaping required to insert the
                messages into the database. </para>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_sql']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
            <section id="configuring_sql_oracle">
                <title>Using the sql() driver with an Oracle database</title>
                <indexterm>
                    <primary>Oracle</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <para>The Oracle sql destination has some special aspects that are important to
                    note.</para>
                <itemizedlist>
                    <listitem>
                        <para>The hostname of the database server is set in the
                                <filename>tnsnames.ora</filename> file, not in the
                            <parameter>host</parameter> parameter of the
                            <parameter>sql()</parameter> destination.</para>
                        <para>Make sure to set the Oracle-related environment variables properly, so
                            syslog-ng and the Oracle client will find the file. The following
                            variables must be set: <parameter>ORACLE_BASE</parameter>,
                                <parameter>ORACLE_HOME</parameter>, and
                            <parameter>ORACLE_SID</parameter>. See the documentation of the Oracle
                            Instant Client for details. </para>
                    </listitem>
                    <listitem>
                        <para>As certain database versions limit the maximum length of table names,
                            macros in the table names should be used with care.</para>
                    </listitem>
                    <listitem>
                        <!-- FIXME kiszedni, ha megjavul -->
                        <para>In the current version of syslog-ng PE, the types of database columns
                            must be explicitly set for the Oracle destination. The column used to
                            store the text part of the syslog messages should be able to store
                            messages as long as the longest message permitted by syslog-ng,
                            therefore it is usually recommended to use the
                            <parameter>varchar2</parameter> or <parameter>clob</parameter> column
                            type. (The maximum length of the messages can be set using the
                                <parameter>log_msg_size()</parameter> option.) See the following
                            example for details.</para>
                    </listitem>
                </itemizedlist>
                <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_sql_oracle']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                </example>
            </section>

            <section id="configuring_sql_mssql">
                <title>Using the sql() driver with a Microsoft SQL database</title>
                <indexterm>
                    <primary>Microsoft SQL</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <indexterm>
                    <primary>MSSQL</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <para>The <parameter>mssql</parameter> database driver can access Microsoft SQL
                    (MSSQL) destinations. This driver has some special aspects that are important to
                    note.</para>
                <itemizedlist>
                    <listitem>
                        <para>The date format used by the MSSQL database must be explicitly set in
                            the <filename>/etc/locales.conf</filename> file of the syslog-ng server.
                            See the following example for details.</para>
                    </listitem>
                    <listitem>
                        <para>As certain database versions limit the maximum length of table names,
                            macros in the table names should be used with care.</para>
                    </listitem>
                    <listitem>
                        <!-- FIXME kiszedni, ha megjavul -->
                        <para>In the current version of syslog-ng PE, the types of database columns
                            must be explicitly set for the MSSQL destination. The column used to
                            store the text part of the syslog messages should be able to store
                            messages as long as the longest message permitted by syslog-ng. The
                                <parameter>varchar</parameter> column type can store maximum 4096
                            bytes-long messages. The maximum length of the messages can be set using
                            the <parameter>log_msg_size()</parameter> option. See the following
                            example for details.</para>
                    </listitem>
                    <listitem>
                        <para>Remote access for SQL users must be explicitly enabled on the
                            Microsoft Windows host running the Microsoft SQL Server. See <xref
                                linkend="configure_mssql_server"/> for details.</para>
                    </listitem>
                </itemizedlist>
                <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_sql_mssql']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                </example>
            </section>
        </section>
        <section id="configuring_destinations_syslog">
            <title>Sending messages to a remote logserver using the IETF-syslog protocol</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>syslog()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>syslog()</parameter> driver sends messages to a remote host (for example
                a syslog-ng server or relay) on the local intranet or internet using the new
                standard syslog protocol developed by IETF (see <xref
                    linkend="concepts_message_ietfsyslog"/> for details about the new protocol). The
                protocol supports sending messages using the UDP, TCP, or the encrypted TLS
                networking protocols.</para>
            <para>The required arguments of the driver are the address of the destination host
                (where messages should be sent). The transport method (networking protocol) is
                optional, syslog-ng uses the TCP protocol by default. For the list of available
                optional parameters, see <xref linkend="reference_destination_syslog"/>.</para>
            <synopsis>Declaration:
                syslog(host transport [options]);</synopsis>
            <note>
                <para>Note that the <parameter>syslog</parameter> destination driver has required
                    parameters, while the source driver defaults to the local bind address, and
                    every parameter is optional. </para>
            </note>
            <para>The <parameter>udp</parameter> transport method automatically sends multicast
                packets if a multicast destination address is specified. The
                <parameter>tcp</parameter> and <parameter>tls</parameter> methods do not support
                multicasting.</para>
            <note>
                <para>The default ports for the different transport protocols are as follows: UDP
                    &mdash; 514; TLS &mdash; 6514.</para>
                <!-- FIXME mi a syslog-TCP default portja? -->
            </note>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_syslog']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>
        <section id="configuring_destinations_tcpudp">
            <title>Sending messages to a remote logserver using the legacy BSD-syslog protocol</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>tcp()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>tcp6()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>udp()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>udp6()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>tcp()</parameter>, <parameter>tcp6()</parameter>,
                <parameter>udp()</parameter>, and <parameter>udp6()</parameter> drivers send
                messages to another host (for example a syslog-ng server or relay) on the local intranet
                or internet using the UDP or TCP protocol. The <parameter>tcp6()</parameter> and
                    <parameter>udp6()</parameter> drivers use the IPv6 network protocol.</para>
            <para>All four drivers have a single required parameter specifying the destination host
                address, where messages should be sent. For the list of available optional
                parameters, see <xref linkend="reference_destination_tcpudp"/>.</para>
            <para>The <parameter>udp()</parameter> and <parameter>udp6()</parameter> drivers
                automatically send multicast packets if a multicast destination address is
                specified. The <parameter>tcp()</parameter> and <parameter>tcp6()</parameter>
                drivers do not support multicasting.</para>
            <synopsis>Declaration:
                tcp(host [options]);
                udp(host [options]);
                tcp6(host [options]);
                udp6(host [options]);</synopsis>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_tcpudp']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>
        <section id="configuring_destinations_unixstream">
            <title>Sending messages to UNIX domain sockets</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>unix-stream()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>unix-dgram()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>unix-stream()</parameter> and <parameter>unix-dgram()</parameter>
                drivers send messages to a UNIX domain socket in either
                <parameter>SOCK_STREAM</parameter> or <parameter>SOCK_DGRAM</parameter> mode. </para>
            <para>Both drivers have a single required argument specifying the name of the socket to
                connect to. For the list of available optional parameters, see <xref
                    linkend="reference_destination_unixstream"/>.</para>
            <synopsis>Declaration: 
                unix-stream(filename [options]);
                unix-dgram(filename [options]);</synopsis>
            <example>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//example[@id = 'example_destination_unixstream']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </example>
        </section>
        <section>
                    <xi:include href="chapter_reference.xml" xpointer="xpointer(//section[@id = 'reference_destination_usertty']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </section>
    </section>


    <section id="options">
        <title>Configuring global syslog-ng options</title>
        <indexterm significance="preferred">
            <primary>global options</primary>
        </indexterm>
        <para id="options_para1">The syslog-ng application has a number of global options governing
            DNS usage, the timestamp format used, and other general points. Each option may have
            parameters, similarly to driver specifications. To set global options, add an option
            statement to the syslog-ng configuration file using the following syntax:</para>
        <synopsis id="options_synopsis">options { option1(params); option2(params); ... };</synopsis>
        <example>
            <title>Using global options</title>
            <para>To disable domain name resolving, add the following line to the syslog-ng
                configuration file:</para>
            <synopsis>options { use_dns(no); };</synopsis>
        </example>
        <para>For a detailed list of the available options, see <xref linkend="reference_options"/>.
            See <xref linkend="chapter_examples"/> for important global options and recommendations
            on their use.</para>
    </section>

    <section id="configure_clients">
        <title>Configuring syslog-ng clients</title>
        <indexterm>
            <primary>syslog-ng clients</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <para>To configure syslog-ng on a client host, complete the following steps:</para>
        <procedure>
            <title>Configuring syslog-ng on client hosts</title>
            <step>
                <para>Install the syslog-ng application on the host. See <xref
                        linkend="chapter_install"/> for details installing syslog-ng on specific
                    operating systems.</para>
            </step>
            <step>
                <para>Configure the local sources that collect the log messages of the host.</para>
            </step>
            <step>
                <para>Create a network destination that points directly to the syslog-ng server, or
                    to a local relay.</para>
            </step>
            <step>
                <para>Create a log statement connecting the local sources to the syslog-ng server or
                    relay.</para>
            </step>
            <step>
                <para>If the logs will also be stored locally on the host, create local file
                    destinations.</para>
            </step>
            <step>
                <para>Create a log statement connecting the local sources to the file
                destination.</para>
            </step>
            <step>
                <para>Set filters and options (for example TLS encryption) as necessary.</para>
            </step>
        </procedure>
        <example id="example_clientconfig">
            <title>A simple configuration for clients</title>
            <para>The following is a simple configuration file that collects local log messages and
                forwards them to a logserver using the IETF-syslog protocol.</para>
            <synopsis>@version:3.0
               
options { 
            mark_freq(30);
        };
                
source s_local { unix-stream("/dev/log"); internal(); };
 
destination d_syslog_tcp {
             syslog("192.168.1.1" transport("tcp") port(2010));
        };
                
log { source(s_local);destination(d_syslog_tcp); };</synopsis>
        </example>

    </section>

    <section id="configure_relays">
        <title>Configuring syslog-ng relays</title>
        <indexterm>
            <primary>syslog-ng relays</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <para>To configure syslog-ng on a relay host, complete the following steps:</para>
        <procedure>
            <title>Configuring syslog-ng on relay hosts</title>
            <step>
                <para>Install the syslog-ng application on the host. See <xref
                        linkend="chapter_install"/> for details installing syslog-ng on specific
                    operating systems.</para>
            </step>
            <step>
                <para>Configure the network sources that collect the log messages sent by the
                    clients.</para>
            </step>
            <step>
                <para>Create a network destination that points to the syslog-ng server.</para>
            </step>
            <step>
                <para>Create a log statement connecting the network sources to the syslog-ng
                server.</para>
            </step>
            <step>
                <para>Configure the local sources that collect the log messages of the relay
                host.</para>
            </step>
            <step>
                <para>Create a log statement connecting the local sources to the syslog-ng
                server.</para>
            </step>
            <step>
                <para>Set filters and options (for example TLS encryption) as necessary.</para>
                <note>
                    <xi:include href="reference_common.xml" xpointer="xpointer(//note[@id = 'note-relaying-hostname']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                </note>
            </step>
        </procedure>
        <para>In relay mode, syslog-ng cannot write messages received from network sources into
            files; the <parameter>file()</parameter> destination is disabled. The following sources
            are network sources: <parameter>syslog()</parameter>, <parameter>tcp()</parameter>,
                <parameter>tcp6()</parameter>, <parameter>udp()</parameter>,
            <parameter>udp6()</parameter>.</para>
        <example id="example_relayconfig">
            <title>A simple configuration for relays</title>
            <para>The following is a simple configuration file that collects local and incoming log
                messages and forwards them to a logserver using the IETF-syslog protocol.</para>
            <synopsis>@version:3.0
                
                options { 
                mark_freq(30);
                keep_hostname(yes);                
                };
                
                source s_local { unix-stream("/dev/log"); internal(); };
                source s_network { syslog(transport(tcp))};
                
                destination d_syslog_tcp {
                syslog("192.168.1.5" transport("tcp") port(2010)
                );
                };
                
                log { source(s_local); source(s_network); 
                      destination(d_syslog_tcp); };</synopsis>
        </example>
    </section>

    <section id="configure_servers">
        <title>Configuring syslog-ng servers</title>
        <indexterm>
            <primary>syslog-ng servers</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <para>To configure syslog-ng on a server host, complete the following steps:</para>
        <procedure>
            <title>Configuring syslog-ng on server hosts</title>
            <step>
                <para>Install the syslog-ng application on the host. See <xref
                        linkend="chapter_install"/> for details installing syslog-ng on specific
                    operating systems.</para>
            </step>
            <step>
                <para>Configure the network sources that collect the log messages sent by the
                    clients and relays.</para>
            </step>
            <step>
                <para>Create local destinations that will store the log messages, for example files or
                    programs.</para>
            </step>
            <step>
                <para>Create a log statement connecting the network sources to the local
                    destinations.</para>
            </step>
            <step>
                <para>Configure the local sources that collect the log messages of the syslog-ng
                    server.</para>
            </step>
            <step>
                <para>Create a log statement connecting the local sources to the local
                destinations.</para>
            </step>
            <step>
                <para>Set filters, options (for example TLS encryption) and other advanced features as
                    necessary.</para>
                <note>
                    <xi:include href="reference_common.xml" xpointer="xpointer(//note[@id = 'note-relaying-hostname']/node() )" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                </note>
            </step>
        </procedure>
        <example id="example_serverconfig">
            <title>A simple configuration for servers</title>
            <para>The following is a simple configuration file for &product; that
                collects incoming log messages and stores them in a text file.</para>
            <synopsis>@version:3.0
    options { 
        time_reap(30);
        mark_freq(10);
        keep_hostname(yes);
        };
                
    source s_local { unix-stream("/dev/log"); internal();};                
    source s_network { syslog(transport(tcp))};
                
    destination d_logs { 
        file(
            "/var/log/syslog-ng/logs.txt"
            owner("root")
            group("root")
            perm(0777)
            ); };
                
    log { source(s_local); source(s_network); destination(d_logs); };</synopsis>
        </example>
    </section>
</chapter>
