<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../../xml-stylesheet/pdf/dtd/docbookx.dtd"
 [  <!ENTITY % entities SYSTEM "../syslog-ng-entities.ent">
 %entities;]> 
<chapter id="chapter_configuration">
    <title>Configuring syslog-ng</title>
    <indexterm>
        <primary>configuring syslog-ng</primary>
        <secondary>on Linux/Unix</secondary>
    </indexterm>
    <para>This chapter describes how to configure syslog-ng. </para>
    <section id="config_file">
        <title>The syslog-ng configuration file</title>
        <indexterm significance="preferred">
            <primary>syslog-ng.conf</primary>
        </indexterm>
        <para>The syslog-ng application is configured by editing the
            <filename>syslog-ng.conf</filename> file. Use any regular text editor application to
            modify the file. The precompiled syslog-ng packages include sample configuration files
            as well.</para>
        <para>Every syslog-ng configuration file must begin with a line containing the version
            information of syslog-ng. For syslog-ng version 3.0, this line looks like:</para>
        <synopsis>@version:3.0</synopsis>
        <para>If the configuration file does not contain the version information, syslog-ng assumes
            that the file is for syslog-ng version 2.x. In this case it interprets the configuration
            and sends warnings about the parts of the configuration that should be updated. Version
            3.0 of syslog-ng will correctly operate with configuration files of version 2.x, but
            many new features of version 3.0 will not be available.</para>
        <para>All identifiers, option names and attributes, and any other strings used in the
            syslog-ng configuration file are case sensitive. Objects must be defined before they are
            referenced in another statement.</para>
        <example>
            <title>A simple configuration file</title>
            <para>The following is a very simple configuration file for syslog-ng: it collects the
                internal messages of syslog-ng and the messages from <parameter>/dev/log</parameter>
                into the <filename>/var/log/messages_syslog-ng.log</filename> file.</para>
            <synopsis>@version:3.0
source s_local { unix-stream("/dev/log"); internal(); };
                
destination d_file_normal {file("/var/log/messages_syslog-ng.log"); };
                
log { source(s_local); destination(d_file); };</synopsis>
        </example>
        <para>The following table lists the location of the <filename>syslog-ng.conf</filename> file
            on the different platforms. The <filename>license.txt</filename> license file is also
            located here.</para>
        <table id="configfile_location">
            <title>The location of syslog-ng.conf on different platforms</title>
            <indexterm>
                <primary>syslog-ng.conf</primary>
                <secondary>location of</secondary>
            </indexterm>
            <indexterm>
                <primary>license</primary>
                <secondary>location of</secondary>
            </indexterm>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Operating System</entry>
                        <entry>Location</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Linux, AIX 5.x</entry>
                        <entry>
                            <filename>/etc/syslog-ng/syslog-ng.conf</filename>
                        </entry>
                    </row>
                    <row>
                        <entry>Solaris, HP-UX, FreeBSD</entry>
                        <entry>
                            <filename>/opt/syslog-ng/syslog-ng.conf</filename>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <note>
            <para>On HP-UX and Solaris operating systems the earlier versions of syslog-ng stored
                the configuration file at
                <filename>/opt/syslog-ng/etc/syslog-ng/syslog-ng.conf</filename>.</para>
        </note>
        <para>On Microsoft Windows platforms the syslog-ng agent stores its configuration in the
            system registry, and can be configured from a graphical interface. See <xref
                linkend="chapter_windows"/> for details.</para>
        <section id="logchk">
            <title>Logging configuration changes</title>
            <indexterm>
                <primary>syslog-ng.conf</primary>
                <secondary>fingerprint</secondary>
            </indexterm>
            <indexterm>
                <primary>configuration file</primary>
                <secondary>detecting changes</secondary>
            </indexterm>
            <para>Every time syslog-ng is started, or its configuration is reloaded, it
                automatically logs the SHA-1 fingerprint of its configuration file using the
                    <parameter>internal</parameter> message source.<!-- FIXME link es indexek -->
                That way any modification of the configuration of your syslog-ng clients is visible
                in the central logs. Note that the log message does not contain the exact change,
                nor can the configuration file be retrieved from the fingerprint. Only the fact of
                the configuration change can be detected.</para>
            <para>The fingerprint can be examined with the <command>logcheck</command> command-line
                application, which detects that the fingerprint was indeed generated by a syslog-ng
                application.</para>
            <!-- FIXME logcheck pelda, pontosan hogyan kell hasznalni  -->
        </section>

    </section>

    <section id="defining_global_objects">
        <title>Defining global objects</title>
        <indexterm>
            <primary>global objects</primary>
            <secondary>defining</secondary>
        </indexterm>
        <indexterm>
            <primary>defining global objects</primary>
        </indexterm>
        <para id="global_objects_para1">Global objects (e.g., sources, destinations, log paths, or
            filters) are defined in the syslog-ng configuration file. Object definitions consist of
            the following elements: </para>
        <itemizedlist id="global_objects_syntax">
            <listitem>
                <para><emphasis>Type of the object</emphasis>: One of <parameter>source</parameter>,
                        <parameter>destination</parameter>, <parameter>log</parameter>,
                        <parameter>filter</parameter>, or <parameter>template</parameter>.</para>
            </listitem>
            <listitem>
                <para><emphasis>Identifier of the object</emphasis>: A unique name identifying the
                    object. When using a reserved word as an identifier, enclose the identifier in
                    quotation marks.</para>
                <tip>
                    <para>Use identifiers that refer to the type of the object they identify. For
                        example, prefix source objects with <parameter>s_</parameter>, destinations
                        with <parameter>d_</parameter>, and so on. </para>
                </tip>
            </listitem>
            <listitem>
                <para><emphasis>Parameters</emphasis>: The parameters of the object, enclosed in
                    braces <parameter>{parameters}</parameter>.</para>
            </listitem>
            <listitem>
                <para><emphasis>Semicolon</emphasis>: Object definitions end with a semicolon
                        (<parameter>;</parameter>).</para>
            </listitem>
        </itemizedlist>
        <para id="global_objects_para2">The syntax is summarized as follows:</para>
        <synopsis>type identifier { parameters };</synopsis>
        <para>Objects have parameters; some of them are required, others are optional. Required
            parameters are positional, meaning that they must be specified in a defined order.
            Optional arguments can be specified in any order using the
            <literal>option(value)</literal> format. If a parameter (optional or required) is not
            specified, its default value is used. The parameters and their default values are listed
            in the reference section of the particular object. See <xref linkend="chapter_reference"
            /> for details.</para>
        <example>
            <title>Using required and optional parameters</title>
            <para>The <parameter>unix-stream()</parameter> source driver has a single required
                argument: the name of the socket to listen on. Optional parameters follow the socket
                name in any order, so the following source definitions have the same effect: </para>
            <synopsis>source s_demo_stream1 { 
           unix-stream("/dev/log" max-connections(10) group(log)); };
source s_demo_stream2 { 
           unix-stream("/dev/log" group(log) max-connections(10)); };</synopsis>
        </example>
        <para>To add comments to the configuration file, start a line with <parameter>#</parameter>
            and write your comments. These lines are ignored by syslog-ng.</para>
        <synopsis># Comment: This is a stream source
source s_demo_stream { 
           unix-stream("/dev/log" max-connections(10) group(log)); };</synopsis>
    </section>
    <section id="sources">
        <title>Sources and source drivers</title>
        <indexterm significance="preferred">
            <primary>sources</primary>
        </indexterm>
        <indexterm significance="preferred">
            <primary>source drivers</primary>
        </indexterm>
        <para>A source is where syslog-ng receives log messages. Sources consist of one or more
            drivers, each defining where and how messages are received.</para>
        <para>To define a source, add a source statement to the syslog-ng configuration file using
            the following syntax: <indexterm>
                <primary>destinations</primary>
                <secondary>defining</secondary>
            </indexterm>
            <synopsis>source &lt;identifier&gt; { source-driver(params); source-driver(params); ... };</synopsis>
        </para>
        <example>
            <title>A simple source statement</title>
            <para>The following source statement receives messages on the TCP port
                <parameter>1999</parameter> of the interface having the
                <parameter>10.1.2.3</parameter> IP address.</para>
            <synopsis>source s_demo_tcp { tcp(ip(10.1.2.3) port(1999)); };</synopsis>
        </example>
        <example>
            <title>A source statement using two source drivers</title>
            <para>The following source statement receives messages on the
                <parameter>1999</parameter> TCP port and the <parameter>1999</parameter> UDP port of
                the interface having the <parameter>10.1.2.3</parameter> IP address.</para>
            <synopsis>source s_demo_two_drivers { 
           tcp(ip(10.1.2.3) port(1999)); 
           udp(ip(10.1.2.3) port(1999)); };</synopsis>
        </example>
        <para>Define a source only once. The same source can be used in several log paths.
            Duplicating sources causes syslog-ng to open the source (TCP/IP port, file, etc.) more
            than once, which might cause problems. For example, include the
            <parameter>/dev/log</parameter> file source only in one source statement, and use this
            statement in more than one log path if needed. </para>
        <para>To collect log messages on a specific platform, it is important to know how the native
                <parameter>syslogd</parameter> communicates on that platform. The following table
            summarizes the operation methods of <parameter>syslogd</parameter> on some of the tested
            platforms:</para>
        <!-- FIXME belevenni a hianyzo, de tamogatott platformokat, es forrasokat pl. AIX, HP-UX, ... 
        osszegyujteni, hogy az egyes platformokon milyen forrasokat kell felvenni ahhoz, 
            hogy a syslog-ng a nativ syslog funkcionalitasat tudja 
        -->
        <table>
            <title>Communication methods used between the applications and syslogd</title>
            <indexterm>
                <primary>sources</primary>
                <secondary>on different platforms</secondary>
            </indexterm>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Platform</entry>
                        <entry>Method</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Linux</entry>
                        <entry>A <parameter>SOCK_STREAM</parameter> unix socket named
                                <parameter>/dev/log</parameter>; some of the distributions switched
                            over to using <parameter>SOCK_DGRAM</parameter>, though applications
                            still work with either method. </entry>
                    </row>
                    <row>
                        <entry>BSD flavors</entry>
                        <entry>A <parameter>SOCK_DGRAM</parameter> unix socket named
                                <parameter>/var/run/log</parameter>.</entry>
                    </row>
                    <row>
                        <entry>Solaris (2.5 or below)</entry>
                        <entry>An SVR4 style <parameter>STREAMS</parameter> device named
                                <parameter>/dev/log</parameter>.</entry>
                    </row>
                    <row>
                        <entry>Solaris (2.6 or above)</entry>
                        <entry>In addition to the <parameter>STREAMS</parameter> device used in
                            earlier versions, 2.6 uses a new multithreaded IPC method called door.
                            By default the door used by <parameter>syslogd</parameter> is
                                <parameter>/etc/.syslog_door</parameter>. </entry>
                    </row>
                    <row>
                        <entry>HP-UX 11 or later</entry>
                        <entry>HP-UX uses a named pipe called <filename>/dev/log</filename> that is
                            padded to 2048 bytes, e.g., <parameter>source s_hp-ux {pipe ("/dev/log"
                                pad_size(2048)}</parameter>.</entry>
                    </row>
                    <row>
                        <!-- FIXME -->
                        <entry>AIX 5.2 and 5.3</entry>
                        <entry>A <parameter>SOCK_STREAM</parameter> or
                            <parameter>SOCK_DGRAM</parameter> unix socket called
                            <filename>/dev/log</filename>.</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>Each possible communication mechanism has a corresponding source driver in syslog-ng.
            For example, to open a unix socket with <parameter>SOCK_DGRAM</parameter> style
            communication use the driver <parameter>unix-dgram</parameter>. The same socket using
            the <parameter>SOCK_STREAM</parameter> style &mdash; as used under Linux &mdash;
            is called <parameter>unix-stream</parameter>. </para>
        <example>
            <title>Source statement on a Linux based operating system</title>
            <para>The following source statement collects the following log messages:</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis>internal()</emphasis>: Messages generated by syslog-ng.</para>
                </listitem>
                <listitem>
                    <para><emphasis>udp(ip(0.0.0.0) port(514))</emphasis>: Messages arriving to the
                            <parameter>514/UDP</parameter> port of any interface of the host.</para>
                </listitem>
                <listitem>
                    <para><emphasis>unix-stream("/dev/log");</emphasis>: Messages arriving to the
                            <parameter>/dev/log</parameter> socket.</para>
                </listitem>
            </itemizedlist>
            <synopsis>source s_demo { 
           internal(); 
           udp(ip(0.0.0.0) port(514)); 
           unix-stream("/dev/log"); };</synopsis>
        </example>
        <para>The following table lists the source drivers available in syslog-ng.</para>
        <table id="table_source_drivers">
            <title>Source drivers available in syslog-ng</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary>list of</secondary>
            </indexterm>
            <!-- FIXME linkeket bele a sectionokre! -->
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>internal()</entry>
                        <entry>Messages generated internally in syslog-ng.</entry>
                    </row>


                    <row>
                        <entry>file()</entry>
                        <entry>Opens the specified file and reads messages.</entry>
                    </row>
                    <row>
                        <entry>pipe(), fifo</entry>
                        <entry>Opens the specified named pipe and reads messages.</entry>
                    </row>
                    <row>
                        <entry>sun-stream(), sun-streams()</entry>
                        <entry>Opens the specified <parameter>STREAMS</parameter> device on Solaris
                            systems and reads incoming messages.</entry>
                    </row>
                    <row>
                        <entry>syslog()</entry>
                        <entry>Listens for incoming messages using the new IETF-standard syslog
                            protocol. <!-- FIXME link--></entry>
                    </row>
                    <row>
                        <entry>tcp(), tcp6()</entry>
                        <entry>Listens on the specified TCP port for incoming messages over IPv4 and
                            IPv6 networks, respectively.</entry>
                    </row>
                    <row>
                        <entry>udp(), udp6()</entry>
                        <entry>Listens on the specified UDP port for incoming messages over IPv4 and
                            IPv6 networks, respectively.</entry>
                    </row>
                    <row>
                        <entry>unix-dgram()</entry>
                        <entry>Opens the specified unix socket in <parameter>SOCK_DGRAM</parameter>
                            mode and listens for incoming messages.</entry>
                    </row>
                    <row>
                        <entry>unix-stream()</entry>
                        <entry>Opens the specified unix socket in <parameter>SOCK_STREAM</parameter>
                            mode and listens for incoming messages.</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>For a complete description of the parameters of the above drivers, see <xref
                linkend="reference_sourcedrivers"/>. </para>

        <section id="configuring_sources_internal">
            <title>Collecting internal messages</title>
            <para>All messages generated internally by syslog-ng use this special source. To collect
                warnings, errors and notices from syslog-ng itself, include this source in one of
                your source statements. </para>
            <synopsis>internal()</synopsis>
            <para>The syslog-ng application will issue a warning upon startup if none of the defined
                log paths reference this driver. </para>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_source_internal)"/>
            <section id="reference_log_statistics">
                <title>Log statistics</title>
                <para>
                    <indexterm>
                        <primary>log statistics</primary>
                    </indexterm>
                    <indexterm>
                        <primary>statistics</primary>
                    </indexterm>Periodically, syslog-ng sends a message containing statistics about
                    the received messages, and about any lost messages since the last such message.
                    It includes a <parameter>processed</parameter> entry for every source and
                    destination, listing the number of messages received or sent, and a
                        <parameter>dropped</parameter> entry including the IP address of the server
                    for every destination where syslog-ng has lost messages. The
                        <parameter>center(received)</parameter> entry shows the total number of
                    messages received from every configured sources.</para>
                <para>The following is a sample log statistics message for a configuration that has
                    a single source (<parameter>s_local</parameter>) and a network and a local file
                    destination (<parameter>d_network</parameter> and
                    <parameter>d_local</parameter>, respectively). All incoming messages are sent to
                    both destinations.</para>
                <synopsis>Log statistics;
                    dropped='tcp(AF_INET(192.168.10.1:514))=6439',
                    processed='center(received)=234413',
                    processed='destination(d_tcp)=234413',
                    processed='destination(d_local)=234413',
                    processed='source(s_local)=234413'</synopsis>
                <!-- FIXME domain socketes snmp kiajanlas -->
            </section>
        </section>
        <section id="configuring_sources_file">
            <title>Collecting messages from text files</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>file()</parameter> driver</secondary>
            </indexterm>
            <para>Collects log messages from plain-text files, e.g., from the logfiles of an Apache
                webserver.</para>
            <para>The syslog-ng application notices if a file is renamed or replaced with a new
                file, so it can correctly follow the file even if logrotation is used. When
                syslog-ng is restarted, it records the position of the last sent log message, and
                continues to send messages from this position after the restart.</para>
            <para>The file driver has a single required parameter specifying the file to open. For
                the list of available optional parameters, see <xref linkend="reference_source_file"
                />. </para>
            <synopsis>Declaration:
                file(filename);</synopsis>
            <indexterm>
                <primary>wildcards</primary>
                <secondary>in file sources</secondary>
            </indexterm>
            <para>The filename may include wildcard characters (e.g., <parameter>*</parameter>).
                Note that when using wildcards in filenames, always set how often syslog-ng should
                check the file for new messages using the <parameter>follow_freq()</parameter>
                parameter.</para>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_source_file)"/>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_source_file_wildcard)"/>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_source_file_recursive)"/>
            <para>The kernel usually sends log messages to a special file
                (<parameter>/dev/kmsg</parameter> on BSDs, <parameter>/proc/kmsg</parameter> on
                Linux). The <parameter>file()</parameter> driver reads log messages from such files.
                The syslog-ng application can periodically check the file for new log messages if
                the <parameter>follow_freq()</parameter> option is set. </para>
            <note>
                <para>On Linux, the <parameter>klogd</parameter> daemon can be used in addition to
                    syslog-ng to read kernel messages and forward them to syslog-ng.
                        <parameter>klogd</parameter> used to preprocess kernel messages to resolve
                    symbols etc., but as this is deprecated by <parameter>ksymoops</parameter> there
                    is really no point in running both <parameter>klogd</parameter> and syslog-ng in
                    parallel. Also note that running two processes reading
                    <filename>/proc/kmsg</filename> at the same time might result in dead-locks. </para>
                <para>When using syslog-ng to read messages from the <filename>/proc/kmsg</filename>
                    file, syslog-ng automatically disables the <parameter>follow_freq()</parameter>
                    parameter to avoid blocking the file.</para>
            </note>
        </section>
        <section id="configuring_sources_pipe">
            <title>Collecting messages from named pipes</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>pipe()</parameter> driver</secondary>
            </indexterm>
            <para>The pipe driver opens a named pipe with the specified name and listens for
                messages. It is used as the native message delivery protocol on HP-UX.</para>
            <para>The pipe driver has a single required parameter, specifying the filename of the
                pipe to open. For the list of available optional parameters, see <xref
                    linkend="reference_source_pipe"/>.</para>
            <synopsis>Declaration:
                pipe(filename);</synopsis>
            <note>
                <para>You have to create the pipe using <command>mkfifo(1)</command>. </para>
            </note>
            <para>Pipe is very similar to the <parameter>file()</parameter> driver, but there are a
                few differences, for example <parameter>pipe()</parameter> opens its argument in
                read-write mode, therefore it is not recommended to be used on special files like
                    <filename>/proc/kmsg</filename>.</para>
            <warning>
                <para>It is not recommended to use <parameter>pipe()</parameter> on anything else
                    than real pipes. </para>
            </warning>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_source_pipe)"/>
        </section>
        <section id="configuring_sources_sunstreams">
            <title>Collecting messages on Sun Solaris</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>sun-streams()</parameter> driver</secondary>
            </indexterm>
            <para>Solaris uses its <parameter>STREAMS</parameter> framework to send messages to the
                    <parameter>syslogd</parameter> process. Solaris 2.5.1 and above uses an IPC
                called <emphasis>door</emphasis> in addition to <parameter>STREAMS</parameter>, to
                confirm the delivery of a message. The syslog-ng application supports the IPC
                mechanism via the <parameter>door()</parameter> option (see below).</para>
            <note>
                <para>The <parameter>sun-streams()</parameter> driver must be enabled when the
                    syslog-ng application is compiled (see <command>./configure --help</command>).
                    The pre-compiled binaries of syslog-ng Open Source Edition purchased from
                    BalaBit and syslog-ng Premium Edition have this option enabled.</para>
            </note>
            <para>The <parameter>sun-streams()</parameter> driver has a single required argument
                specifying the <parameter>STREAMS</parameter> device to open, and the
                    <parameter>door()</parameter> option. For the list of available optional
                parameters, see <xref linkend="reference_source_sunstreams"/>.</para>
            <synopsis>Declaration:
        sun-streams(name_of_the_streams_device door(filename_of_the_door));</synopsis>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_source_sunstreams)"/>
        </section>
        <section id="configuring_sources_syslog">
            <title>Collecting messages using the IETF syslog protocol</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>syslog()</parameter> driver</secondary>
            </indexterm>
            <!-- FIXME kibovit -->
            <para>The <parameter>syslog()</parameter> driver enables to receive messages from the
                network using the new standard syslog protocol and message format.
                <!-- FIXME xref a protocol leirasra --> UDP, TCP, and TLS-encrypted TCP can all be
                used to transport the messages.</para>
            <indexterm>
                <primary>TLS</primary>
            </indexterm>
            <para>For the list of available optional parameters, see <xref
                    linkend="reference_source_syslog"/>.</para>
            <!-- FIXME mia kotelezo parameter? -->
            <synopsis>Declaration:
            syslog(ip() port() transport() options());</synopsis>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_source_syslog)"/>
        </section>
        <section id="configuring_sources_tcpudp">
            <title>Collecting messages from remote hosts using the BSD syslog protocol</title>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>tcp()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>tcp6()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>udp()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>source drivers</primary>
                <secondary><parameter>udp6()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>tcp()</parameter>, <parameter>tcp6()</parameter>,
                <parameter>udp()</parameter>, <parameter>udp6()</parameter> drivers can receive
                messages from the network using the TCP and UDP networking protocols. The
                    <parameter>tcp6()</parameter> and <parameter>udp6()</parameter> drivers use the
                IPv6 network protocol, while <parameter>tcp()</parameter> and
                <parameter>udp()</parameter> use IPv4.</para>
            <para>UDP is a simple datagram oriented protocol, which provides "best effort service"
                to transfer messages between hosts. It may lose messages, and no attempt is made at
                the protocol level to retransmit such lost messages. The
                <emphasis>BSD-syslog</emphasis> protocol traditionally uses UDP.</para>
            <!-- FIXME link a legacy protocol leirasra, legacy/BSD syslog es IETF syslog protocol a glossaryba is-->
            <para>TCP provides connection-oriented service, which basically means a flow-controlled
                message pipeline. In this pipeline each message is acknowledged, and retransmission
                is done for lost packets. Generally it is safer to use TCP, because lost connections
                can be detected, and no messages get lost, assuming that the TCP connection does not
                break. When a TCP connection is broken the 'in-transit' messages that were sent by
                syslog-ng but not yet received on the other side are lost. (Basically these messages
                are still sitting in the socket buffer of the sending host and syslog-ng has no
                information about the fate of these messages). </para>
            <para>The <parameter>tcp()</parameter> and <parameter>udp()</parameter> drivers do not
                have any required parameters. By default they bind to the
                <parameter>0.0.0.0:514</parameter> address, which means that syslog-ng will listen
                on all available interfaces, port 514. To limit accepted connections to only one
                interface, use the <parameter>localip()</parameter> parameter as described below.
                For the list of available optional parameters, see <xref
                    linkend="reference_source_tcpudp"/>.</para>
            <synopsis>Declaration:
                tcp([options]);
                udp([options]);</synopsis>
            <note>
                <para>The tcp port 514 is reserved for use with <command>rshell</command>, so select
                    a different port if syslog-ng and <command>rshell</command> is used at the same
                    time. </para>
            </note>
            <para>If you specify a multicast bind address to <parameter>udp()</parameter> and
                    <parameter>udp6()</parameter>, syslog-ng will automatically join the necessary
                multicast group. TCP does not support multicasting. </para>
            <para>The syslog-ng Premium Edition application supports TLS (Transport Layer Security,
                also known as SSL) for the tcp() and tcp6() drivers. See the TLS-specific options
                below and <xref linkend="tls_serverauth"/> for details. For the list of available
                optional parameters, see <xref linkend="reference_source_sunstreams"/>.</para>
            <indexterm>
                <primary>TLS</primary>
            </indexterm>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_source_tcpudp)"/>
        </section>
        <section id="configuring_sources_unixstream">
            <title>Collecting messages from UNIX domain sockets</title>
            <para>The <parameter>unix-stream()</parameter> and <parameter>unix-dgram()</parameter>
                drivers open an <parameter>AF_UNIX</parameter> socket and start listening on it for
                messages. The <parameter>unix-stream()</parameter> driver is primarily used on Linux
                and uses <parameter>SOCK_STREAM</parameter> semantics (connection oriented, no
                messages are lost); while <parameter>unix-dgram()</parameter> is used on BSDs and
                uses <parameter>SOCK_DGRAM</parameter> semantics: this may result in lost local
                messages if the system is overloaded. </para>
            <para>To avoid denial of service attacks when using connection-oriented protocols, the
                number of simultaneously accepted connections should be limited. This can be
                achieved using the <parameter>max-connections()</parameter> parameter. The default
                value of this parameter is quite strict, you might have to increase it on a busy
                system. </para>
            <para>Both unix-stream and unix-dgram have a single required argument that specifies the
                filename of the socket to create. For the list of available optional parameters, see
                    <xref linkend="reference_source_unixstream"/></para>
            <synopsis>Declaration: 
                unix-stream(filename [options]);
                unix-dgram(filename [options]);</synopsis>
            <note>
                <para><parameter>syslogd</parameter> on Linux originally used
                    <parameter>SOCK_STREAM</parameter> sockets, but some distributions switched to
                        <parameter>SOCK_DGRAM</parameter> around 1999 to fix a possible DoS problem.
                    On Linux you can choose to use whichever driver you like as syslog clients
                    automatically detect the socket type being used. </para>
            </note>
            <para>The difference between the unix-stream and unix-dgram drivers is similar to the
                difference between the TCP and UDP network protocols. Use the following guidelines
                to select which driver to use in a particular situation:</para>
            <para>Choose unix-stream if you would choose TCP (stream) instead of UDP (datagram). The
                unix-stream driver offers the following features:</para>
            <itemizedlist>
                <listitem>
                    <para>Increased reliability</para>
                </listitem>
                <listitem>
                    <para>Ordered delivery of messages</para>
                </listitem>
                <listitem>
                    <para>Client-side notification of failures</para>
                </listitem>
            </itemizedlist>
            <para>Choose unix-dgram if you would choose TCP (stream) over UDP (datagram). The
                unix-dgram driver offers the following features:</para>
            <itemizedlist>
                <listitem>
                    <para>Decreased possibility of Dos by opening too many connections (a local
                        vulnerability)</para>
                </listitem>
                <listitem>
                    <para>Less overhead</para>
                </listitem>
            </itemizedlist>
            <para>However, the client does not notice if a message is lost when using the unix-dgram
                driver.</para>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_source_unixstream)"/>
        </section>

    </section>
    <section id="destinations">
        <title>Destinations and destination drivers</title>
        <indexterm significance="preferred">
            <primary>destinations</primary>
        </indexterm>
        <indexterm significance="preferred">
            <primary>destination drivers</primary>
        </indexterm>
        <para>A destination is where a log message is sent if the filtering rules match. Similarly
            to sources, destinations consist of one or more drivers, each defining where and how
            messages are sent.</para>
        <tip>
            <para>If no drivers are defined for a destination, all messages sent to the destination
                are discarded. This is equivalent to omitting the destination from the log
                statement.</para>
        </tip>
        <para>To define a destination, add a destination statement to the syslog-ng configuration
            file using the following syntax: <indexterm>
                <primary>destinations</primary>
                <secondary>defining</secondary>
            </indexterm>
            <synopsis>destination &lt;identifier&gt; { 
                destination-driver(params); destination-driver(params); ... };</synopsis>
        </para>
        <example>
            <title>A simple destination statement</title>
            <para>The following destination statement sends messages to the TCP port
                <parameter>1999</parameter> of the <parameter>10.1.2.3</parameter> host.</para>
            <synopsis>destination d_demo_tcp { tcp("10.1.2.3" port(1999)); };</synopsis>
            <para>If name resolution is configured, the hostname of the target server can be used as
                well.</para>
            <synopsis>destination d_tcp { tcp("target_host" port(1999); localport(999)); };</synopsis>
        </example>
        <para>The following table lists the destination drivers available in syslog-ng.</para>
        <table id="table_destination_drivers">
            <title>Destination drivers available in syslog-ng</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary>list of</secondary>
                <!-- FIXME linkeket updatelni, a config sectionokre mutassanak! -->
            </indexterm>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <link linkend="reference_destination_file">file()</link>
                        </entry>
                        <entry>Writes messages to the specified file.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_logstore">logstore()</link>
                        </entry>
                        <entry>Writes messages to the specified binary logstore file.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_pipe">fifo(), pipe()</link>
                        </entry>
                        <entry>Writes messages to the specified named pipe.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_program">program()</link>
                        </entry>
                        <entry>Forks and launches the specified program, and sends messages to its
                            standard input.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_sql"
                            >sql()<parameter>*</parameter></link>
                        </entry>
                        <entry>Sends messages into an SQL database.
                            <parameter>*</parameter>Available only in syslog-ng Premium Edition. In
                            addition to the standard syslog-ng packages, the
                            <parameter>sql()</parameter> destination requires database-specific
                            packages to be installed. Refer to the section appropriate for your
                            platform in <xref linkend="chapter_install"/>.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_syslog">syslog()</link>
                        </entry>
                        <entry>Sends messages to the specified remote host using the standard
                            IETF-syslog protocol. The IETF standard supports message transport using
                            the UDP, TCP, and TLS networking protocols.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_tcpudp">tcp()</link>
                        </entry>
                        <entry>Sends messages to the specified TCP port of a remote host.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_tcpudp">tcp6()</link>
                        </entry>
                        <entry>Sends messages to the specified TCP port of a remote host using
                        IPv6.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_tcpudp">udp()</link>
                        </entry>
                        <entry>Sends messages to the specified UDP port of a remote host.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_tcpudp">udp6()</link>
                        </entry>
                        <entry>Sends messages to the specified UDP port of a remote host using
                        IPv6.</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_unixstream">unix-dgram()</link>
                        </entry>
                        <entry>Sends messages to the specified unix socket in
                            <parameter>SOCK_DGRAM</parameter> style (BSD).</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_unixstream">unix-stream()</link>
                        </entry>
                        <entry>Sends messages to the specified unix socket in
                            <parameter>SOCK_STREAM</parameter> style (Linux).</entry>
                    </row>
                    <row>
                        <entry>
                            <link linkend="reference_destination_usertty">usertty()</link>
                        </entry>
                        <entry>Sends messages to the terminal of the specified user, if the user is
                            logged in.</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>For detailed list of driver parameters, see <xref
                linkend="reference_destinationdrivers"/>. </para>
        <section id="configuring_destinations_file">
            <title>Storing messages in plain-text files</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>file()</parameter> driver</secondary>
            </indexterm>
            <para>The file driver is one of the most important destination drivers in syslog-ng. It
                allows to output messages to the specified text file, or to a set of files. </para>
            <para>The destination filename may include macros which get expanded when the message is
                written, thus a simple <parameter>file()</parameter> driver may create several
                files. For more information on available macros see <xref linkend="macros"/>. </para>
            <para>If the expanded filename refers to a directory which does not exist, it will be
                created depending on the <parameter>create_dirs()</parameter> setting (both global
                and a per destination option).</para>
            <!-- FIXME link a global optionre -->
            <para>The <parameter>file()</parameter> has a single required parameter that specifies
                the filename that stores the log messages. For the list of available optional
                parameters, see <xref linkend="reference_destination_file"/>.</para>
            <synopsis>Declaration:
                file(filename options());</synopsis>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_destination_file)"/>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_destination_file_macro)"/>
            <note>
                <para>When using the <parameter>file()</parameter> destination, update the
                    configuration of your log rotation program to rotate these files. Otherwise, the
                    log files can become very large.</para>
            </note>
            <warning>
                <para>Since the state of each created file must be tracked by syslog-ng, it consumes
                    some memory for each file. If no new messages are written to a file within 60
                    seconds (controlled by the <parameter>time_reap()</parameter> global option), it
                    is closed, and its state is freed. </para>
                <para>Exploiting this, a DoS attack can be mounted against the system. If the number
                    of possible destination files and its needed memory is more than the amount
                    available on the syslog-ng server. </para>
                <para>The most suspicious macro is <parameter>$PROGRAM</parameter>, where the number
                    of possible variations is rather high. Do not use the
                    <parameter>$PROGRAM</parameter> macro in insecure environments.</para>
            </warning>
        </section>
        <section id="configuring_destinations_logstore">
            <title>Storing messages in encrypted files</title>
            <para>The <parameter>logstore()</parameter> driver stores log messages in binary files
                that can be encrypted, compressed, checked for integrity, and timestamped by an
                external Timestamping Authority (TSA). Otherwise, it is very similar to the
                    <parameter>file()</parameter> destination.</para>
            <para>Logstore files consist of individual chunks, every chunk can be encrypted,
                compressed, and timestamped separately. Chunks contain log message data, chunk size
                defaults to 128k (about 1MB worth of compressed logs).</para>
            <para>To display the contents of a logstore file, use the <command>logcat</command>
                command supplied with syslog-ng, e.g., <command>logcat
                /var/log/messages.lgs</command>. For files that are in use by syslog-ng, the last
                chunk that is open cannot be read. Chunks are closed when their size reaches the
                limit set in the <parameter>chunk_size</parameter> parameter, or when the time limit
                set in the <parameter>chunk_time</parameter> parameter expires and no new message
                arrives.</para>
            <para>When the logstore file is encrypted, a hash is also generated for every chunk to
                verify the integrity of the chunk. The hashes of the chunks are chained together to
                prevent injecting chunks into the logstore file. The encryption algorithm used is
                    <parameter>aes128</parameter> in CBC mode, the hashing (HMAC) algorithm is
                    <parameter>hmac-sha1</parameter>.</para>
            <warning>
                <para>If the syslog-ng Premium Edition application or the computer crashes, an
                    unclosed chunk remains at the end of the file. This chunk is marked as broken,
                    its data stays there but is not shown by <command>logcat</command>.</para>
                <!-- FIXME akkor hogy lehet megnezni? -->
            </warning>
            <para>The destination filename may include macros which get expanded when the message is
                written, thus a simple <parameter>logstore()</parameter> driver may create several
                files. For more information on available macros see <xref linkend="macros"/>. </para>
            <para>If the expanded filename refers to a directory which does not exist, it will be
                created depending on the <parameter>create_dirs()</parameter> setting (both global
                and a per destination option).</para>
            <para>The <parameter>logstore()</parameter> has a single required parameter that
                specifies the filename that stores the log messages. For the list of available
                optional parameters, see <xref linkend="reference_destination_logstore"/>.</para>
            <synopsis>Declaration:
                logstore(filename options());</synopsis>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_destination_logstore)"/>
            <note>
                <para>When using the <parameter>logstore()</parameter> destination, update the
                    configuration of your log rotation program to rotate these files. Otherwise, the
                    log files can become very large.</para>
            </note>
            <warning>
                <para>Since the state of each created file must be tracked by syslog-ng, it consumes
                    some memory for each file. If no new messages are written to a file within 60
                    seconds (controlled by the <parameter>time_reap()</parameter> global option), it
                    is closed, and its state is freed. </para>
                <para>Exploiting this, a DoS attack can be mounted against the system. If the number
                    of possible destination files and its needed memory is more than the amount
                    available on the syslog-ng server. </para>
                <para>The most suspicious macro is <parameter>$PROGRAM</parameter>, where the number
                    of possible variations is rather high. Do not use the
                    <parameter>$PROGRAM</parameter> macro in insecure environments.</para>
            </warning>
            <para>The <parameter>logstore()</parameter> destination has the following
            options:</para>
        </section>
        <section id="configuring_destinations_pipe">
            <title>Sending messages to named pipes</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>pipe()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>pipe()</parameter> driver sends messages to a named pipe like
                    <filename>/dev/xconsole</filename>. </para>
            <para>The pipe driver has a single required parameter, specifying the filename of the
                pipe to open. For the list of available optional parameters, see <xref
                    linkend="reference_destination_pipe"/>.</para>
            <synopsis>Declaration:
                pipe(filename);</synopsis>
            <warning>
                <para>You have to create this pipe using <command>mkfifo(1)</command>, it is not
                    created automatically. </para>
            </warning>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_destination_pipe)"/>
        </section>
        <section id="configuring_destinations_program">
            <title>Sending messages to external applications</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>program()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>program()</parameter> driver starts an external application or
                script and sends the log messages to its standard input
                (<parameter>stdin</parameter>). </para>
            <para>The <parameter>program()</parameter> driver has a single required parameter,
                specifying a program name to start. The program is executed with the help of the
                current shell, so the command may include both file patterns and I/O redirections.
                For the list of available optional parameters, see <xref
                    linkend="reference_destination_program"/>.</para>
            <synopsis>Declaration: 
                program(command_to_run);</synopsis>
            <note>
                <para>The syslog-ng application automatically restarts the external program if it
                    exits for reliability reasons. However it is not recommended to launch programs
                    for single messages, because if the message rate is high, launching several
                    instances of an application might overload the system, resulting in Denial of
                    Service. </para>
            </note>
            <para>Note that the message format does not include the priority and facility values by
                default. To add these values, specify a template for the program destination, as
                shown in the following example.</para>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_destination_program)"/>
        </section>
        <section id="configuring_destinations_sql">
            <title>Storing messages in an SQL database</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>sql()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary>database driver</secondary>
            </indexterm>
            <para>The <parameter>sql()</parameter> driver sends messages into an SQL database.
                Currently the Microsoft SQL (MSSQL), MySQL, Oracle, PostgreSQL, and SQLite databases
                are supported.</para>
            <note>
                <!-- FIXME ez meg igaz? OSE? -->
                <para>In order to use the <parameter>sql()</parameter> destination, syslog-ng
                    Premium Edition must run in server mode. Typically, only the central syslog-ng
                    Premium Edition server uses the <parameter>sql()</parameter>
                    destination.<!-- FIXME link a server modera -->
                </para>
            </note>
            <para>The <parameter>sql()</parameter> driver has the following required parameters:</para>
            <!-- FIXME melyek a kotelezo parameterek? -->
            <table>
                <title>Required parameters of the sql() driver</title>
                <tgroup cols="4">
                    <thead>
                        <row>
                            <entry>Name</entry>
                            <entry>Type</entry>
                            <entry>Default</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <xi:include href="chapter_reference.xml"
                            xmlns:xi="http://www.w3.org/2001/XInclude"
                            xpointer="element(sql_option_type)"/>
                        <xi:include href="chapter_reference.xml"
                            xmlns:xi="http://www.w3.org/2001/XInclude"
                            xpointer="element(sql_option_database)"/>
                        <xi:include href="chapter_reference.xml"
                            xmlns:xi="http://www.w3.org/2001/XInclude"
                            xpointer="element(sql_option_table)"/>
                        <xi:include href="chapter_reference.xml"
                            xmlns:xi="http://www.w3.org/2001/XInclude"
                            xpointer="element(sql_option_columns)"/>
                        <xi:include href="chapter_reference.xml"
                            xmlns:xi="http://www.w3.org/2001/XInclude"
                            xpointer="element(sql_option_values)"/>
                    </tbody>
                </tgroup>
            </table>
            <para>For the list of available optional parameters, see <xref
                    linkend="reference_destination_sql"/>.</para>
            <synopsis>Declaration: 
                sql(database_type host_parameters database_parameters [options]);</synopsis>
            <note>
                <!-- FIXME uj telepitonel is? Es a platformspecifikus csomagoknal? -->
                <para>In addition to the standard syslog-ng packages, the
                    <parameter>sql()</parameter> destination requires database-specific packages to
                    be installed. Refer to the section appropriate for your platform in <xref
                        linkend="chapter_install"/>.</para>
                <para>The <parameter>sql()</parameter> driver is currently not available for every
                    platform that is supported by syslog-ng. For a list of platforms that support
                    the <parameter>sql()</parameter> driver, visit <ulink
                        url="http://www.balabit.com/network-security/syslog-ng/central-syslog-server/"
                        >http://www.balabit.com/network-security/syslog-ng/central-syslog-server/</ulink>.</para>
            </note>
            <para>The <parameter>table</parameter> and <parameter>value</parameter> parameters can
                include macros to create tables and columns dynamically (see <xref linkend="macros"
                /> for details).</para>
            <warning>
                <para>When using macros in table names, note that some databases limit the maximum
                    allowed length of table names. Consult the documentation of the database for
                    details.</para>
            </warning>
            <para>Inserting the records into the database is performed by a separate thread. The
                syslog-ng application automatically performs the escaping required to insert the
                messages into the database. </para>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_destination_sql)"/>
            <section id="configuring_sql_oracle">
                <title>Using the sql() driver with an Oracle database</title>
                <indexterm>
                    <primary>Oracle</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <para>The Oracle sql destination has some special aspects that are important to
                    note.</para>
                <itemizedlist>
                    <listitem>
                        <para>Apart from the syslog-ng PE packages, it requires the Oracle Instant
                            Client package from Oracle. See the platform-specific installation
                            instructions in <xref linkend="chapter_install"/> for details.</para>
                    </listitem>
                    <listitem>
                        <para>The hostname of the database server is set in the
                                <filename>/etc/tnsnames.ora</filename> file, not in the
                                <parameter>host</parameter> parameter of the
                            <parameter>sql()</parameter> destination.</para>
                    </listitem>
                    <listitem>
                        <para>As certain database versions limit the maximum length of table names,
                            macros in the table names should be used with care.</para>
                    </listitem>
                    <listitem>
                        <!-- FIXME kiszedni, ha megjavul -->
                        <para>In the current version of syslog-ng PE, the types of database columns
                            must be explicitly set for the Oracle destination. The column used to
                            store the text part of the syslog messages should be able to store
                            messages as long as the longest message permitted by syslog-ng,
                            therefore it is usually recommended to use the
                            <parameter>varchar2</parameter> or <parameter>clob</parameter> column
                            type. (The maximum length of the messages can be set using the
                                <parameter>log_msg_size()</parameter> option.) See the following
                            example for details.</para>
                    </listitem>
                </itemizedlist>

                <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                    xpointer="element(example_destination_sql_oracle)"/>
            </section>

            <section id="configuring_sql_mssql">
                <title>Using the sql() driver with a Microsoft SQL database</title>
                <indexterm>
                    <primary>Microsoft SQL</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <indexterm>
                    <primary>MSSQL</primary>
                    <secondary>sql() configuration</secondary>
                </indexterm>
                <para>The <parameter>freetds</parameter> database driver can access Microsoft SQL
                    (MSSQL) destinations. This driver has some special aspects that are important to
                    note.</para>
                <itemizedlist>
                    <listitem>
                        <para>The date format used by the MSSQL database must be explicitly set in
                            the <filename>/etc/locales.conf</filename> file of the syslog-ng server.
                            See the following example for details.</para>
                    </listitem>
                    <listitem>
                        <para>As certain database versions limit the maximum length of table names,
                            macros in the table names should be used with care.</para>
                    </listitem>
                    <listitem>
                        <!-- FIXME kiszedni, ha megjavul -->
                        <para>In the current version of syslog-ng PE, the types of database columns
                            must be explicitly set for the MSSQL destination. The column used to
                            store the text part of the syslog messages should be able to store
                            messages as long as the longest message permitted by syslog-ng. The
                                <parameter>varchar</parameter> column type can store maximum 4096
                            bytes-long messages. The maximum length of the messages can be set using
                            the <parameter>log_msg_size()</parameter> option. See the following
                            example for details.</para>
                    </listitem>
                    <listitem>
                        <para>Remote access for SQL users must be explicitly enabled on the
                            Microsoft Windows host running the Microsoft SQL Server. See <xref
                                linkend="configure_mssql_server"/> for details.</para>
                    </listitem>
                </itemizedlist>
                <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                    xpointer="element(example_destination_sql_mssql)"/>
            </section>
        </section>
        <section id="configuring_destinations_syslog">
            <title>Sending messages to a remote logserver using the IETF-syslog protocol</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>syslog()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>syslog()</parameter> driver sends messages to a remote host (e.g.,
                a syslog-ng server or relay) on the local intranet or internet using the new
                standard syslog protocol developed by IETF. <!-- FIXME link --> The protocol
                supports sending messages using the UDP, TCP, or the encrypted TLS networking
                protocols.</para>
            <para>The required arguments of the driver are the address of the destination host
                (where messages should be sent) and the transport method (networking protocol). For
                the list of available optional parameters, see <xref
                    linkend="reference_destination_syslog"/>.</para>
            <synopsis>Declaration:
                syslog(host transport [options]);</synopsis>
            <note>
                <para>Note that the <parameter>syslog</parameter> destination driver has required
                    parameters, while the source driver defaults to the local bind address, and
                    every parameter is optional. </para>
            </note>
            <para>The <parameter>udp</parameter> transport method
                <!-- FIXME ez erre a driverre is igaz? --> automatically sends multicast packets if
                a multicast destination address is specified. The <parameter>tcp</parameter> and
                    <parameter>tls</parameter> methods do not support multicasting.</para>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_destination_logstore)"/>
        </section>
        <section id="configuring_destinations_tcpudp">
            <title>Sending messages to a remote logserver using the legacy BSD-syslog protocol</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>tcp()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>tcp6()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>udp()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>udp6()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>tcp()</parameter>, <parameter>tcp6()</parameter>,
                <parameter>udp()</parameter>, and <parameter>udp6()</parameter> drivers send
                messages to another host (e.g., a syslog-ng server or relay) on the local intranet
                or internet using the UDP or TCP protocol. The <parameter>tcp6()</parameter> and
                    <parameter>udp6()</parameter> drivers use the IPv6 network protocol.</para>
            <para>All four drivers have a single required parameter specifying the destination host
                address, where messages should be sent. For the list of available optional
                parameters, see <xref linkend="reference_destination_tcpudp"/>.</para>
            <para>The <parameter>udp()</parameter> and <parameter>udp6()</parameter> drivers
                automatically send multicast packets if a multicast destination address is
                specified. The <parameter>tcp()</parameter> and <parameter>tcp6()</parameter>
                drivers do not support multicasting.</para>
            <synopsis>Declaration:
                tcp(host [options]);
                udp(host [options]);
                tcp6(host [options]);
                udp6(host [options]);</synopsis>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_destination_tcpudp)"/>
        </section>
        <section id="configuring_destinations_unixstream">
            <title>Sending messages to UNIX domain sockets</title>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>unix-stream()</parameter> driver</secondary>
            </indexterm>
            <indexterm>
                <primary>destination drivers</primary>
                <secondary><parameter>unix-dgram()</parameter> driver</secondary>
            </indexterm>
            <para>The <parameter>unix-stream()</parameter> and <parameter>unix-dgram()</parameter>
                drivers send messages to a UNIX domain socket in either
                <parameter>SOCK_STREAM</parameter> or <parameter>SOCK_DGRAM</parameter> mode. </para>
            <para>Both drivers have a single required argument specifying the name of the socket to
                connect to. For the list of available optional parameters, see <xref
                    linkend="reference_destination_unixstream"/>.</para>
            <synopsis>Declaration: 
                unix-stream(filename [options]);
                unix-dgram(filename [options]);</synopsis>
            <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
                xpointer="element(example_destination_unixstream)"/>
        </section>
        <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
            xpointer="element(reference_destination_usertty)"/>


    </section>
    <section id="logpath">
        <title>Log paths</title>
        <indexterm significance="preferred">
            <primary>log paths</primary>
        </indexterm>
        <para>Log paths determine what happens with the incoming log messages. Messages coming from
            the sources listed in the log statement and matching all the filters are sent to the
            listed destinations.</para>
        <para>To define a log path, add a log statement to the syslog-ng configuration file using
            the following syntax:</para>
        <indexterm>
            <primary>log paths</primary>
            <secondary>defining</secondary>
        </indexterm>
        <synopsis id="log_path_synopsis">log {
    source(s1); source(s2); ... 
    optional_element(filter1|parser1|rewrite1); optional_element(filter2|parser2|rewrite2);... 
    destination(d1); destination(d2); ... 
    flags(flag1[, flag2...]);
    };</synopsis>
        <warning>
            <para>Log statements are processed in the order they appear in the configuration file.
            </para>
        </warning>
        <example id="log_statement_example">
            <title>A simple log statement</title>
            <para>The following log statement sends all messages arriving to the localhost to a
                remote server.</para>
            <synopsis>source s_localhost { tcp(ip(127.0.0.1) port(1999) ); };
destination d_tcp { tcp("10.1.2.3" port(1999); localport(999)); };
log { source(s_localhost); destination(d_tcp); };</synopsis>
        </example>
        <para>All matching log statements are processed by default, so a single log message might be
            sent to the same destination several times, provided the destination is listed in
            several log statements. </para>
        <indexterm>
            <primary>log paths</primary>
            <secondary>flags</secondary>
        </indexterm>
        <indexterm>
            <primary>flags</primary>
        </indexterm>
        <para>This default behavior can be changed using the <parameter>flags()</parameter>
            parameter. Flags apply to individual log paths; they are not global options. The
            following flags available in syslog-ng: </para>
        <itemizedlist>
            <listitem>
                <para><emphasis>final</emphasis>: Do not send the message to any further
                    destination.</para>
            </listitem>
            <listitem>
                <para><emphasis>fallback</emphasis>: Process messages that were not processed by
                    other log paths.</para>
            </listitem>
            <listitem>
                <para><emphasis>catchall</emphasis>: Process every message, regardless of its
                    source.</para>
            </listitem>
            <listitem>
                <para><emphasis>flow-control</emphasis>: Stop reading messages from the source if
                    the destination cannot accept them. See <xref linkend="flow_control"/>.</para>
            </listitem>
        </itemizedlist>
        <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
            xpointer="element(example_logpath_flags)"/>
        <para>For details on the individual flags, see <xref linkend="reference_logflags"/>. The
            effect and use of the <parameter>flow-control</parameter> flag is detailed in <xref
                linkend="flow_control"/>.</para>
        <note>
            <para>Note that a message goes to <emphasis>every</emphasis> matching destination by
                default. To change this behavior, use the <parameter>final</parameter> flag. See
                    <xref linkend="reference_logflags"/> for details.</para>
        </note>
        <section id="configuring_embedded_logpaths">
            <title>Using embedded log statements</title>
            <para>Embedded log statements <!-- FIXME link a conceptre --> re-use the results of processing messages (e.g., the results of filtering or rewriting)
             to create complex log paths. Embedded log statements use the same syntax as regular log statements, but they cannot contain additional sources. 
            To define embedded log statements, use the following syntax:</para>
            <synopsis id="log_path_synopsis_embedded">log {
    source(s1); source(s2); ... 
    optional_element(filter1|parser1|rewrite1); optional_element(filter2|parser2|rewrite2);... 
    destination(d1); destination(d2); ... 
    flags(flag1[, flag2...]); 
    embedded_log_statement
        {
        optional_element(filter1|parser1|rewrite1); optional_element(filter2|parser2|rewrite2);... 
        destination(d1); destination(d2); ...
        embedded_log_statement{
            optional_element(filter1|parser1|rewrite1); optional_element(filter2|parser2|rewrite2);... 
            destination(d1); destination(d2); ...};
        };    
        };</synopsis>
            <!-- FIXME egy bonyolultabb pelda abraval! -->
            <example id="example_logpath_embedded">
                <title>Using embedded log paths</title>
                <para>The following log path sends every message to the <parameter>d_file1</parameter> and the <parameter>d_file2</parameter> destinations.</para>
                <synopsis>log { source(s_localhost); destination(d_file1); destination(d_file2); };</synopsis>
                <para>The next example is equivalent with the one above, but uses an embedded log statement.</para>
                <synopsis>log { source(s_localhost); destination(d_file1); 
                    log {destination(d_file2); };
};</synopsis>
                <para>The following example sends every message coming from the host <parameter>192.168.1.1</parameter> into the <parameter>d_file1</parameter> destination, 
                    and sends every message coming from the host <parameter>192.168.1.1</parameter> and containing the string <parameter>example</parameter> into the <parameter>d_file2</parameter> destination.</para>
                <synopsis>log { source(s_localhost); host(192.168.1.); destination(d_file1); 
                    log {message("example"); destination(d_file2); };
};</synopsis>
            </example>
            
        </section>
    </section>
    <section id="filters">
        <title>Filters</title>
        <indexterm significance="preferred">
            <primary>filters</primary>
        </indexterm>
        <indexterm significance="preferred">
            <primary>regular expressions</primary>
        </indexterm>
        <para>Filters perform log routing within syslog-ng: a message passes the filter if the
            filter expression is true for the particular message. If a log statement includes
            filters, the messages are sent to the destinations only if they pass all filters of the
            log path. For example, a filter can select only the messages originating from a
            particular host. Complex filters can be created using filter functions and logical
            boolean expressions.</para>
        <para>To define a filter, add a filter statement to the syslog-ng configuration file using
            the following syntax:</para>
        <indexterm>
            <primary>filters</primary>
            <secondary>defining</secondary>
        </indexterm>
        <synopsis>filter &lt;identifier&gt; { expression; };</synopsis>
        <para>The expression may contain the following elements: </para>
        <itemizedlist>
            <listitem>
                <para>The functions listed in <xref linkend="filterfunc"/>. Some of the functions
                    accept extended regular expressions as parameters.</para>
            </listitem>
            <listitem>
                <para>Parentheses</para>
            </listitem>
            <listitem>
                <para>The boolean operators <parameter>and</parameter>, <parameter>or</parameter>,
                        <parameter>not</parameter></para>
            </listitem>
        </itemizedlist>
        <example>
            <title>A simple filter statement</title>
            <para>The following filter statement selects the messages that contain the word
                    <parameter>deny</parameter> and come from the host
                <parameter>example</parameter>.</para>
            <synopsis>filter demo_filter { host("example") and match("deny"); };</synopsis>
            <para>For the filter to have effect, include it in a log statement:</para>
            <synopsis>log demo_filteredlog{
        source(s1); source(s2); 
        filter(demo_filter);
        destination(d1); destination(d2); };</synopsis>
            <para>The <parameter>host()</parameter>, <parameter>match()</parameter>, and
                    <parameter>program()</parameter> filter functions accept regular expressions as
                parameters.</para>
            <synopsis>filter demo_regexp_filter { host("system.*1") and match("deny"); };</synopsis>
        </example>
        <note>
            <para>When a log statement includes multiple filter statements, syslog-ng sends a
                message to the destination only if all filters are true for the message. In other
                words, the filters are connected with the logical <parameter>AND</parameter>
                operator. In the following example, no message arrives to the destination, because
                the filters are exclusive (the hostname of a client cannot be
                <parameter>example1</parameter> and <parameter>example2</parameter> at the same
                time):</para>
            <synopsis>filter demo_filter1 { host("example1"); };
                filter demo_filter2 { host("example2"); };

                log demo_filteredlog{
                source(s1); source(s2); 
                filter(demo_filter1); filter(demo_filter2);
                destination(d1); destination(d2); };</synopsis>
            <para>To select the messages that come from either host <parameter>example1</parameter>
                or <parameter>example2</parameter>, use a single filter expression:</para>
            <synopsis>filter demo_filter { host("example1") or host("example2"); };
                
                log demo_filteredlog{
                source(s1); source(s2); 
                filter(demo_filter);
                destination(d1); destination(d2); };</synopsis>
        </note>

        <indexterm>
            <primary>regular expressions</primary>
            <secondary>case-insensitive</secondary>
        </indexterm>
        <indexterm>
            <primary>regular expressions</primary>
            <secondary>escaping</secondary>
        </indexterm>
        <para>In the extended regular expressions, the characters <parameter>()[].*?+^$</parameter>
            are used as special symbols. Therefore, these characters have to be preceded with a
            backslash (<parameter>\</parameter>) if they are meant literally. For example, the
                <parameter>\$40</parameter> expression matches the <parameter>$40</parameter>
            string. Backslashes have to be escaped as well if they are meant literally. For example,
            the <parameter>\\d</parameter> expression matches the <parameter>\d</parameter> string.</para>
        <para>By default, all regular expressions are case sensitive. To disable the case
            sensitivity of the expression, start the expression with the <parameter>(?i)</parameter>
            string.</para>
        <synopsis>filter demo_regexp_insensitive { host("(?i)system"); };</synopsis>
        <note>
            <indexterm>
                <primary>filters</primary>
                <secondary>wildcards</secondary>
            </indexterm>
            <para>In regular expressions, the asterisk (<parameter>*</parameter>) character means 0,
                1 or any number of the previous expression. For example, in the
                <parameter>f*ilter</parameter> expression the asterisk means 0 or more f letters.
                This expression matches for the following strings: <parameter>ilter</parameter>,
                    <parameter>filter</parameter>, <parameter>ffilter</parameter>, etc. To achieve
                the wildcard functionality commonly represented by the asterisk character in other
                applications, use <parameter>.*</parameter> in your expressions, e.g.,
                    <parameter>f.*ilter</parameter>.</para>
        </note>
        <para>
            <indexterm>
                <primary>filters</primary>
                <secondary>facility and priority (level) ranges</secondary>
            </indexterm> The <parameter>level()</parameter> filter can select messages corresponding
            to a single importance level, or a level-range. To select messages of a specific level,
            use the name of the level as a filter parameter, e.g., use the following to select
            warning messages:</para>
        <synopsis>level(warning)</synopsis>
        <para>To select a range of levels, include the beginning and the ending level in the filter,
            separated with two dots (<parameter>..</parameter>). For example, to select every
            message of error or higher level, use the following filter:</para>
        <synopsis>level(err..emerg)</synopsis>
        <para>Similarly, messages sent by a range of facilities can also be selected. Note that this
            is only possible when using the name of the facilities. It is not possible to select
            ranges the numerical codes of the facilities.</para>
        <synopsis>facility(local0..local5)</synopsis>
        <para>For a complete list of the available levels and facilities, see <xref
                linkend="reference_filters"/>. </para>
        <para>For a complete description on the above functions, see <xref
                linkend="reference_filters"/>. </para>
    </section>

    <section id="configuring_macros">
        <!-- FIXME a template+makro, parser es rewrite sectionoket egy kozos sectionbe kellene tenni, es az elejen 
        leirni, hogy hogyan viszonyulnak egymashoz: vannak a makrok, parserrel lehet az uzeneteket sajat makrokra bontani, 
        a rewrite meg ezeket tudja atirni-->
        <title>Templates and macros</title>
        <indexterm significance="preferred">
            <primary>templates</primary>
        </indexterm>
        <para>The syslog-ng application allows you to define message templates, and reference them
            from every object that can use a template. Templates can be used to create standard
            message formats or filenames. Templates can reference one or more macros (e.g., date,
            the hostname, etc.). See <xref linkend="macros"/> for a list of macros available in the
            Linux/Unix versions of syslog-ng, and <xref linkend="windows_message_format"/> for the
            macros of the syslog-ng Agent for Windows application.</para>
        <para>Template objects have a single option called <parameter>template_escape</parameter>,
            which is turned on by default (<parameter>template_escape(yes)</parameter>). This causes
            syslog-ng to escape the <parameter>'</parameter> and <parameter>"</parameter> characters
            from the messages. This behavior might cause problems when the messages are passed to a
            an application that cannot handle escaped characters properly. In such case, disable the
            escape feature (<parameter>template_escape(no)</parameter>).</para>
        <note>
            <para>Earlier versions of syslog-ng used templates and scripts to send log messages into
                SQL databases. Starting from version 2.1, syslog-ng natively supports direct
                database access using the <parameter>sql()</parameter> destination. See <xref
                    linkend="reference_destination_sql"/> for details.</para>
        </note>
        <indexterm>
            <primary>templates</primary>
            <secondary>defining</secondary>
        </indexterm>
        <example>
            <title>Using templates</title>
            <indexterm>
                <primary>templates</primary>
                <secondary>example</secondary>
            </indexterm>
            <para>The following template (<parameter>t_demo_filetemplate</parameter>) adds the date
                of the message and the name of the host sending the message to the beginning of the
                message text. The template is then used in a file destination: messages sent to this
                destination (<parameter>d_file</parameter>) will use the message format defined in
                the template. </para>
            <synopsis>template t_demo_filetemplate { 
             template("$ISODATE $HOST $MSG\n"); template_escape(no); };          
destination d_file { 
             file("/var/log/messages" template(t_demo_filetemplate)); };</synopsis>
            <para>Templates can also be used inline, if they are used only at a single location. The
                following destination is equivalent with the previous example: </para>
            <synopsis>destination d_file { 
             file("/var/log/messages" 
                template("$ISODATE $HOST $MSG\n"; template_escape(no))); };</synopsis>
        </example>
        <!-- <example>
            <title>Feeding messages into an SQL database</title>
            <para>In order to record the log messages in a database, the messages have to be
                formatted in a way recognized by the database application. This can be accomplished
                using templates and macros. The following template creates an SQL
                <parameter>INSERT</parameter> command formatted to fit a database that stores the
                hostname, priority, date, application name, and message parts of the log messages in
                separate fields. </para>
            <synopsis>
template t_sql { 
    template("INSERT INTO logs (host, pri, datetime, program, msg) 
    VALUES (
      '$HOST', '$PRI', '$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC', '$PROGRAM', '$MSG');\n")
    };</synopsis>
            <para>The Premium Edition of syslog-ng natively supports logging into a database. See
                    <xref linkend="reference_destination_sql"/> for details.
                </para>
        </example>-->
    </section>
    <section id="configuring_parsers">
        <title>Parsing messages</title>
        <indexterm>
            <primary>parsers</primary>
        </indexterm>
        <indexterm>
            <primary>message parsing</primary>
        </indexterm>
        <indexterm>
            <primary>parsing messages</primary>
        </indexterm>
        <indexterm>
            <primary>segmenting messages</primary>
        </indexterm>
        <indexterm>
            <primary>splitting messages</primary>
        </indexterm>
        <para>The syslog-ng application can separate parts of log messages (i.e., the contents of
            the $MSG macro) to named fields (columns). These fields act as user-defined macros that
            can be referenced in message templates, file- and tablenames, etc. </para>
        <para>Parsers are similar to filters: they must be defined in the syslog-ng configuration
            file and used in the log statement.</para>
        <!-- FIXME parsert/rewriteot is lehet inline definialni? -->
        <note>
            <para>The order of filters, rewriting rules, and parsers in the log statement is
                important, as they are processed sequentially.
                <!-- FIXME bovebben, peldaval, filterekhez/rewrite sectionbe is -->
            </para>
        </note>
        <para>To create a parser, define the columns of the message, the delimiter or separator
            characters, and optionally the characters that are used to escape the delimiter
            characters (quote-pairs). For the list of parser parameters, see <xref
                linkend="reference_parsers"/>.</para>
        <synopsis>Declaration:
            parser parser_name {
            csv-parser(column1, column2, ...
            )
            delimiters()
            quote-pairs()
            };</synopsis>
        <para>Column names work like macros. Always use a prefix to identify the columns of the
            parsers, e.g., <parameter>MYPARSER1.COLUMN1, MYPARSER2.COLUMN2</parameter>, etc. Column
            names starting with a dot (e.g., <parameter>.HOST</parameter>) are reserved for use by
            syslog-ng. </para>
        <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
            xpointer="element(example_parser)"/>
        <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
            xpointer="element(example_parser_apache)"/>

        <para>Multiple parsers can be used to split a part of an already parsed message into further
            segments.</para>
        <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
            xpointer="element(example_parser_multiple)"/>
    </section>
    <section id="configuring_rewrite">
        <title>Rewriting messages</title>
        <indexterm>
            <primary>rewrite rules</primary>
        </indexterm>
        <indexterm>
            <primary>rewriting messages</primary>
        </indexterm>
        <indexterm>
            <primary>sedding messages</primary>
        </indexterm>
        <indexterm>
            <primary>replacing message text</primary>
        </indexterm>
        <para>The syslog-ng application can rewrite parts of log
            messages<!--( i.e., the contents of
                the $MSG macro)-->: it can search
            and replace text, and also set a specific field to a specified value. Rewriting messages
            is often used in conjunction with message parsing <xref linkend="configuring_parsers"/>.</para>
        <para>Rewrite rules are similar to filters: they must be defined in the syslog-ng
            configuration file and used in the log statement.</para>
        <!-- FIXME parsert/rewriteot is lehet inline definialni? -->
        <note>
            <para>The order of filters, rewriting rules, and parsers in the log statement is
                important, as they are processed sequentially.
                <!-- FIXME bovebben, peldaval, filterekhez/rewrite sectionbe is -->
            </para>
        </note>
        <para>To create replace a part of the log message, define the string or regular expression
            to replace, the string to replace the original text (macros can be used as well), and
            the field of the message that the rewrite rule should process. Substitution rules can
            operate on any value available via macros, e.g., HOST, MESSAGE, PROGRAM, or any
            user-defined macros created using parsers (see <xref linkend="reference_parsers"/> for
            details.). Substitution rules use the following syntax:</para>
        <synopsis>Declaration:
            rewrite &lt;name_of_the_rule&gt;{subst("&lt;string or regular expression to find&gt;", "&lt;replacement string&gt;", value(&lt;field name&gt;));};</synopsis>
        <para>A single substitution rule can include multiple substitutions that are applied
            sequentially to the message. Note that rewriting rules must be included in the log
            statement to have any effect.</para>
        <tip>
            <!-- FIXME ez le van irva valahol mashol is, ill. le kellene legyen -->
            <para>For case-insensitive searches, add <parameter>(?i)</parameter> to the string to
                replace. To replace every occurrence of the string, add
            <parameter>(?g)</parameter>.</para>
        </tip>
        <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
            xpointer="element(example_rewrite_subst)"/>
        <indexterm>
            <primary>setting message fields</primary>
        </indexterm>
        <para>To set a field of the message to a specific value, define the string to include in the
            message, and the field where it should be included. Setting a field can operate on any
            value available via macros, e.g., HOST, MESSAGE, PROGRAM, or any user-defined macros
            created using parsers (see <xref linkend="reference_parsers"/> for details.). Note that
            this operation completely replaces any previous value of that field. Use the following
            syntax:</para>
        <synopsis>Declaration:
            rewrite &lt;name_of_the_rule&gt;{set("&lt;string to include&gt;", value(&lt;field name&gt;));};</synopsis>
        <xi:include href="chapter_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"
            xpointer="element(example_rewrite_set)"/>
    </section>



    <section id="options">
        <title>Configuring global syslog-ng options</title>
        <indexterm significance="preferred">
            <primary>global options</primary>
        </indexterm>
        <para id="options_para1">The syslog-ng application has a number of global options governing
            DNS usage, the timestamp format used, and other general points. Each option may have
            parameters, similarly to driver specifications. To set global options, add an option
            statement to the syslog-ng configuration file using the following syntax:</para>
        <synopsis id="options_synopsis">options { option1(params); option2(params); ... };</synopsis>
        <example>
            <title>Using global options</title>
            <para>To disable domain name resolving, add the following line to the syslog-ng
                configuration file:</para>
            <synopsis>options { use_dns(no); };</synopsis>
        </example>
        <para>For a detailed list of the available options, see <xref linkend="reference_options"/>.
            See <xref linkend="chapter_examples"/> for important global options and recommendations
            on their use.</para>
    </section>

    <section id="tls_serverauth">
        <title>Encrypting log messages with TLS</title>
        <indexterm>
            <primary>TLS</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <indexterm>
            <primary>authentication</primary>
        </indexterm>
        <indexterm>
            <primary>encrypting log messages</primary>
        </indexterm>
        <para>This section describes how to configure TLS encryption in syslog-ng Premium Edition.
            For the concepts of using TLS in syslog-ng, see <xref linkend="concepts_tls"/>.</para>
        <para>Create an X.509 certificate for the syslog-ng server.</para>
        <note id="cert_common_name">
            <para>The <parameter>subject_alt_name</parameter> parameter (or the <parameter>Common
                    Name</parameter> parameter if the <parameter>subject_alt_name</parameter>
                parameter is empty) of the server's certificate must contain the hostname or the IP
                address (as resolved from the syslog-ng clients and relays) of the server (e.g.,
                    <parameter>syslog-ng.example.com</parameter>).</para>
            <para>Alternatively, the <parameter>Common Name</parameter> or the
                    <parameter>subject_alt_name</parameter> parameter can contain a generic
                hostname, e.g., <parameter>*.example.com</parameter>.</para>
            <para>Note that if the <parameter>Common Name</parameter> of the certificate contains a
                generic hostname, do not specify a specific hostname or an IP address in the
                    <parameter>subject_alt_name</parameter> parameter.</para>
        </note>
        <para>Complete the following steps on every syslog-ng client host:</para>
        <!-- FIXME peldascenario a commonnevrr/altnevtre -->
        <procedure>
            <title>Configuring TLS on the syslog-ng clients</title>
            <step>
                <para>Copy the CA certificate (e.g., <filename>cacert.pem</filename>) of the
                    Certificate Authority that issued the certificate of the syslog-ng server to the
                    syslog-ng client hosts, for example into the
                    <filename>/etc/syslog-ng/ca.d</filename> directory. </para>
                <para>Issue the following command on the certificate: <command>openssl x509 -noout
                        -hash -in cacert.pem</command> The result is a hash (e.g.,
                        <parameter>6d2962a8</parameter>), a series of alphanumeric characters based
                    on the Distinguished Name of the certificate. </para>
                <para>Issue the following command to create a symbolic link to the certificate that
                    uses the hash returned by the previous command and the <parameter>.0</parameter>
                    suffix. </para>
                <para>
                    <command>ln -s cacert.pem 6d2962a8.0</command>
                </para>
            </step>
            <step>
                <para>Add a destination statement to the syslog-ng configuration file that uses the
                        <parameter>tls( ca_dir(path_to_ca_directory) )</parameter> option and
                    specify the directory using the CA certificate. The destination must use the
                        <parameter>tcp()</parameter> or <parameter>tcpv6()</parameter> destination
                    driver, and the IP address and port parameters of the driver must point to the
                    syslog-ng server. </para>
                <example>
                    <title>A destination statement using TLS</title>
                    <para>The following destination encrypts the log messages using TLS and sends
                        them to the <parameter>1999/TCP</parameter> port of the syslog-ng server
                        having the <parameter>10.1.2.3</parameter> IP address. </para>
                    <synopsis>destination demo_tls_destination {
                tcp("10.1.2.3" port(1999) 
                    tls( ca_dir("/etc/syslog-ng/ca.d")) ); };</synopsis>
                </example>
            </step>
            <step>
                <para>Include the destination created in Step 2 in a log statement. </para>
                <warning>
                    <para>The encrypted connection between the server and the client fails if the
                            <parameter>Common Name</parameter> or the
                        <parameter>subject_alt_name</parameter> parameter of the server certificate
                        does not the hostname or the IP address (as resolved from the syslog-ng
                        clients and relays) of the server.</para>
                    <para>Do not forget to update the certificate files when they expire.</para>
                </warning>
            </step>
        </procedure>
        <para>Complete the following steps on the syslog-ng server:</para>
        <procedure>
            <title>Configuring TLS on the syslog-ng server</title>
            <step>
                <para>Copy the certificate (e.g., <filename>syslog-ng.cert</filename>) of the
                    syslog-ng server to the syslog-ng server host, for example into the
                        <filename>/etc/syslog-ng/cert.d</filename> directory. The certificate must
                    be a valid X.509 certificate in PEM format.</para>
            </step>
            <step>
                <para>Copy the private key (e.g., <filename>syslog-ng.key</filename>) matching the
                    certificate of the syslog-ng server to the syslog-ng server host, for example
                    into the <filename>/etc/syslog-ng/key.d</filename> directory. The key must be in
                    PEM format, and must not be password-protected.</para>
            </step>
            <step>
                <para>Add a source statement to the syslog-ng configuration file that uses the
                        <parameter>tls( key_file(key_file_fullpathname)
                        cert_file(cert_file_fullpathname) )</parameter> option and specify the key
                    and certificate files. The source must use the source driver
                    (<parameter>tcp()</parameter> or <parameter>tcpv6()</parameter>) matching the
                    destination driver used by the syslog-ng client. </para>
                <example>
                    <title>A source statement using TLS</title>
                    <para>The following source receives log messages encrypted using TLS, arriving
                        to the <parameter>1999/TCP</parameter> port of any interface of the
                        syslog-ng server. </para>
                    <synopsis>source demo_tls_source {
           tcp(ip(0.0.0.0) port(1999) 
               tls( key_file("/etc/syslog-ng/key.d/syslog-ng.key") 
                    cert_file("/etc/syslog-ng/cert.d/syslog-ng.cert")) ); };</synopsis>
                </example>
            </step>
            <step>
                <para>Disable mutual authentication for the source by setting the following TLS
                    option in the source statement: <parameter>tls(
                    peer_verify(optional-untrusted);</parameter></para>
                <para>To configure mutual authentication, see <xref linkend="tls_mutualauth"/>.</para>
                <example>
                    <title>Disabling mutual authentication</title>
                    <para>The following source receives log messages encrypted using TLS, arriving
                        to the <parameter>1999/TCP</parameter> port of any interface of the
                        syslog-ng server. The identity of the syslog-ng client is not verified.</para>
                    <synopsis>source demo_tls_source {
           tcp(ip(0.0.0.0) port(1999) 
               tls( key_file("/etc/syslog-ng/key.d/syslog-ng.key") 
                    cert_file("/etc/syslog-ng/cert.d/syslog-ng.cert") 
                    peer_verify(optional-untrusted))  ); };</synopsis>
                </example>
                <warning>
                    <para>Do not forget to update the certificate and key files when they
                    expire.</para>
                </warning>
            </step>
        </procedure>
        <para>For the details of the available <parameter>tls()</parameter> options, see <xref
                linkend="tlsoptions"/>. </para>
    </section>
    <section id="tls_mutualauth">
        <title>Mutual authentication using TLS</title>
        <indexterm>
            <primary>TLS</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <indexterm>
            <primary>mutual authentication</primary>
        </indexterm>
        <para>This section describes how to configure mutual authentication between the syslog-ng
            server and the client using syslog-ng Premium Edition. Configuring mutual authentication
            is similar to configuring TLS (see <xref linkend="tls_serverauth"/>), but the server
            verifies the identity of the client as well. Therefore, each client must have a
            certificate, and the server must have the certificate of the CA that issued the
            certificate of the clients. For the concepts of using TLS in syslog-ng, see <xref
                linkend="concepts_tls"/>.</para>

        <para>Complete the following steps on every syslog-ng client host:</para>
        <procedure>
            <title>Configuring TLS on the syslog-ng clients</title>
            <step>
                <para>Create an X.509 certificate for the syslog-ng client. The
                        <parameter>subject_alt_name</parameter> parameter (or the <parameter>Common
                        Name</parameter> parameter if the <parameter>subject_alt_name</parameter>
                    parameter is empty) must contain the hostname or the IP address (as resolved
                    from the syslog-ng clients and relays) of the client.</para>
            </step>
            <step>
                <para>Copy the certificate (e.g., <filename>client_cert.pem</filename>) and the
                    matching private key (e.g., <filename>client.key</filename>) to the syslog-ng
                    client host, for example into the <filename>/etc/syslog-ng/cert.d</filename>
                    directory. The certificate must be a valid X.509 certificate in PEM format and
                    must not be password-protected.</para>
            </step>
            <step>
                <para>Copy the CA certificate of the Certificate Authority (e.g.,
                        <filename>cacert.pem</filename>) that issued the certificate of the
                    syslog-ng server to the syslog-ng client hosts, for example into the
                        <filename>/etc/syslog-ng/ca.d</filename> directory.</para>
                <para>Issue the following command on the certificate: <command>openssl x509 -noout
                        -hash -in cacert.pem</command> The result is a hash (e.g.,
                        <parameter>6d2962a8</parameter>), a series of alphanumeric characters based
                    on the Distinguished Name of the certificate. </para>
                <para>Issue the following command to create a symbolic link to the certificate that
                    uses the hash returned by the previous command and the <parameter>.0</parameter>
                    suffix. </para>
                <para>
                    <command>ln -s cacert.pem 6d2962a8.0</command>
                </para>
            </step>
            <step>
                <para>Add a destination statement to the syslog-ng configuration file that uses the
                        <parameter>tls( ca_dir(path_to_ca_directory) )</parameter> option and
                    specify the directory using the CA certificate. The destination must use the
                        <parameter>tcp()</parameter> or <parameter>tcpv6()</parameter> destination
                    driver, and the IP address and port parameters of the driver must point to the
                    syslog-ng server. Include the client's certificate and private key in the
                        <parameter>tls()</parameter> options.</para>
                <example>
                    <title>A destination statement mutual authentication</title>
                    <para>The following destination encrypts the log messages using TLS and sends
                        them to the <parameter>1999/TCP</parameter> port of the syslog-ng server
                        having the <parameter>10.1.2.3</parameter> IP address. The private key and
                        the certificate file authenticating the client is also specified.</para>
                    <synopsis>destination demo_tls_destination {
                tcp("10.1.2.3" port(1999) 
                    tls( ca_dir("/etc/syslog-ng/ca.d") 
                         key_file("/etc/syslog-ng/key.d/client.key")
                         cert_file("/etc/syslog-ng/cert.d/client_cert.pem")) ); };</synopsis>
                </example>
            </step>
            <step>
                <para>Include the destination created in Step 2 in a log statement. </para>
                <warning>
                    <para>The encrypted connection between the server and the client fails if the
                            <parameter>Common Name</parameter> or the
                        <parameter>subject_alt_name</parameter> parameter of the server certificate
                        does not the hostname or the IP address (as resolved from the syslog-ng
                        clients and relays) of the server.</para>
                    <para>Do not forget to update the certificate files when they expire.</para>
                </warning>
            </step>
        </procedure>

        <para>Complete the following steps on the syslog-ng server:</para>
        <procedure>
            <title>Configuring TLS on the syslog-ng server</title>
            <step>
                <para>Copy the certificate (e.g., <filename>syslog-ng.cert</filename>) of the
                    syslog-ng server to the syslog-ng server host, for example into the
                        <filename>/etc/syslog-ng/cert.d</filename> directory. The certificate must
                    be a valid X.509 certificate in PEM format.</para>
            </step>
            <step>
                <para>Copy the CA certificate (e.g., <filename>cacert.pem</filename>) of the
                    Certificate Authority that issued the certificate of the syslog-ng clients to
                    the syslog-ng server, for example into the
                    <filename>/etc/syslog-ng/ca.d</filename> directory. </para>
                <para>Issue the following command on the certificate: <command>openssl x509 -noout
                        -hash -in cacert.pem</command> The result is a hash (e.g.,
                        <parameter>6d2962a8</parameter>), a series of alphanumeric characters based
                    on the Distinguished Name of the certificate. </para>
                <para>Issue the following command to create a symbolic link to the certificate that
                    uses the hash returned by the previous command and the <parameter>.0</parameter>
                    suffix. </para>
                <para>
                    <command>ln -s cacert.pem 6d2962a8.0</command>
                </para>
            </step>
            <step>
                <para>Copy the private key (e.g., <filename>syslog-ng.key</filename>) matching the
                    certificate of the syslog-ng server to the syslog-ng server host, for example
                    into the <filename>/etc/syslog-ng/key.d</filename> directory. The key must be in
                    PEM format, and must not be password-protected.</para>
            </step>
            <step>
                <para>Add a source statement to the syslog-ng configuration file that uses the
                        <parameter>tls( key_file(key_file_fullpathname)
                        cert_file(cert_file_fullpathname) )</parameter> option and specify the key
                    and certificate files. The source must use the source driver
                    (<parameter>tcp()</parameter> or <parameter>tcpv6()</parameter>) matching the
                    destination driver used by the syslog-ng client. Also specify the directory
                    storing the certificate of the CA that issued the client's certificate.</para>
                <example>
                    <title>A source statement using TLS</title>
                    <para>The following source receives log messages encrypted using TLS, arriving
                        to the <parameter>1999/TCP</parameter> port of any interface of the
                        syslog-ng server. </para>
                    <synopsis>source demo_tls_source {
           tcp(ip(0.0.0.0) port(1999) 
               tls( key_file("/etc/syslog-ng/key.d/syslog-ng.key") 
                    cert_file("/etc/syslog-ng/cert.d/syslog-ng.cert") 
                    ca_dir("/etc/syslog-ng/ca.d")) ); };</synopsis>
                </example>
                <warning>
                    <para>The encrypted connection between the server and the client fails if the
                            <parameter>Common Name</parameter> or the
                        <parameter>subject_alt_name</parameter> parameter of the client certificate
                        does not the hostname or the IP address (as resolved from the syslog-ng
                        clients and relays) of the server.</para>
                    <para>Do not forget to update the certificate and key files when they
                    expire.</para>
                </warning>
            </step>
        </procedure>
        <para>For the details of the available <parameter>tls()</parameter> options, see <xref
                linkend="tlsoptions"/>. </para>
    </section>

    <section id="configure_clients">
        <title>Configuring syslog-ng clients</title>
        <indexterm>
            <primary>syslog-ng clients</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <para>To configure syslog-ng on a client host, complete the following steps:</para>
        <procedure>
            <title>Configuring syslog-ng on client hosts</title>
            <step>
                <para>Install the syslog-ng application on the host. See <xref
                        linkend="chapter_install"/> for details installing syslog-ng on specific
                    operating systems.</para>
            </step>
            <step>
                <para>Configure the local sources that collect the log messages of the host.</para>
            </step>
            <step>
                <para>Create a network destination that points directly to the syslog-ng server, or
                    to a local relay.</para>
            </step>
            <step>
                <para>Create a log statement connecting the local sources to the syslog-ng server or
                    relay.</para>
            </step>
            <step>
                <para>If the logs will also be stored locally on the host, create local file
                    destinations.</para>
            </step>
            <step>
                <para>Create a log statement connecting the local sources to the file
                destination.</para>
            </step>
            <step>
                <para>Set filters and options (e.g., TLS encryption) as necessary.</para>
            </step>
        </procedure>
    </section>

    <section id="configure_relays">
        <title>Configuring syslog-ng relays</title>
        <indexterm>
            <primary>syslog-ng relays</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <para>To configure syslog-ng on a relay host, complete the following steps:</para>
        <procedure>
            <title>Configuring syslog-ng on relay hosts</title>
            <step>
                <para>Install the syslog-ng application on the host. See <xref
                        linkend="chapter_install"/> for details installing syslog-ng on specific
                    operating systems.</para>
            </step>
            <step>
                <para>Configure the network sources that collect the log messages sent by the
                    clients.</para>
            </step>
            <step>
                <para>Create a network destination that points to the syslog-ng server.</para>
            </step>
            <step>
                <para>Create a log statement connecting the network sources to the syslog-ng
                server.</para>
            </step>
            <step>
                <para>Configure the local sources that collect the log messages of the relay
                host.</para>
            </step>
            <step>
                <para>Create a log statement connecting the local sources to the syslog-ng
                server.</para>
            </step>
            <step>
                <para>Set filters and options (e.g., TLS encryption) as necessary.</para>
            </step>
        </procedure>
        <para>In relay mode, syslog-ng cannot write messages received from network sources into
            files; the <parameter>file()</parameter> destination is disabled. The following sources
            are network sources: <parameter>syslog()</parameter>, <parameter>tcp()</parameter>,
                <parameter>tcp6()</parameter>, <parameter>udp()</parameter>,
            <parameter>udp6()</parameter>.</para>
    </section>

    <section id="configure_servers">
        <title>Configuring syslog-ng servers</title>
        <indexterm>
            <primary>syslog-ng servers</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <para>To configure syslog-ng on a server host, complete the following steps:</para>
        <procedure>
            <title>Configuring syslog-ng on server hosts</title>
            <step>
                <para>Install the syslog-ng application on the host. See <xref
                        linkend="chapter_install"/> for details installing syslog-ng on specific
                    operating systems.</para>
            </step>
            <step>
                <para>Configure the network sources that collect the log messages sent by the
                    clients and relays.</para>
            </step>
            <step>
                <para>Create local destinations that will store the log messages, e.g., files or
                    programs.</para>
            </step>
            <step>
                <para>Create a log statement connecting the network sources to the local
                    destinations.</para>
            </step>
            <step>
                <para>Configure the local sources that collect the log messages of the syslog-ng
                    server.</para>
            </step>
            <step>
                <para>Create a log statement connecting the local sources to the local
                destinations.</para>
            </step>
            <step>
                <para>Set filters and options (e.g., TLS encryption) as necessary.</para>
            </step>
        </procedure>
    </section>

    <section id="license">
        <title>Installing and upgrading the license</title>
        <indexterm>
            <primary>license</primary>
            <secondary>installing</secondary>
        </indexterm>
        <para>The syslog-ng Premium Edition server operates only if a valid license file is present
            on the host. The license file is called <filename>license.txt</filename>, and is located
            in the same directory as the syslog-ng configuration file.</para>
        <warning>
            <para>The <filename>license.txt</filename> file must be readable to the user running the
                syslog-ng process.</para>
        </warning>
        <para>To install a license file, copy it to the directory where the configuration file is
            stored. See <xref linkend="configfile_location"/> for the location of the license file.</para>
        <para>To upgrade a license file, simply overwrite the old license file with the new one.</para>
        <note>
            <para>The license file is needed only when running syslog-ng Premium Edition in server
                mode.</para>
        </note>
    </section>
</chapter>
